
/Users/markingle/Downloads/IoTCode/Argon_BLE_Example/target/1.4.4/argon/Argon_BLE_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000055c4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00019680  2**0
                  CONTENTS
  4 .data         00000074  2003d1c4  000d95e0  0000d1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000015b8  2003d238  2003d238  0001d238  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9654  000d9654  00019654  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d967c  000d967c  0001967c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e8c5b  00000000  00000000  00019680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000114be  00000000  00000000  001022db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020ec9  00000000  00000000  00113799  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a28  00000000  00000000  00134662  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004ec0  00000000  00000000  0013708a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034469  00000000  00000000  0013bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00027b1d  00000000  00000000  001703b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104c8a  00000000  00000000  00197ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000da60  00000000  00000000  0029cb5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fd2e 	bl	d8a8e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fd4e 	bl	d8ada <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d1c4 	.word	0x2003d1c4
   d4048:	000d95e0 	.word	0x000d95e0
   d404c:	2003d238 	.word	0x2003d238
   d4050:	2003d238 	.word	0x2003d238
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fad5 	bl	d8608 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d95e0 	.word	0x000d95e0
   d4080:	000d95a4 	.word	0x000d95a4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8da 	b.w	d423c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f933 	bl	d42f4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 ba87 	b.w	d85a4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bf95 	b.w	d4fc4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bf9b 	b.w	d4fd4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bf99 	b.w	d4fd4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 feee 	bl	d4e8c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4c3d 	.word	0x000d4c3d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d40d2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d40d4:	6804      	ldr	r4, [r0, #0]
   d40d6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d40d8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d40da:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d40de:	42a6      	cmp	r6, r4
   d40e0:	d004      	beq.n	d40ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d40e2:	4620      	mov	r0, r4
   d40e4:	f001 fd3b 	bl	d5b5e <_ZN8particle17BleCharacteristicD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d40e8:	3408      	adds	r4, #8
   d40ea:	e7f8      	b.n	d40de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d40ec:	6828      	ldr	r0, [r5, #0]
   d40ee:	f000 ff71 	bl	d4fd4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d40f2:	4628      	mov	r0, r5
   d40f4:	bd70      	pop	{r4, r5, r6, pc}

000d40f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.11>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40f6:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40f8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40fa:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b92b      	cbnz	r3, d4114 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.11+0x1e>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d410e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4112:	4718      	bx	r3
   d4114:	bd10      	pop	{r4, pc}

000d4116 <_ZN8particle10BleServiceD1Ev>:

class BleService {
public:
    BleService();
    BleService(const BleUuid& uuid);
    ~BleService() = default;
   d4116:	b510      	push	{r4, lr}
   d4118:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d411a:	6840      	ldr	r0, [r0, #4]
   d411c:	b128      	cbz	r0, d412a <_ZN8particle10BleServiceD1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d411e:	6843      	ldr	r3, [r0, #4]
   d4120:	3b01      	subs	r3, #1
   d4122:	6043      	str	r3, [r0, #4]
   d4124:	b90b      	cbnz	r3, d412a <_ZN8particle10BleServiceD1Ev+0x14>
   d4126:	f7ff ffe6 	bl	d40f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.11>
   d412a:	4620      	mov	r0, r4
   d412c:	bd10      	pop	{r4, pc}

000d412e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d412e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4130:	6804      	ldr	r4, [r0, #0]
   d4132:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4134:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4136:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d413a:	42a6      	cmp	r6, r4
   d413c:	d009      	beq.n	d4152 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x24>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413e:	6860      	ldr	r0, [r4, #4]
   d4140:	b128      	cbz	r0, d414e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x20>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4142:	6843      	ldr	r3, [r0, #4]
   d4144:	3b01      	subs	r3, #1
   d4146:	6043      	str	r3, [r0, #4]
   d4148:	b90b      	cbnz	r3, d414e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x20>
   d414a:	f7ff ffd4 	bl	d40f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.11>
   d414e:	3408      	adds	r4, #8
   d4150:	e7f3      	b.n	d413a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4152:	6828      	ldr	r0, [r5, #0]
   d4154:	f000 ff3e 	bl	d4fd4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4158:	4628      	mov	r0, r5
   d415a:	bd70      	pop	{r4, r5, r6, pc}

000d415c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d415c:	4b0a      	ldr	r3, [pc, #40]	; (d4188 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d415e:	b510      	push	{r4, lr}
   d4160:	4604      	mov	r4, r0
   d4162:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4164:	f002 fef4 	bl	d6f50 <_ZN5spark10LogManager8instanceEv>
   d4168:	4621      	mov	r1, r4
   d416a:	f003 f8e1 	bl	d7330 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d416e:	f004 f997 	bl	d84a0 <_Z16_fetch_usbserialv>
   d4172:	f004 f989 	bl	d8488 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4176:	4620      	mov	r0, r4
   d4178:	4b04      	ldr	r3, [pc, #16]	; (d418c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d417a:	f840 3b04 	str.w	r3, [r0], #4
   d417e:	f002 ffdd 	bl	d713c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4182:	4620      	mov	r0, r4
   d4184:	bd10      	pop	{r4, pc}
   d4186:	bf00      	nop
   d4188:	000d8d5c 	.word	0x000d8d5c
   d418c:	000d8d44 	.word	0x000d8d44

000d4190 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4194:	f7ff ffe2 	bl	d415c <_ZN5spark16SerialLogHandlerD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2124      	movs	r1, #36	; 0x24
   d419c:	f004 faf7 	bl	d878e <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41a4:	b40e      	push	{r1, r2, r3}
   d41a6:	b500      	push	{lr}
   d41a8:	b08c      	sub	sp, #48	; 0x30
   d41aa:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41ac:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41ae:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d41b2:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41b4:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41b8:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41ba:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41bc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41be:	aa04      	add	r2, sp, #16
   d41c0:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41c2:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c4:	f000 fe72 	bl	d4eac <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d41c8:	b00c      	add	sp, #48	; 0x30
   d41ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d41ce:	b003      	add	sp, #12
   d41d0:	4770      	bx	lr
	...

000d41d4 <_Z12onDisconnectRKN8particle13BlePeerDeviceEPv>:
int char_connections = 0;

void onDataReceived_BT(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);


void onDisconnect(const BlePeerDevice& peer, void* context){
   d41d4:	b508      	push	{r3, lr}
    Log.info("Disconnect");
   d41d6:	4904      	ldr	r1, [pc, #16]	; (d41e8 <_Z12onDisconnectRKN8particle13BlePeerDeviceEPv+0x14>)
   d41d8:	4804      	ldr	r0, [pc, #16]	; (d41ec <_Z12onDisconnectRKN8particle13BlePeerDeviceEPv+0x18>)
   d41da:	f7ff ffe3 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    char_connections = 0;
   d41de:	4b04      	ldr	r3, [pc, #16]	; (d41f0 <_Z12onDisconnectRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41e0:	2200      	movs	r2, #0
   d41e2:	601a      	str	r2, [r3, #0]
   d41e4:	bd08      	pop	{r3, pc}
   d41e6:	bf00      	nop
   d41e8:	000d8d6c 	.word	0x000d8d6c
   d41ec:	2003e3d0 	.word	0x2003e3d0
   d41f0:	2003e370 	.word	0x2003e370

000d41f4 <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv>:

    // Return
	return 1;
}

void onDataReceived_BT(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d41f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d41f6:	4605      	mov	r5, r0
   d41f8:	460e      	mov	r6, r1
    Log.info("Hello the data changed");
   d41fa:	480d      	ldr	r0, [pc, #52]	; (d4230 <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d41fc:	490d      	ldr	r1, [pc, #52]	; (d4234 <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d41fe:	f7ff ffd1 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    for (size_t ii = 0; ii < len; ii++) {   
   d4202:	2400      	movs	r4, #0
   d4204:	42b4      	cmp	r4, r6
   d4206:	d011      	beq.n	d422c <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv+0x38>
        
        uint8_t flags = data[0];

        uint16_t plant_data;
        if (flags & 0x01) {
   d4208:	782b      	ldrb	r3, [r5, #0]
            memcpy(&plant_data, &data[1], sizeof(int16_t));
        } else {
            plant_data = data[1];
        }
        Log.info("Plant data: %u", plant_data);
   d420a:	490b      	ldr	r1, [pc, #44]	; (d4238 <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d420c:	4808      	ldr	r0, [pc, #32]	; (d4230 <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
    for (size_t ii = 0; ii < len; ii++) {   
        
        uint8_t flags = data[0];

        uint16_t plant_data;
        if (flags & 0x01) {
   d420e:	07db      	lsls	r3, r3, #31
            memcpy(&plant_data, &data[1], sizeof(int16_t));
   d4210:	bf4b      	itete	mi
   d4212:	f8b5 3001 	ldrhmi.w	r3, [r5, #1]
        } else {
            plant_data = data[1];
   d4216:	786b      	ldrbpl	r3, [r5, #1]
        
        uint8_t flags = data[0];

        uint16_t plant_data;
        if (flags & 0x01) {
            memcpy(&plant_data, &data[1], sizeof(int16_t));
   d4218:	f8ad 3006 	strhmi.w	r3, [sp, #6]
        } else {
            plant_data = data[1];
   d421c:	f8ad 3006 	strhpl.w	r3, [sp, #6]
        }
        Log.info("Plant data: %u", plant_data);
   d4220:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4224:	f7ff ffbe 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
	return 1;
}

void onDataReceived_BT(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    Log.info("Hello the data changed");
    for (size_t ii = 0; ii < len; ii++) {   
   d4228:	3401      	adds	r4, #1
   d422a:	e7eb      	b.n	d4204 <_Z17onDataReceived_BTPKhjRKN8particle13BlePeerDeviceEPv+0x10>
        } else {
            plant_data = data[1];
        }
        Log.info("Plant data: %u", plant_data);
    }
   d422c:	b002      	add	sp, #8
   d422e:	bd70      	pop	{r4, r5, r6, pc}
   d4230:	2003e3d0 	.word	0x2003e3d0
   d4234:	000d8d77 	.word	0x000d8d77
   d4238:	000d8d8e 	.word	0x000d8d8e

000d423c <setup>:
void onDisconnect(const BlePeerDevice& peer, void* context){
    Log.info("Disconnect");
    char_connections = 0;
}

void setup() {
   d423c:	b508      	push	{r3, lr}
    //A callback function is required inorder to run code when data is recieved from a characteristic....note there is no callback needed for sending a value from the central
    CIOT_RocksChar.onDataReceived(onDataReceived_BT, NULL);
   d423e:	2200      	movs	r2, #0
   d4240:	490e      	ldr	r1, [pc, #56]	; (d427c <setup+0x40>)
   d4242:	480f      	ldr	r0, [pc, #60]	; (d4280 <setup+0x44>)
   d4244:	f001 faee 	bl	d5824 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    
    pinMode(led, OUTPUT);
   d4248:	2101      	movs	r1, #1
   d424a:	2007      	movs	r0, #7
   d424c:	f004 fa1a 	bl	d8684 <pinMode>
    pinMode(White_LED, OUTPUT);
   d4250:	2101      	movs	r1, #1
   d4252:	2006      	movs	r0, #6
   d4254:	f004 fa16 	bl	d8684 <pinMode>
    pinMode(Button, INPUT);
   d4258:	2100      	movs	r1, #0
   d425a:	2005      	movs	r0, #5
   d425c:	f004 fa12 	bl	d8684 <pinMode>
  
  Serial.begin(115200);
   d4260:	f004 f91e 	bl	d84a0 <_Z16_fetch_usbserialv>
   d4264:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4268:	f004 f90a 	bl	d8480 <_ZN9USBSerial5beginEl>

  BLE.onDisconnected(onDisconnect, NULL);
   d426c:	f001 fbb0 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4270:	2200      	movs	r2, #0
   d4272:	4904      	ldr	r1, [pc, #16]	; (d4284 <setup+0x48>)

}
   d4274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinMode(White_LED, OUTPUT);
    pinMode(Button, INPUT);
  
  Serial.begin(115200);

  BLE.onDisconnected(onDisconnect, NULL);
   d4278:	f001 bbf0 	b.w	d5a5c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
   d427c:	000d41f5 	.word	0x000d41f5
   d4280:	2003d268 	.word	0x2003d268
   d4284:	000d41d5 	.word	0x000d41d5

000d4288 <_Z7bin2hexPKhPcii>:



// BIN2HEX - Used to convert binary UUID into hex....very handy!

int bin2hex(const byte *input, char *output, int len, int reverse) {
   d4288:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    // Check if we have data to convert
	if (input == NULL || output == NULL || len == 0) return 0;
   d428a:	b380      	cbz	r0, d42ee <_Z7bin2hexPKhPcii+0x66>
   d428c:	b361      	cbz	r1, d42e8 <_Z7bin2hexPKhPcii+0x60>
   d428e:	b36a      	cbz	r2, d42ec <_Z7bin2hexPKhPcii+0x64>
   d4290:	4f17      	ldr	r7, [pc, #92]	; (d42f0 <_Z7bin2hexPKhPcii+0x68>)
   d4292:	1886      	adds	r6, r0, r2
   d4294:	460d      	mov	r5, r1
   d4296:	2400      	movs	r4, #0

    // Step through each byte
	for (int i = 0; i < len; i++) {
   d4298:	42a2      	cmp	r2, r4
   d429a:	dd20      	ble.n	d42de <_Z7bin2hexPKhPcii+0x56>
	    if (reverse == 1) {
   d429c:	2b01      	cmp	r3, #1
   d429e:	d10a      	bne.n	d42b6 <_Z7bin2hexPKhPcii+0x2e>
		    output[i * 2]     = "0123456789ABCDEF"[input[len - (i + 1)] >> 4];
   d42a0:	f816 ec01 	ldrb.w	lr, [r6, #-1]
   d42a4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
   d42a8:	f817 e00e 	ldrb.w	lr, [r7, lr]
   d42ac:	f801 e014 	strb.w	lr, [r1, r4, lsl #1]
		    output[i * 2 + 1] = "0123456789ABCDEF"[input[len - (i + 1)] & 0x0F];
   d42b0:	f816 ec01 	ldrb.w	lr, [r6, #-1]
   d42b4:	e009      	b.n	d42ca <_Z7bin2hexPKhPcii+0x42>
	    } else {
		    output[i * 2]     = "0123456789ABCDEF"[input[i] >> 4];
   d42b6:	f810 e004 	ldrb.w	lr, [r0, r4]
   d42ba:	ea4f 1e2e 	mov.w	lr, lr, asr #4
   d42be:	f817 e00e 	ldrb.w	lr, [r7, lr]
   d42c2:	f801 e014 	strb.w	lr, [r1, r4, lsl #1]
		    output[i * 2 + 1] = "0123456789ABCDEF"[input[i] & 0x0F];
   d42c6:	f810 e004 	ldrb.w	lr, [r0, r4]
   d42ca:	f00e 0e0f 	and.w	lr, lr, #15
    
    // Check if we have data to convert
	if (input == NULL || output == NULL || len == 0) return 0;

    // Step through each byte
	for (int i = 0; i < len; i++) {
   d42ce:	3401      	adds	r4, #1
	    if (reverse == 1) {
		    output[i * 2]     = "0123456789ABCDEF"[input[len - (i + 1)] >> 4];
		    output[i * 2 + 1] = "0123456789ABCDEF"[input[len - (i + 1)] & 0x0F];
	    } else {
		    output[i * 2]     = "0123456789ABCDEF"[input[i] >> 4];
		    output[i * 2 + 1] = "0123456789ABCDEF"[input[i] & 0x0F];
   d42d0:	f817 e00e 	ldrb.w	lr, [r7, lr]
   d42d4:	f885 e001 	strb.w	lr, [r5, #1]
   d42d8:	3e01      	subs	r6, #1
   d42da:	3502      	adds	r5, #2
   d42dc:	e7dc      	b.n	d4298 <_Z7bin2hexPKhPcii+0x10>
	    }
	}
	output[len * 2] = '\0';
   d42de:	2300      	movs	r3, #0
   d42e0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
   d42e4:	2001      	movs	r0, #1
   d42e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
// BIN2HEX - Used to convert binary UUID into hex....very handy!

int bin2hex(const byte *input, char *output, int len, int reverse) {
    
    // Check if we have data to convert
	if (input == NULL || output == NULL || len == 0) return 0;
   d42e8:	4608      	mov	r0, r1
   d42ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ec:	4610      	mov	r0, r2
	}
	output[len * 2] = '\0';

    // Return
	return 1;
}
   d42ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42f0:	000d8d9d 	.word	0x000d8d9d

000d42f4 <loop>:
  BLE.onDisconnected(onDisconnect, NULL);

}


void loop() {
   d42f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42f8:	b097      	sub	sp, #92	; 0x5c

    if (!BLE.connected()){
   d42fa:	f001 fb69 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42fe:	f001 fbfc 	bl	d5afa <_ZNK8particle14BleLocalDevice9connectedEv>
   d4302:	4604      	mov	r4, r0
   d4304:	2800      	cmp	r0, #0
   d4306:	f040 80d2 	bne.w	d44ae <loop+0x1ba>
        char_connections = 0;  //Set char_connections to zero until all services and characteritistics are discovered....see below
   d430a:	4ba6      	ldr	r3, [pc, #664]	; (d45a4 <loop+0x2b0>)
        Log.info("Scanning for peripherals....");                                            
   d430c:	49a6      	ldr	r1, [pc, #664]	; (d45a8 <loop+0x2b4>)


void loop() {

    if (!BLE.connected()){
        char_connections = 0;  //Set char_connections to zero until all services and characteritistics are discovered....see below
   d430e:	6018      	str	r0, [r3, #0]
        Log.info("Scanning for peripherals....");                                            
   d4310:	48a6      	ldr	r0, [pc, #664]	; (d45ac <loop+0x2b8>)
   d4312:	f8df 82f8 	ldr.w	r8, [pc, #760]	; d460c <loop+0x318>
   d4316:	f7ff ff45 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d431a:	f000 fc97 	bl	d4c4c <HAL_Timer_Get_Milli_Seconds>
   d431e:	4605      	mov	r5, r0
        auto start_time = millis();                                       
        int scan_result_count = BLE.scan(scanResults, SCAN_RESULT_MAX);   //Scan is always used by the central
   d4320:	f001 fb56 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4324:	2232      	movs	r2, #50	; 0x32
   d4326:	49a2      	ldr	r1, [pc, #648]	; (d45b0 <loop+0x2bc>)
   d4328:	f001 fbba 	bl	d5aa0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d432c:	4681      	mov	r9, r0
   d432e:	f000 fc8d 	bl	d4c4c <HAL_Timer_Get_Milli_Seconds>
   d4332:	4606      	mov	r6, r0
        auto finish_time = millis();  
        BLE.setScanTimeout(800);
   d4334:	f001 fb4c 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4338:	f44f 7148 	mov.w	r1, #800	; 0x320
   d433c:	f001 fb92 	bl	d5a64 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
        int total_time = finish_time - start_time;                          
        Log.info("Scan duration (ms): %i", total_time);    
   d4340:	1b72      	subs	r2, r6, r5
   d4342:	499c      	ldr	r1, [pc, #624]	; (d45b4 <loop+0x2c0>)
   d4344:	4899      	ldr	r0, [pc, #612]	; (d45ac <loop+0x2b8>)
   d4346:	f7ff ff2d 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        Log.info("BLE.scan found %d devices", scan_result_count);       
   d434a:	464a      	mov	r2, r9
   d434c:	499a      	ldr	r1, [pc, #616]	; (d45b8 <loop+0x2c4>)
   d434e:	4897      	ldr	r0, [pc, #604]	; (d45ac <loop+0x2b8>)
   d4350:	f7ff ff28 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

        for (int ii = 0; ii < scan_result_count; ii++) {
   d4354:	454c      	cmp	r4, r9
   d4356:	f280 80f8 	bge.w	d454a <loop+0x256>
            
            BleUuid foundServiceUuid;
   d435a:	a80c      	add	r0, sp, #48	; 0x30
   d435c:	f000 ff15 	bl	d518a <_ZN8particle7BleUuidC1Ev>

            //The BLE.scan provides the address, advertisingData, scanData, and rssi values for 
            size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4360:	2201      	movs	r2, #1
   d4362:	a90c      	add	r1, sp, #48	; 0x30
   d4364:	4640      	mov	r0, r8
   d4366:	f001 f973 	bl	d5650 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
   d436a:	f1a8 0708 	sub.w	r7, r8, #8
   d436e:	4606      	mov	r6, r0

            Log.info("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm Services: %d",
                    scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2],
   d4370:	2100      	movs	r1, #0
   d4372:	4638      	mov	r0, r7
   d4374:	f000 fef6 	bl	d5164 <_ZNK8particle10BleAddressixEh>
   d4378:	2101      	movs	r1, #1
   d437a:	4605      	mov	r5, r0
   d437c:	4638      	mov	r0, r7
   d437e:	f000 fef1 	bl	d5164 <_ZNK8particle10BleAddressixEh>
   d4382:	2102      	movs	r1, #2
   d4384:	4682      	mov	sl, r0
   d4386:	4638      	mov	r0, r7
   d4388:	f000 feec 	bl	d5164 <_ZNK8particle10BleAddressixEh>
                    scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5], scanResults[ii].rssi,
   d438c:	2103      	movs	r1, #3

            //The BLE.scan provides the address, advertisingData, scanData, and rssi values for 
            size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);

            Log.info("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm Services: %d",
                    scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2],
   d438e:	4683      	mov	fp, r0
                    scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5], scanResults[ii].rssi,
   d4390:	4638      	mov	r0, r7
   d4392:	f000 fee7 	bl	d5164 <_ZNK8particle10BleAddressixEh>
   d4396:	2104      	movs	r1, #4
   d4398:	9007      	str	r0, [sp, #28]
   d439a:	4638      	mov	r0, r7
   d439c:	f000 fee2 	bl	d5164 <_ZNK8particle10BleAddressixEh>
   d43a0:	2105      	movs	r1, #5
   d43a2:	9006      	str	r0, [sp, #24]
   d43a4:	4638      	mov	r0, r7
   d43a6:	f000 fedd 	bl	d5164 <_ZNK8particle10BleAddressixEh>
                    svcCount);
   d43aa:	9605      	str	r6, [sp, #20]
   d43ac:	f998 1048 	ldrsb.w	r1, [r8, #72]	; 0x48
   d43b0:	9a06      	ldr	r2, [sp, #24]
   d43b2:	9b07      	ldr	r3, [sp, #28]
   d43b4:	9104      	str	r1, [sp, #16]
   d43b6:	9003      	str	r0, [sp, #12]
   d43b8:	9202      	str	r2, [sp, #8]
   d43ba:	9301      	str	r3, [sp, #4]
   d43bc:	462a      	mov	r2, r5
   d43be:	4653      	mov	r3, sl
   d43c0:	497e      	ldr	r1, [pc, #504]	; (d45bc <loop+0x2c8>)
   d43c2:	487a      	ldr	r0, [pc, #488]	; (d45ac <loop+0x2b8>)
   d43c4:	f8cd b000 	str.w	fp, [sp]
   d43c8:	f7ff feec 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

            String device_name = scanResults[ii].advertisingData.deviceName();
   d43cc:	4641      	mov	r1, r8
   d43ce:	a808      	add	r0, sp, #32
   d43d0:	f001 f8de 	bl	d5590 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            Log.info(device_name);
   d43d4:	9908      	ldr	r1, [sp, #32]
   d43d6:	4875      	ldr	r0, [pc, #468]	; (d45ac <loop+0x2b8>)
   d43d8:	f7ff fee4 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

            Log.info("Found %d services", svcCount);
   d43dc:	4632      	mov	r2, r6
   d43de:	4978      	ldr	r1, [pc, #480]	; (d45c0 <loop+0x2cc>)
   d43e0:	4872      	ldr	r0, [pc, #456]	; (d45ac <loop+0x2b8>)
   d43e2:	f7ff fedf 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d43e6:	2200      	movs	r2, #0
            for (uint8_t i = 0; i < svcCount; i++) 
   d43e8:	b2d5      	uxtb	r5, r2
   d43ea:	42ae      	cmp	r6, r5
   d43ec:	f102 0a01 	add.w	sl, r2, #1
   d43f0:	d90f      	bls.n	d4412 <loop+0x11e>
                {
                    Log.info("Service %d, UUID: %s", i,(const char*)foundServiceUuid.toString());     
   d43f2:	2200      	movs	r2, #0
   d43f4:	a90c      	add	r1, sp, #48	; 0x30
   d43f6:	a811      	add	r0, sp, #68	; 0x44
   d43f8:	f001 f801 	bl	d53fe <_ZNK8particle7BleUuid8toStringEb>
   d43fc:	462a      	mov	r2, r5
   d43fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d4400:	4970      	ldr	r1, [pc, #448]	; (d45c4 <loop+0x2d0>)
   d4402:	486a      	ldr	r0, [pc, #424]	; (d45ac <loop+0x2b8>)
   d4404:	f7ff fece 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4408:	a811      	add	r0, sp, #68	; 0x44
   d440a:	f003 fe54 	bl	d80b6 <_ZN6StringD1Ev>

            String device_name = scanResults[ii].advertisingData.deviceName();
            Log.info(device_name);

            Log.info("Found %d services", svcCount);
            for (uint8_t i = 0; i < svcCount; i++) 
   d440e:	4652      	mov	r2, sl
   d4410:	e7ea      	b.n	d43e8 <loop+0xf4>
                {
                    Log.info("Service %d, UUID: %s", i,(const char*)foundServiceUuid.toString());     
                }
            if (svcCount > 0 && foundServiceUuid == "10AB"){
   d4412:	2e00      	cmp	r6, #0
   d4414:	d044      	beq.n	d44a0 <loop+0x1ac>
   d4416:	496c      	ldr	r1, [pc, #432]	; (d45c8 <loop+0x2d4>)
   d4418:	a80c      	add	r0, sp, #48	; 0x30
   d441a:	f000 ff73 	bl	d5304 <_ZNK8particle7BleUuideqEPKc>
   d441e:	2800      	cmp	r0, #0
   d4420:	d03e      	beq.n	d44a0 <loop+0x1ac>
                peer = BLE.connect(scanResults[ii].address, true);
   d4422:	f001 fad5 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4426:	2301      	movs	r3, #1
   d4428:	463a      	mov	r2, r7
   d442a:	4601      	mov	r1, r0
   d442c:	a811      	add	r0, sp, #68	; 0x44
   d442e:	f001 ffdb 	bl	d63e8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4432:	a911      	add	r1, sp, #68	; 0x44
   d4434:	4865      	ldr	r0, [pc, #404]	; (d45cc <loop+0x2d8>)
   d4436:	f001 fc52 	bl	d5cde <_ZN8particle13BlePeerDeviceaSERKS0_>
   d443a:	a811      	add	r0, sp, #68	; 0x44
   d443c:	f001 fb96 	bl	d5b6c <_ZN8particle13BlePeerDeviceD1Ev>
                if (peer.connected()){
   d4440:	4862      	ldr	r0, [pc, #392]	; (d45cc <loop+0x2d8>)
   d4442:	f001 fa65 	bl	d5910 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4446:	2800      	cmp	r0, #0
   d4448:	f000 80a7 	beq.w	d459a <loop+0x2a6>
                    BLE.stopScanning();
   d444c:	f001 fac0 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4450:	f001 fb50 	bl	d5af4 <_ZNK8particle14BleLocalDevice12stopScanningEv>
                    Log.info("Stopping BLE scan....");
   d4454:	495e      	ldr	r1, [pc, #376]	; (d45d0 <loop+0x2dc>)
   d4456:	4855      	ldr	r0, [pc, #340]	; (d45ac <loop+0x2b8>)
   d4458:	f7ff fea4 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                    peer.getCharacteristicByUUID(CIOT_RocksChar, BleUuid(0xFE95));
   d445c:	f64f 6195 	movw	r1, #65173	; 0xfe95
   d4460:	a811      	add	r0, sp, #68	; 0x44
   d4462:	f000 fea5 	bl	d51b0 <_ZN8particle7BleUuidC1Et>
   d4466:	aa11      	add	r2, sp, #68	; 0x44
   d4468:	495a      	ldr	r1, [pc, #360]	; (d45d4 <loop+0x2e0>)
   d446a:	4858      	ldr	r0, [pc, #352]	; (d45cc <loop+0x2d8>)
   d446c:	f001 fc13 	bl	d5c96 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                    peer.getCharacteristicByUUID(LED_StateChar, BleUuid(0x1A01));
   d4470:	f641 2101 	movw	r1, #6657	; 0x1a01
   d4474:	a811      	add	r0, sp, #68	; 0x44
   d4476:	f000 fe9b 	bl	d51b0 <_ZN8particle7BleUuidC1Et>
   d447a:	aa11      	add	r2, sp, #68	; 0x44
   d447c:	4956      	ldr	r1, [pc, #344]	; (d45d8 <loop+0x2e4>)
   d447e:	4853      	ldr	r0, [pc, #332]	; (d45cc <loop+0x2d8>)
   d4480:	f001 fc09 	bl	d5c96 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                    peer.getCharacteristicByUUID(ButtonChar, BleUuid(0x10EF));
   d4484:	f241 01ef 	movw	r1, #4335	; 0x10ef
   d4488:	a811      	add	r0, sp, #68	; 0x44
   d448a:	f000 fe91 	bl	d51b0 <_ZN8particle7BleUuidC1Et>
   d448e:	4953      	ldr	r1, [pc, #332]	; (d45dc <loop+0x2e8>)
   d4490:	484e      	ldr	r0, [pc, #312]	; (d45cc <loop+0x2d8>)
   d4492:	aa11      	add	r2, sp, #68	; 0x44
   d4494:	f001 fbff 	bl	d5c96 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                    digitalWrite(led, HIGH);
   d4498:	2101      	movs	r1, #1
   d449a:	2007      	movs	r0, #7
   d449c:	f004 f903 	bl	d86a6 <digitalWrite>
            Log.info("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm Services: %d",
                    scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2],
                    scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5], scanResults[ii].rssi,
                    svcCount);

            String device_name = scanResults[ii].advertisingData.deviceName();
   d44a0:	a808      	add	r0, sp, #32
   d44a2:	f003 fe08 	bl	d80b6 <_ZN6StringD1Ev>
        BLE.setScanTimeout(800);
        int total_time = finish_time - start_time;                          
        Log.info("Scan duration (ms): %i", total_time);    
        Log.info("BLE.scan found %d devices", scan_result_count);       

        for (int ii = 0; ii < scan_result_count; ii++) {
   d44a6:	3401      	adds	r4, #1
   d44a8:	f108 0854 	add.w	r8, r8, #84	; 0x54
   d44ac:	e752      	b.n	d4354 <loop+0x60>
                }
                
            }
        }
    } else { //The code in this else section is just to show how you could get a list of all services or characteristics to find a specific one.  It only runs once.
            if (peer.connected() && char_connections == 0) {
   d44ae:	4847      	ldr	r0, [pc, #284]	; (d45cc <loop+0x2d8>)
   d44b0:	f001 fa2e 	bl	d5910 <_ZNK8particle13BlePeerDevice9connectedEv>
   d44b4:	2800      	cmp	r0, #0
   d44b6:	d048      	beq.n	d454a <loop+0x256>
   d44b8:	4f3a      	ldr	r7, [pc, #232]	; (d45a4 <loop+0x2b0>)
   d44ba:	683d      	ldr	r5, [r7, #0]
   d44bc:	2d00      	cmp	r5, #0
   d44be:	d144      	bne.n	d454a <loop+0x256>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44c0:	4c47      	ldr	r4, [pc, #284]	; (d45e0 <loop+0x2ec>)
                ble_peer_all_services = peer.discoverAllServices();
   d44c2:	4942      	ldr	r1, [pc, #264]	; (d45cc <loop+0x2d8>)
   d44c4:	a811      	add	r0, sp, #68	; 0x44
   d44c6:	f001 fe3a 	bl	d613e <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
      __a = _GLIBCXX_MOVE(__b);
   d44ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44cc:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d44ce:	6022      	str	r2, [r4, #0]
   d44d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   d44d2:	9311      	str	r3, [sp, #68]	; 0x44
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44d4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d44d6:	6062      	str	r2, [r4, #4]
   d44d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   d44da:	9312      	str	r3, [sp, #72]	; 0x48
   d44dc:	a811      	add	r0, sp, #68	; 0x44
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44de:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d44e0:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d44e2:	9313      	str	r3, [sp, #76]	; 0x4c
   d44e4:	f7ff fe23 	bl	d412e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d44e8:	6862      	ldr	r2, [r4, #4]
                if (ble_peer_all_services.size()) {
   d44ea:	b14a      	cbz	r2, d4500 <loop+0x20c>
                    Log.info("Found %u Services", ble_peer_all_services.size());
   d44ec:	493d      	ldr	r1, [pc, #244]	; (d45e4 <loop+0x2f0>)
   d44ee:	482f      	ldr	r0, [pc, #188]	; (d45ac <loop+0x2b8>)
   d44f0:	f7ff fe58 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

                    //The code below is based on the follow forum topic - https://community.particle.io/t/after-successful-ble-connect-cannot-read-characteristic/52318/7
                    for (int i = 0; i < ble_peer_all_services.size(); i++){
   d44f4:	46aa      	mov	sl, r5
   d44f6:	4625      	mov	r5, r4
   d44f8:	6863      	ldr	r3, [r4, #4]
   d44fa:	459a      	cmp	sl, r3
   d44fc:	f2c0 808a 	blt.w	d4614 <loop+0x320>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4500:	4c39      	ldr	r4, [pc, #228]	; (d45e8 <loop+0x2f4>)
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[24], 6, 1);
                            Log.info("     LONG  %s", ble_char_uuid_string);
                        }
                    }
                }
                ble_peer_all_chars = peer.discoverAllCharacteristics();
   d4502:	4932      	ldr	r1, [pc, #200]	; (d45cc <loop+0x2d8>)
   d4504:	a811      	add	r0, sp, #68	; 0x44
   d4506:	f001 febd 	bl	d6284 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
      __a = _GLIBCXX_MOVE(__b);
   d450a:	9a11      	ldr	r2, [sp, #68]	; 0x44
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d450c:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d450e:	6022      	str	r2, [r4, #0]
   d4510:	9a12      	ldr	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   d4512:	9311      	str	r3, [sp, #68]	; 0x44
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4514:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4516:	6062      	str	r2, [r4, #4]
   d4518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   d451a:	9312      	str	r3, [sp, #72]	; 0x48
   d451c:	a811      	add	r0, sp, #68	; 0x44
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d451e:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4520:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4522:	9313      	str	r3, [sp, #76]	; 0x4c
   d4524:	f7ff fdd5 	bl	d40d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d4528:	6862      	ldr	r2, [r4, #4]
                if (ble_peer_all_chars.size()) {
   d452a:	b162      	cbz	r2, d4546 <loop+0x252>
                    Log.info("Found %u charactericsitics", ble_peer_all_chars.size());
   d452c:	492f      	ldr	r1, [pc, #188]	; (d45ec <loop+0x2f8>)
   d452e:	481f      	ldr	r0, [pc, #124]	; (d45ac <loop+0x2b8>)
                    for (int i = 0; i < ble_peer_all_chars.size(); i++){
                        bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[0], &ble_char_uuid_string[0],2,1);
   d4530:	f8df a0dc 	ldr.w	sl, [pc, #220]	; d4610 <loop+0x31c>
                        }
                    }
                }
                ble_peer_all_chars = peer.discoverAllCharacteristics();
                if (ble_peer_all_chars.size()) {
                    Log.info("Found %u charactericsitics", ble_peer_all_chars.size());
   d4534:	f7ff fe36 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                    for (int i = 0; i < ble_peer_all_chars.size(); i++){
   d4538:	f04f 0900 	mov.w	r9, #0
   d453c:	4625      	mov	r5, r4
   d453e:	6863      	ldr	r3, [r4, #4]
   d4540:	4599      	cmp	r9, r3
   d4542:	f2c0 80df 	blt.w	d4704 <loop+0x410>
                            Log.info("     LONG  %s", ble_char_uuid_string);
                        }
                    }
                }
                // We only want to run the discover code once
                char_connections = 1;
   d4546:	2301      	movs	r3, #1
   d4548:	603b      	str	r3, [r7, #0]
            }
        }
    if (peer.connected()) {
   d454a:	4820      	ldr	r0, [pc, #128]	; (d45cc <loop+0x2d8>)
   d454c:	f001 f9e0 	bl	d5910 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4550:	b1f0      	cbz	r0, d4590 <loop+0x29c>
        LED_StateChar.getValue(LED_state);
   d4552:	4927      	ldr	r1, [pc, #156]	; (d45f0 <loop+0x2fc>)
   d4554:	4820      	ldr	r0, [pc, #128]	; (d45d8 <loop+0x2e4>)
   d4556:	f001 f903 	bl	d5760 <_ZNK8particle17BleCharacteristic8getValueER6String>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d455a:	4926      	ldr	r1, [pc, #152]	; (d45f4 <loop+0x300>)
   d455c:	4824      	ldr	r0, [pc, #144]	; (d45f0 <loop+0x2fc>)
   d455e:	f003 fe84 	bl	d826a <_ZNK6String6equalsEPKc>
        if (LED_state == "1"){
   d4562:	4601      	mov	r1, r0
   d4564:	b100      	cbz	r0, d4568 <loop+0x274>
            digitalWrite(White_LED, HIGH);
   d4566:	2101      	movs	r1, #1
        } else {
            digitalWrite(White_LED, LOW);
   d4568:	2006      	movs	r0, #6
   d456a:	f004 f89c 	bl	d86a6 <digitalWrite>
        }
        //LED_State.setValue(Switch_state);
        CIOT_RocksChar.getValue(data, 10);
   d456e:	220a      	movs	r2, #10
   d4570:	4921      	ldr	r1, [pc, #132]	; (d45f8 <loop+0x304>)
   d4572:	4818      	ldr	r0, [pc, #96]	; (d45d4 <loop+0x2e0>)
   d4574:	f001 f8ce 	bl	d5714 <_ZNK8particle17BleCharacteristic8getValueEPhj>
        if (digitalRead(Button) == 0){ 
   d4578:	2005      	movs	r0, #5
   d457a:	f004 f8ad 	bl	d86d8 <digitalRead>
   d457e:	b908      	cbnz	r0, d4584 <loop+0x290>
            Log.info("CIOT ROCKS!!!!");
   d4580:	491e      	ldr	r1, [pc, #120]	; (d45fc <loop+0x308>)
   d4582:	e006      	b.n	d4592 <loop+0x29e>
        } else {
            Log.info("...and so do %s", data);
   d4584:	4a1c      	ldr	r2, [pc, #112]	; (d45f8 <loop+0x304>)
   d4586:	491e      	ldr	r1, [pc, #120]	; (d4600 <loop+0x30c>)
   d4588:	4808      	ldr	r0, [pc, #32]	; (d45ac <loop+0x2b8>)
   d458a:	f7ff fe0b 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d458e:	e12f      	b.n	d47f0 <loop+0x4fc>
        }
        
    } else {
        Log.info("Peripheral is NOT connected");
   d4590:	491c      	ldr	r1, [pc, #112]	; (d4604 <loop+0x310>)
   d4592:	4806      	ldr	r0, [pc, #24]	; (d45ac <loop+0x2b8>)
   d4594:	f7ff fe06 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    }
    //delay(3000);
}
   d4598:	e12a      	b.n	d47f0 <loop+0x4fc>
                    peer.getCharacteristicByUUID(CIOT_RocksChar, BleUuid(0xFE95));
                    peer.getCharacteristicByUUID(LED_StateChar, BleUuid(0x1A01));
                    peer.getCharacteristicByUUID(ButtonChar, BleUuid(0x10EF));
                    digitalWrite(led, HIGH);
                } else {
                    Log.info("Connection Failed");
   d459a:	491b      	ldr	r1, [pc, #108]	; (d4608 <loop+0x314>)
   d459c:	4803      	ldr	r0, [pc, #12]	; (d45ac <loop+0x2b8>)
   d459e:	f7ff fe01 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d45a2:	e77d      	b.n	d44a0 <loop+0x1ac>
   d45a4:	2003e370 	.word	0x2003e370
   d45a8:	000d8dae 	.word	0x000d8dae
   d45ac:	2003e3d0 	.word	0x2003e3d0
   d45b0:	2003d280 	.word	0x2003d280
   d45b4:	000d8dcb 	.word	0x000d8dcb
   d45b8:	000d8de2 	.word	0x000d8de2
   d45bc:	000d8dfc 	.word	0x000d8dfc
   d45c0:	000d8e39 	.word	0x000d8e39
   d45c4:	000d8e4b 	.word	0x000d8e4b
   d45c8:	000d8e60 	.word	0x000d8e60
   d45cc:	2003d270 	.word	0x2003d270
   d45d0:	000d8e65 	.word	0x000d8e65
   d45d4:	2003d268 	.word	0x2003d268
   d45d8:	2003d258 	.word	0x2003d258
   d45dc:	2003d278 	.word	0x2003d278
   d45e0:	2003e374 	.word	0x2003e374
   d45e4:	000d8e8d 	.word	0x000d8e8d
   d45e8:	2003d24c 	.word	0x2003d24c
   d45ec:	000d8ebc 	.word	0x000d8ebc
   d45f0:	2003d23c 	.word	0x2003d23c
   d45f4:	000d920a 	.word	0x000d920a
   d45f8:	2003e2e8 	.word	0x2003e2e8
   d45fc:	000d8eee 	.word	0x000d8eee
   d4600:	000d8efd 	.word	0x000d8efd
   d4604:	000d8f0d 	.word	0x000d8f0d
   d4608:	000d8e7b 	.word	0x000d8e7b
   d460c:	2003d288 	.word	0x2003d288
   d4610:	2003e320 	.word	0x2003e320
                if (ble_peer_all_services.size()) {
                    Log.info("Found %u Services", ble_peer_all_services.size());

                    //The code below is based on the follow forum topic - https://community.particle.io/t/after-successful-ble-connect-cannot-read-characteristic/52318/7
                    for (int i = 0; i < ble_peer_all_services.size(); i++){
                        bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[0],2,1);
   d4614:	6829      	ldr	r1, [r5, #0]
   d4616:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   d461a:	4431      	add	r1, r6
   d461c:	a811      	add	r0, sp, #68	; 0x44
   d461e:	f001 f905 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d4622:	a811      	add	r0, sp, #68	; 0x44
   d4624:	f000 fdd5 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4628:	2301      	movs	r3, #1
   d462a:	2202      	movs	r2, #2
   d462c:	4972      	ldr	r1, [pc, #456]	; (d47f8 <loop+0x504>)
   d462e:	f7ff fe2b 	bl	d4288 <_Z7bin2hexPKhPcii>
                        Log.info("Service : 0x%s", ble_service_uuid_string);
   d4632:	4a71      	ldr	r2, [pc, #452]	; (d47f8 <loop+0x504>)
   d4634:	4971      	ldr	r1, [pc, #452]	; (d47fc <loop+0x508>)
   d4636:	4872      	ldr	r0, [pc, #456]	; (d4800 <loop+0x50c>)
   d4638:	f7ff fdb4 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                        if (ble_peer_all_services[i].UUID().type() == BleUuidType::LONG) {
   d463c:	6829      	ldr	r1, [r5, #0]
   d463e:	a811      	add	r0, sp, #68	; 0x44
   d4640:	4431      	add	r1, r6
   d4642:	f001 f8f3 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d4646:	a811      	add	r0, sp, #68	; 0x44
   d4648:	f000 fdbc 	bl	d51c4 <_ZNK8particle7BleUuid4typeEv>
   d464c:	2801      	cmp	r0, #1
   d464e:	4680      	mov	r8, r0
   d4650:	d155      	bne.n	d46fe <loop+0x40a>
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[12], &ble_service_uuid_string[0], 4, 1);
   d4652:	6829      	ldr	r1, [r5, #0]
                            ble_char_uuid_string[8] = '-';
   d4654:	f8df 91c0 	ldr.w	r9, [pc, #448]	; d4818 <loop+0x524>
                    //The code below is based on the follow forum topic - https://community.particle.io/t/after-successful-ble-connect-cannot-read-characteristic/52318/7
                    for (int i = 0; i < ble_peer_all_services.size(); i++){
                        bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[0],2,1);
                        Log.info("Service : 0x%s", ble_service_uuid_string);
                        if (ble_peer_all_services[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[12], &ble_service_uuid_string[0], 4, 1);
   d4658:	4431      	add	r1, r6
   d465a:	a811      	add	r0, sp, #68	; 0x44
   d465c:	f001 f8e6 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d4660:	a811      	add	r0, sp, #68	; 0x44
   d4662:	f000 fdb6 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4666:	4643      	mov	r3, r8
   d4668:	2204      	movs	r2, #4
   d466a:	4963      	ldr	r1, [pc, #396]	; (d47f8 <loop+0x504>)
   d466c:	300c      	adds	r0, #12
   d466e:	f7ff fe0b 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[8] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[10], &ble_service_uuid_string[9], 2, 1);
   d4672:	6829      	ldr	r1, [r5, #0]
                    for (int i = 0; i < ble_peer_all_services.size(); i++){
                        bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[0],2,1);
                        Log.info("Service : 0x%s", ble_service_uuid_string);
                        if (ble_peer_all_services[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[12], &ble_service_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
   d4674:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[10], &ble_service_uuid_string[9], 2, 1);
   d4678:	4431      	add	r1, r6
   d467a:	a811      	add	r0, sp, #68	; 0x44
                    for (int i = 0; i < ble_peer_all_services.size(); i++){
                        bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[0],2,1);
                        Log.info("Service : 0x%s", ble_service_uuid_string);
                        if (ble_peer_all_services[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[12], &ble_service_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
   d467c:	f889 b008 	strb.w	fp, [r9, #8]
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[10], &ble_service_uuid_string[9], 2, 1);
   d4680:	f001 f8d4 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d4684:	a811      	add	r0, sp, #68	; 0x44
   d4686:	f000 fda4 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d468a:	4643      	mov	r3, r8
   d468c:	2202      	movs	r2, #2
   d468e:	495d      	ldr	r1, [pc, #372]	; (d4804 <loop+0x510>)
   d4690:	300a      	adds	r0, #10
   d4692:	f7ff fdf9 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[13] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[8], &ble_service_uuid_string[14], 2, 1);
   d4696:	6829      	ldr	r1, [r5, #0]
                        Log.info("Service : 0x%s", ble_service_uuid_string);
                        if (ble_peer_all_services[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[12], &ble_service_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[10], &ble_service_uuid_string[9], 2, 1);
                            ble_char_uuid_string[13] = '-';
   d4698:	f889 b00d 	strb.w	fp, [r9, #13]
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[8], &ble_service_uuid_string[14], 2, 1);
   d469c:	4431      	add	r1, r6
   d469e:	a811      	add	r0, sp, #68	; 0x44
   d46a0:	f001 f8c4 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d46a4:	a811      	add	r0, sp, #68	; 0x44
   d46a6:	f000 fd94 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d46aa:	4643      	mov	r3, r8
   d46ac:	2202      	movs	r2, #2
   d46ae:	4956      	ldr	r1, [pc, #344]	; (d4808 <loop+0x514>)
   d46b0:	3008      	adds	r0, #8
   d46b2:	f7ff fde9 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[18] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[6], &ble_service_uuid_string[19], 2, 1);
   d46b6:	6829      	ldr	r1, [r5, #0]
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[12], &ble_service_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[10], &ble_service_uuid_string[9], 2, 1);
                            ble_char_uuid_string[13] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[8], &ble_service_uuid_string[14], 2, 1);
                            ble_char_uuid_string[18] = '-';
   d46b8:	f889 b012 	strb.w	fp, [r9, #18]
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[6], &ble_service_uuid_string[19], 2, 1);
   d46bc:	4431      	add	r1, r6
   d46be:	a811      	add	r0, sp, #68	; 0x44
   d46c0:	f001 f8b4 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d46c4:	a811      	add	r0, sp, #68	; 0x44
   d46c6:	f000 fd84 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d46ca:	4643      	mov	r3, r8
   d46cc:	2202      	movs	r2, #2
   d46ce:	494f      	ldr	r1, [pc, #316]	; (d480c <loop+0x518>)
   d46d0:	3006      	adds	r0, #6
   d46d2:	f7ff fdd9 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[23] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[24], 6, 1);
   d46d6:	6829      	ldr	r1, [r5, #0]
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[10], &ble_service_uuid_string[9], 2, 1);
                            ble_char_uuid_string[13] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[8], &ble_service_uuid_string[14], 2, 1);
                            ble_char_uuid_string[18] = '-';
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[6], &ble_service_uuid_string[19], 2, 1);
                            ble_char_uuid_string[23] = '-';
   d46d8:	f889 b017 	strb.w	fp, [r9, #23]
                            bin2hex(&ble_peer_all_services[i].UUID().rawBytes()[0], &ble_service_uuid_string[24], 6, 1);
   d46dc:	4431      	add	r1, r6
   d46de:	a811      	add	r0, sp, #68	; 0x44
   d46e0:	f001 f8a4 	bl	d582c <_ZNK8particle10BleService4UUIDEv>
   d46e4:	a811      	add	r0, sp, #68	; 0x44
   d46e6:	f000 fd74 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d46ea:	2206      	movs	r2, #6
   d46ec:	4948      	ldr	r1, [pc, #288]	; (d4810 <loop+0x51c>)
   d46ee:	4643      	mov	r3, r8
   d46f0:	f7ff fdca 	bl	d4288 <_Z7bin2hexPKhPcii>
                            Log.info("     LONG  %s", ble_char_uuid_string);
   d46f4:	464a      	mov	r2, r9
   d46f6:	4947      	ldr	r1, [pc, #284]	; (d4814 <loop+0x520>)
   d46f8:	4841      	ldr	r0, [pc, #260]	; (d4800 <loop+0x50c>)
   d46fa:	f7ff fd53 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                ble_peer_all_services = peer.discoverAllServices();
                if (ble_peer_all_services.size()) {
                    Log.info("Found %u Services", ble_peer_all_services.size());

                    //The code below is based on the follow forum topic - https://community.particle.io/t/after-successful-ble-connect-cannot-read-characteristic/52318/7
                    for (int i = 0; i < ble_peer_all_services.size(); i++){
   d46fe:	f10a 0a01 	add.w	sl, sl, #1
   d4702:	e6f9      	b.n	d44f8 <loop+0x204>
                }
                ble_peer_all_chars = peer.discoverAllCharacteristics();
                if (ble_peer_all_chars.size()) {
                    Log.info("Found %u charactericsitics", ble_peer_all_chars.size());
                    for (int i = 0; i < ble_peer_all_chars.size(); i++){
                        bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[0], &ble_char_uuid_string[0],2,1);
   d4704:	6829      	ldr	r1, [r5, #0]
   d4706:	ea4f 06c9 	mov.w	r6, r9, lsl #3
   d470a:	4431      	add	r1, r6
   d470c:	a811      	add	r0, sp, #68	; 0x44
   d470e:	f000 fff8 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d4712:	a811      	add	r0, sp, #68	; 0x44
   d4714:	f000 fd5d 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4718:	2301      	movs	r3, #1
   d471a:	2202      	movs	r2, #2
   d471c:	493e      	ldr	r1, [pc, #248]	; (d4818 <loop+0x524>)
   d471e:	f7ff fdb3 	bl	d4288 <_Z7bin2hexPKhPcii>
                        Log.info("Characterisitic : 0x%s", ble_char_uuid_string);
   d4722:	4a3d      	ldr	r2, [pc, #244]	; (d4818 <loop+0x524>)
   d4724:	493d      	ldr	r1, [pc, #244]	; (d481c <loop+0x528>)
   d4726:	4836      	ldr	r0, [pc, #216]	; (d4800 <loop+0x50c>)
   d4728:	f7ff fd3c 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                    // Display header for long characteristics
                        if (ble_peer_all_chars[i].UUID().type() == BleUuidType::LONG) {
   d472c:	6829      	ldr	r1, [r5, #0]
   d472e:	a811      	add	r0, sp, #68	; 0x44
   d4730:	4431      	add	r1, r6
   d4732:	f000 ffe6 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d4736:	a811      	add	r0, sp, #68	; 0x44
   d4738:	f000 fd44 	bl	d51c4 <_ZNK8particle7BleUuid4typeEv>
   d473c:	2801      	cmp	r0, #1
   d473e:	4680      	mov	r8, r0
   d4740:	d153      	bne.n	d47ea <loop+0x4f6>
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[12], &ble_char_uuid_string[0], 4, 1);
   d4742:	6829      	ldr	r1, [r5, #0]
   d4744:	a811      	add	r0, sp, #68	; 0x44
   d4746:	4431      	add	r1, r6
   d4748:	f000 ffdb 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d474c:	a811      	add	r0, sp, #68	; 0x44
   d474e:	f000 fd40 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4752:	4643      	mov	r3, r8
   d4754:	2204      	movs	r2, #4
   d4756:	4930      	ldr	r1, [pc, #192]	; (d4818 <loop+0x524>)
   d4758:	300c      	adds	r0, #12
   d475a:	f7ff fd95 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[8] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[10], &ble_char_uuid_string[9], 2, 1);
   d475e:	6829      	ldr	r1, [r5, #0]
                        bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[0], &ble_char_uuid_string[0],2,1);
                        Log.info("Characterisitic : 0x%s", ble_char_uuid_string);
                    // Display header for long characteristics
                        if (ble_peer_all_chars[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[12], &ble_char_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
   d4760:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[10], &ble_char_uuid_string[9], 2, 1);
   d4764:	4431      	add	r1, r6
   d4766:	a811      	add	r0, sp, #68	; 0x44
                        bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[0], &ble_char_uuid_string[0],2,1);
                        Log.info("Characterisitic : 0x%s", ble_char_uuid_string);
                    // Display header for long characteristics
                        if (ble_peer_all_chars[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[12], &ble_char_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
   d4768:	f88a b008 	strb.w	fp, [sl, #8]
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[10], &ble_char_uuid_string[9], 2, 1);
   d476c:	f000 ffc9 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d4770:	a811      	add	r0, sp, #68	; 0x44
   d4772:	f000 fd2e 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4776:	4643      	mov	r3, r8
   d4778:	2202      	movs	r2, #2
   d477a:	4929      	ldr	r1, [pc, #164]	; (d4820 <loop+0x52c>)
   d477c:	300a      	adds	r0, #10
   d477e:	f7ff fd83 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[13] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[8], &ble_char_uuid_string[14], 2, 1);
   d4782:	6829      	ldr	r1, [r5, #0]
                    // Display header for long characteristics
                        if (ble_peer_all_chars[i].UUID().type() == BleUuidType::LONG) {
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[12], &ble_char_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[10], &ble_char_uuid_string[9], 2, 1);
                            ble_char_uuid_string[13] = '-';
   d4784:	f88a b00d 	strb.w	fp, [sl, #13]
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[8], &ble_char_uuid_string[14], 2, 1);
   d4788:	4431      	add	r1, r6
   d478a:	a811      	add	r0, sp, #68	; 0x44
   d478c:	f000 ffb9 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d4790:	a811      	add	r0, sp, #68	; 0x44
   d4792:	f000 fd1e 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4796:	4643      	mov	r3, r8
   d4798:	2202      	movs	r2, #2
   d479a:	4922      	ldr	r1, [pc, #136]	; (d4824 <loop+0x530>)
   d479c:	3008      	adds	r0, #8
   d479e:	f7ff fd73 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[18] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[6], &ble_char_uuid_string[19], 2, 1);
   d47a2:	6829      	ldr	r1, [r5, #0]
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[12], &ble_char_uuid_string[0], 4, 1);
                            ble_char_uuid_string[8] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[10], &ble_char_uuid_string[9], 2, 1);
                            ble_char_uuid_string[13] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[8], &ble_char_uuid_string[14], 2, 1);
                            ble_char_uuid_string[18] = '-';
   d47a4:	f88a b012 	strb.w	fp, [sl, #18]
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[6], &ble_char_uuid_string[19], 2, 1);
   d47a8:	4431      	add	r1, r6
   d47aa:	a811      	add	r0, sp, #68	; 0x44
   d47ac:	f000 ffa9 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d47b0:	a811      	add	r0, sp, #68	; 0x44
   d47b2:	f000 fd0e 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d47b6:	4643      	mov	r3, r8
   d47b8:	2202      	movs	r2, #2
   d47ba:	491b      	ldr	r1, [pc, #108]	; (d4828 <loop+0x534>)
   d47bc:	3006      	adds	r0, #6
   d47be:	f7ff fd63 	bl	d4288 <_Z7bin2hexPKhPcii>
                            ble_char_uuid_string[23] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[0], &ble_char_uuid_string[24], 6, 1);
   d47c2:	6829      	ldr	r1, [r5, #0]
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[10], &ble_char_uuid_string[9], 2, 1);
                            ble_char_uuid_string[13] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[8], &ble_char_uuid_string[14], 2, 1);
                            ble_char_uuid_string[18] = '-';
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[6], &ble_char_uuid_string[19], 2, 1);
                            ble_char_uuid_string[23] = '-';
   d47c4:	f88a b017 	strb.w	fp, [sl, #23]
                            bin2hex(&ble_peer_all_chars[i].UUID().rawBytes()[0], &ble_char_uuid_string[24], 6, 1);
   d47c8:	4431      	add	r1, r6
   d47ca:	a811      	add	r0, sp, #68	; 0x44
   d47cc:	f000 ff99 	bl	d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>
   d47d0:	a811      	add	r0, sp, #68	; 0x44
   d47d2:	f000 fcfe 	bl	d51d2 <_ZNK8particle7BleUuid8rawBytesEv>
   d47d6:	2206      	movs	r2, #6
   d47d8:	4914      	ldr	r1, [pc, #80]	; (d482c <loop+0x538>)
   d47da:	4643      	mov	r3, r8
   d47dc:	f7ff fd54 	bl	d4288 <_Z7bin2hexPKhPcii>
                            Log.info("     LONG  %s", ble_char_uuid_string);
   d47e0:	4a0d      	ldr	r2, [pc, #52]	; (d4818 <loop+0x524>)
   d47e2:	490c      	ldr	r1, [pc, #48]	; (d4814 <loop+0x520>)
   d47e4:	4806      	ldr	r0, [pc, #24]	; (d4800 <loop+0x50c>)
   d47e6:	f7ff fcdd 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                    }
                }
                ble_peer_all_chars = peer.discoverAllCharacteristics();
                if (ble_peer_all_chars.size()) {
                    Log.info("Found %u charactericsitics", ble_peer_all_chars.size());
                    for (int i = 0; i < ble_peer_all_chars.size(); i++){
   d47ea:	f109 0901 	add.w	r9, r9, #1
   d47ee:	e6a6      	b.n	d453e <loop+0x24a>
        
    } else {
        Log.info("Peripheral is NOT connected");
    }
    //delay(3000);
}
   d47f0:	b017      	add	sp, #92	; 0x5c
   d47f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f6:	bf00      	nop
   d47f8:	2003e348 	.word	0x2003e348
   d47fc:	000d8e9f 	.word	0x000d8e9f
   d4800:	2003e3d0 	.word	0x2003e3d0
   d4804:	2003e351 	.word	0x2003e351
   d4808:	2003e356 	.word	0x2003e356
   d480c:	2003e35b 	.word	0x2003e35b
   d4810:	2003e360 	.word	0x2003e360
   d4814:	000d8eae 	.word	0x000d8eae
   d4818:	2003e320 	.word	0x2003e320
   d481c:	000d8ed7 	.word	0x000d8ed7
   d4820:	2003e329 	.word	0x2003e329
   d4824:	2003e32e 	.word	0x2003e32e
   d4828:	2003e333 	.word	0x2003e333
   d482c:	2003e338 	.word	0x2003e338

000d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4830:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4832:	6804      	ldr	r4, [r0, #0]
   d4834:	6843      	ldr	r3, [r0, #4]
   d4836:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4838:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d483a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d483e:	42a6      	cmp	r6, r4
   d4840:	d004      	beq.n	d484c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4842:	4620      	mov	r0, r4
   d4844:	f003 fc37 	bl	d80b6 <_ZN6StringD1Ev>
   d4848:	3414      	adds	r4, #20
   d484a:	e7f8      	b.n	d483e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d484c:	6828      	ldr	r0, [r5, #0]
   d484e:	f000 fbc1 	bl	d4fd4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4852:	4628      	mov	r0, r5
   d4854:	bd70      	pop	{r4, r5, r6, pc}

000d4856 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4856:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d485a:	4606      	mov	r6, r0
   d485c:	460c      	mov	r4, r1
   d485e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4860:	d916      	bls.n	d4890 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4862:	4290      	cmp	r0, r2
   d4864:	d215      	bcs.n	d4892 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4866:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d486a:	1a6c      	subs	r4, r5, r1
   d486c:	f1a1 0714 	sub.w	r7, r1, #20
   d4870:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4872:	42af      	cmp	r7, r5
   d4874:	d01c      	beq.n	d48b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4876:	b12c      	cbz	r4, d4884 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4878:	4629      	mov	r1, r5
   d487a:	4620      	mov	r0, r4
   d487c:	f003 fc0b 	bl	d8096 <_ZN6StringC1EOS_>
   d4880:	7c2b      	ldrb	r3, [r5, #16]
   d4882:	7423      	strb	r3, [r4, #16]
   d4884:	4628      	mov	r0, r5
   d4886:	f003 fc16 	bl	d80b6 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d488a:	3d14      	subs	r5, #20
   d488c:	3c14      	subs	r4, #20
   d488e:	e7f0      	b.n	d4872 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4890:	d00e      	beq.n	d48b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4892:	42ac      	cmp	r4, r5
   d4894:	d00c      	beq.n	d48b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4896:	b12e      	cbz	r6, d48a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4898:	4621      	mov	r1, r4
   d489a:	4630      	mov	r0, r6
   d489c:	f003 fbfb 	bl	d8096 <_ZN6StringC1EOS_>
   d48a0:	7c23      	ldrb	r3, [r4, #16]
   d48a2:	7433      	strb	r3, [r6, #16]
   d48a4:	4620      	mov	r0, r4
   d48a6:	f003 fc06 	bl	d80b6 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d48aa:	3414      	adds	r4, #20
   d48ac:	3614      	adds	r6, #20
   d48ae:	e7f0      	b.n	d4892 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d48b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d48b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d48b6:	2300      	movs	r3, #0
   d48b8:	6003      	str	r3, [r0, #0]
   d48ba:	6043      	str	r3, [r0, #4]
   d48bc:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d48be:	684e      	ldr	r6, [r1, #4]
   d48c0:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d48c2:	4604      	mov	r4, r0
   d48c4:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d48c6:	dd24      	ble.n	d4912 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d48c8:	f04f 0814 	mov.w	r8, #20
   d48cc:	fb08 f006 	mul.w	r0, r8, r6
   d48d0:	f000 fb78 	bl	d4fc4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d48d4:	4605      	mov	r5, r0
   d48d6:	b1e0      	cbz	r0, d4912 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d48d8:	e894 0006 	ldmia.w	r4, {r1, r2}
   d48dc:	fb08 1202 	mla	r2, r8, r2, r1
   d48e0:	f7ff ffb9 	bl	d4856 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d48e4:	6820      	ldr	r0, [r4, #0]
   d48e6:	f000 fb75 	bl	d4fd4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d48ea:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d48ec:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d48ee:	683e      	ldr	r6, [r7, #0]
   d48f0:	687b      	ldr	r3, [r7, #4]
   d48f2:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d48f6:	4546      	cmp	r6, r8
   d48f8:	d009      	beq.n	d490e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d48fa:	b12d      	cbz	r5, d4908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d48fc:	4631      	mov	r1, r6
   d48fe:	4628      	mov	r0, r5
   d4900:	f003 fc6b 	bl	d81da <_ZN6StringC1ERKS_>
   d4904:	7c33      	ldrb	r3, [r6, #16]
   d4906:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4908:	3614      	adds	r6, #20
   d490a:	3514      	adds	r5, #20
   d490c:	e7f3      	b.n	d48f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d490e:	687b      	ldr	r3, [r7, #4]
   d4910:	6063      	str	r3, [r4, #4]
    }
}
   d4912:	4620      	mov	r0, r4
   d4914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4918 <_GLOBAL__sub_I_logHandler>:
        } else {
            plant_data = data[1];
        }
        Log.info("Plant data: %u", plant_data);
    }
   d4918:	b570      	push	{r4, r5, r6, lr}
   d491a:	b08c      	sub	sp, #48	; 0x30
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d491c:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d491e:	f000 f99d 	bl	d4c5c <HAL_Pin_Map>
   d4922:	9400      	str	r4, [sp, #0]
   d4924:	9401      	str	r4, [sp, #4]
   d4926:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4928:	f003 fdba 	bl	d84a0 <_Z16_fetch_usbserialv>
   d492c:	4669      	mov	r1, sp
   d492e:	4606      	mov	r6, r0
   d4930:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4932:	4d4d      	ldr	r5, [pc, #308]	; (d4a68 <_GLOBAL__sub_I_logHandler+0x150>)
   d4934:	f7ff ffbd 	bl	d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4938:	a903      	add	r1, sp, #12
   d493a:	a806      	add	r0, sp, #24
   d493c:	f7ff ffb9 	bl	d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4940:	4b4a      	ldr	r3, [pc, #296]	; (d4a6c <_GLOBAL__sub_I_logHandler+0x154>)
   d4942:	602b      	str	r3, [r5, #0]
   d4944:	a906      	add	r1, sp, #24
   d4946:	a809      	add	r0, sp, #36	; 0x24
   d4948:	f7ff ffb3 	bl	d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d494c:	aa09      	add	r2, sp, #36	; 0x24
   d494e:	2101      	movs	r1, #1
   d4950:	1d28      	adds	r0, r5, #4
   d4952:	f002 fe50 	bl	d75f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4956:	a809      	add	r0, sp, #36	; 0x24
   d4958:	f7ff ff6a 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d495c:	a806      	add	r0, sp, #24
   d495e:	f7ff ff67 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4962:	4b43      	ldr	r3, [pc, #268]	; (d4a70 <_GLOBAL__sub_I_logHandler+0x158>)
   d4964:	602b      	str	r3, [r5, #0]
   d4966:	622e      	str	r6, [r5, #32]
   d4968:	a803      	add	r0, sp, #12
   d496a:	f7ff ff61 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d496e:	4b41      	ldr	r3, [pc, #260]	; (d4a74 <_GLOBAL__sub_I_logHandler+0x15c>)
   d4970:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4972:	f003 fd95 	bl	d84a0 <_Z16_fetch_usbserialv>
   d4976:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d497a:	f003 fd81 	bl	d8480 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d497e:	f002 fae7 	bl	d6f50 <_ZN5spark10LogManager8instanceEv>
   d4982:	4629      	mov	r1, r5
   d4984:	f002 fdca 	bl	d751c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 */

#include "Particle.h"

// Debugging Setup Code
SerialLogHandler logHandler(LOG_LEVEL_TRACE);    //this means Log.info, Log.warn, Log.error will be sent over USB serial virtual com port
   d4988:	4668      	mov	r0, sp
   d498a:	f7ff ff51 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d498e:	493a      	ldr	r1, [pc, #232]	; (d4a78 <_GLOBAL__sub_I_logHandler+0x160>)
   d4990:	4a3a      	ldr	r2, [pc, #232]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d4992:	4628      	mov	r0, r5
   d4994:	f003 fef6 	bl	d8784 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4998:	4b39      	ldr	r3, [pc, #228]	; (d4a80 <_GLOBAL__sub_I_logHandler+0x168>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d499a:	4d3a      	ldr	r5, [pc, #232]	; (d4a84 <_GLOBAL__sub_I_logHandler+0x16c>)
   d499c:	701c      	strb	r4, [r3, #0]
   d499e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d49a2:	809a      	strh	r2, [r3, #4]
   d49a4:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49a6:	2002      	movs	r0, #2
   d49a8:	f000 fa98 	bl	d4edc <set_system_mode>
#define led D7                  // blue LED pin on Argon board
#define White_LED D6
#define Button D5                
int loop_counter = 0;           //misc counter for debugging
byte data[10];
String LED_state;
   d49ac:	4936      	ldr	r1, [pc, #216]	; (d4a88 <_GLOBAL__sub_I_logHandler+0x170>)
   d49ae:	4837      	ldr	r0, [pc, #220]	; (d4a8c <_GLOBAL__sub_I_logHandler+0x174>)
   d49b0:	f003 fbd4 	bl	d815c <_ZN6StringC1EPK19__FlashStringHelper>
   d49b4:	4a31      	ldr	r2, [pc, #196]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d49b6:	4936      	ldr	r1, [pc, #216]	; (d4a90 <_GLOBAL__sub_I_logHandler+0x178>)
   d49b8:	4834      	ldr	r0, [pc, #208]	; (d4a8c <_GLOBAL__sub_I_logHandler+0x174>)
   d49ba:	f003 fee3 	bl	d8784 <__aeabi_atexit>
   d49be:	4835      	ldr	r0, [pc, #212]	; (d4a94 <_GLOBAL__sub_I_logHandler+0x17c>)


//Variables for discovering and creating service objects
Vector<BleService>          ble_peer_all_services;
   d49c0:	4a2e      	ldr	r2, [pc, #184]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d49c2:	4935      	ldr	r1, [pc, #212]	; (d4a98 <_GLOBAL__sub_I_logHandler+0x180>)
   d49c4:	6004      	str	r4, [r0, #0]
   d49c6:	6044      	str	r4, [r0, #4]
   d49c8:	6084      	str	r4, [r0, #8]
   d49ca:	f003 fedb 	bl	d8784 <__aeabi_atexit>
BleService                  ble_service;
   d49ce:	4833      	ldr	r0, [pc, #204]	; (d4a9c <_GLOBAL__sub_I_logHandler+0x184>)
   d49d0:	f001 fe48 	bl	d6664 <_ZN8particle10BleServiceC1Ev>
   d49d4:	4a29      	ldr	r2, [pc, #164]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d49d6:	4932      	ldr	r1, [pc, #200]	; (d4aa0 <_GLOBAL__sub_I_logHandler+0x188>)
   d49d8:	4830      	ldr	r0, [pc, #192]	; (d4a9c <_GLOBAL__sub_I_logHandler+0x184>)
   d49da:	f003 fed3 	bl	d8784 <__aeabi_atexit>
   d49de:	4831      	ldr	r0, [pc, #196]	; (d4aa4 <_GLOBAL__sub_I_logHandler+0x18c>)
char                        ble_service_uuid_string[40];
byte                        ble_service_value[250];
char                        ble_service_value_string[501];
  
Vector<BleCharacteristic>   ble_peer_all_chars;
   d49e0:	4a26      	ldr	r2, [pc, #152]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d49e2:	4931      	ldr	r1, [pc, #196]	; (d4aa8 <_GLOBAL__sub_I_logHandler+0x190>)
   d49e4:	6004      	str	r4, [r0, #0]
   d49e6:	6044      	str	r4, [r0, #4]
   d49e8:	6084      	str	r4, [r0, #8]
   d49ea:	f003 fecb 	bl	d8784 <__aeabi_atexit>
BleCharacteristic           ble_char;
   d49ee:	482f      	ldr	r0, [pc, #188]	; (d4aac <_GLOBAL__sub_I_logHandler+0x194>)
   d49f0:	f001 fd5e 	bl	d64b0 <_ZN8particle17BleCharacteristicC1Ev>
   d49f4:	4a21      	ldr	r2, [pc, #132]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d49f6:	492e      	ldr	r1, [pc, #184]	; (d4ab0 <_GLOBAL__sub_I_logHandler+0x198>)
   d49f8:	482c      	ldr	r0, [pc, #176]	; (d4aac <_GLOBAL__sub_I_logHandler+0x194>)
   d49fa:	f003 fec3 	bl	d8784 <__aeabi_atexit>
char                        ble_char_uuid_string[40];
byte                        ble_char_value[250];
char                        ble_char_value_string[501];
BlePeerDevice               peer;                                      
   d49fe:	482d      	ldr	r0, [pc, #180]	; (d4ab4 <_GLOBAL__sub_I_logHandler+0x19c>)
   d4a00:	f001 f8ea 	bl	d5bd8 <_ZN8particle13BlePeerDeviceC1Ev>
   d4a04:	4a1d      	ldr	r2, [pc, #116]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d4a06:	492c      	ldr	r1, [pc, #176]	; (d4ab8 <_GLOBAL__sub_I_logHandler+0x1a0>)
   d4a08:	482a      	ldr	r0, [pc, #168]	; (d4ab4 <_GLOBAL__sub_I_logHandler+0x19c>)
   d4a0a:	f003 febb 	bl	d8784 <__aeabi_atexit>

BleCharacteristic CIOT_RocksChar;
   d4a0e:	482b      	ldr	r0, [pc, #172]	; (d4abc <_GLOBAL__sub_I_logHandler+0x1a4>)
   d4a10:	f001 fd4e 	bl	d64b0 <_ZN8particle17BleCharacteristicC1Ev>
   d4a14:	4a19      	ldr	r2, [pc, #100]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d4a16:	4926      	ldr	r1, [pc, #152]	; (d4ab0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4a18:	4828      	ldr	r0, [pc, #160]	; (d4abc <_GLOBAL__sub_I_logHandler+0x1a4>)
   d4a1a:	f003 feb3 	bl	d8784 <__aeabi_atexit>
BleCharacteristic LED_StateChar;
   d4a1e:	4828      	ldr	r0, [pc, #160]	; (d4ac0 <_GLOBAL__sub_I_logHandler+0x1a8>)
   d4a20:	f001 fd46 	bl	d64b0 <_ZN8particle17BleCharacteristicC1Ev>
   d4a24:	4a15      	ldr	r2, [pc, #84]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d4a26:	4922      	ldr	r1, [pc, #136]	; (d4ab0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4a28:	4825      	ldr	r0, [pc, #148]	; (d4ac0 <_GLOBAL__sub_I_logHandler+0x1a8>)
   d4a2a:	f003 feab 	bl	d8784 <__aeabi_atexit>
BleCharacteristic ButtonChar;
   d4a2e:	4825      	ldr	r0, [pc, #148]	; (d4ac4 <_GLOBAL__sub_I_logHandler+0x1ac>)
   d4a30:	f001 fd3e 	bl	d64b0 <_ZN8particle17BleCharacteristicC1Ev>
   d4a34:	4a11      	ldr	r2, [pc, #68]	; (d4a7c <_GLOBAL__sub_I_logHandler+0x164>)
   d4a36:	491e      	ldr	r1, [pc, #120]	; (d4ab0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4a38:	4822      	ldr	r0, [pc, #136]	; (d4ac4 <_GLOBAL__sub_I_logHandler+0x1ac>)
   d4a3a:	f003 fea3 	bl	d8784 <__aeabi_atexit>

const unsigned long SCAN_PERIOD_MS = 2000;   
unsigned long lastScan = 0;
const size_t SCAN_RESULT_MAX = 50;          
BleScanResult   scanResults[SCAN_RESULT_MAX];
   d4a3e:	f241 0668 	movw	r6, #4200	; 0x1068
   d4a42:	1928      	adds	r0, r5, r4
   d4a44:	f000 fb8a 	bl	d515c <_ZN8particle10BleAddressC1Ev>
   d4a48:	f104 0008 	add.w	r0, r4, #8
   d4a4c:	4428      	add	r0, r5
   d4a4e:	f000 fd55 	bl	d54fc <_ZN8particle18BleAdvertisingDataC1Ev>
   d4a52:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4a56:	4428      	add	r0, r5
   d4a58:	3454      	adds	r4, #84	; 0x54
   d4a5a:	f000 fd4f 	bl	d54fc <_ZN8particle18BleAdvertisingDataC1Ev>
   d4a5e:	42b4      	cmp	r4, r6
   d4a60:	d1ef      	bne.n	d4a42 <_GLOBAL__sub_I_logHandler+0x12a>
        } else {
            plant_data = data[1];
        }
        Log.info("Plant data: %u", plant_data);
    }
   d4a62:	b00c      	add	sp, #48	; 0x30
   d4a64:	bd70      	pop	{r4, r5, r6, pc}
   d4a66:	bf00      	nop
   d4a68:	2003e2fc 	.word	0x2003e2fc
   d4a6c:	000d8d44 	.word	0x000d8d44
   d4a70:	000d92dc 	.word	0x000d92dc
   d4a74:	000d8d5c 	.word	0x000d8d5c
   d4a78:	000d415d 	.word	0x000d415d
   d4a7c:	2003d238 	.word	0x2003d238
   d4a80:	2003d260 	.word	0x2003d260
   d4a84:	2003d280 	.word	0x2003d280
   d4a88:	000d9299 	.word	0x000d9299
   d4a8c:	2003d23c 	.word	0x2003d23c
   d4a90:	000d80b7 	.word	0x000d80b7
   d4a94:	2003e374 	.word	0x2003e374
   d4a98:	000d412f 	.word	0x000d412f
   d4a9c:	2003e2f4 	.word	0x2003e2f4
   d4aa0:	000d4117 	.word	0x000d4117
   d4aa4:	2003d24c 	.word	0x2003d24c
   d4aa8:	000d40d3 	.word	0x000d40d3
   d4aac:	2003e380 	.word	0x2003e380
   d4ab0:	000d5b5f 	.word	0x000d5b5f
   d4ab4:	2003d270 	.word	0x2003d270
   d4ab8:	000d5b6d 	.word	0x000d5b6d
   d4abc:	2003d268 	.word	0x2003d268
   d4ac0:	2003d258 	.word	0x2003d258
   d4ac4:	2003d278 	.word	0x2003d278

000d4ac8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <hal_ble_stack_init+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	689b      	ldr	r3, [r3, #8]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	00030278 	.word	0x00030278

000d4ad8 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <hal_ble_gap_set_scan_parameters+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	00030278 	.word	0x00030278

000d4ae8 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <hal_ble_gap_get_scan_parameters+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	00030278 	.word	0x00030278

000d4af8 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <hal_ble_gap_start_scan+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	00030278 	.word	0x00030278

000d4b08 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b03      	ldr	r3, [pc, #12]	; (d4b18 <hal_ble_gap_stop_scan+0x10>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d4b12:	9301      	str	r3, [sp, #4]
   d4b14:	bd08      	pop	{r3, pc}
   d4b16:	0000      	.short	0x0000
   d4b18:	00030278 	.word	0x00030278

000d4b1c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b03      	ldr	r3, [pc, #12]	; (d4b2c <hal_ble_gap_disconnect+0x10>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4b26:	9301      	str	r3, [sp, #4]
   d4b28:	bd08      	pop	{r3, pc}
   d4b2a:	0000      	.short	0x0000
   d4b2c:	00030278 	.word	0x00030278

000d4b30 <hal_ble_gatt_server_get_characteristic_value>:
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b03      	ldr	r3, [pc, #12]	; (d4b40 <hal_ble_gatt_server_get_characteristic_value+0x10>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   d4b3a:	9301      	str	r3, [sp, #4]
   d4b3c:	bd08      	pop	{r3, pc}
   d4b3e:	0000      	.short	0x0000
   d4b40:	00030278 	.word	0x00030278

000d4b44 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b03      	ldr	r3, [pc, #12]	; (d4b54 <hal_ble_gatt_client_discover_all_services+0x10>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d4b4e:	9301      	str	r3, [sp, #4]
   d4b50:	bd08      	pop	{r3, pc}
   d4b52:	0000      	.short	0x0000
   d4b54:	00030278 	.word	0x00030278

000d4b58 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b03      	ldr	r3, [pc, #12]	; (d4b68 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d4b62:	9301      	str	r3, [sp, #4]
   d4b64:	bd08      	pop	{r3, pc}
   d4b66:	0000      	.short	0x0000
   d4b68:	00030278 	.word	0x00030278

000d4b6c <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b03      	ldr	r3, [pc, #12]	; (d4b7c <hal_ble_gatt_client_read+0x10>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d4b76:	9301      	str	r3, [sp, #4]
   d4b78:	bd08      	pop	{r3, pc}
   d4b7a:	0000      	.short	0x0000
   d4b7c:	00030278 	.word	0x00030278

000d4b80 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b03      	ldr	r3, [pc, #12]	; (d4b90 <hal_ble_gap_connect+0x10>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d4b8a:	9301      	str	r3, [sp, #4]
   d4b8c:	bd08      	pop	{r3, pc}
   d4b8e:	0000      	.short	0x0000
   d4b90:	00030278 	.word	0x00030278

000d4b94 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b03      	ldr	r3, [pc, #12]	; (d4ba4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4b9e:	9301      	str	r3, [sp, #4]
   d4ba0:	bd08      	pop	{r3, pc}
   d4ba2:	0000      	.short	0x0000
   d4ba4:	00030278 	.word	0x00030278

000d4ba8 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b03      	ldr	r3, [pc, #12]	; (d4bb8 <hal_ble_gatt_client_configure_cccd+0x10>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d4bb2:	9301      	str	r3, [sp, #4]
   d4bb4:	bd08      	pop	{r3, pc}
   d4bb6:	0000      	.short	0x0000
   d4bb8:	00030278 	.word	0x00030278

000d4bbc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <os_thread_is_current+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	689b      	ldr	r3, [r3, #8]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030248 	.word	0x00030248

000d4bcc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <os_thread_join+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	691b      	ldr	r3, [r3, #16]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030248 	.word	0x00030248

000d4bdc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <os_thread_cleanup+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	695b      	ldr	r3, [r3, #20]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030248 	.word	0x00030248

000d4bec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <os_mutex_create+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030248 	.word	0x00030248

000d4bfc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <os_mutex_recursive_create+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030248 	.word	0x00030248

000d4c0c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <os_mutex_recursive_lock+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030248 	.word	0x00030248

000d4c1c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <os_mutex_recursive_unlock+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030248 	.word	0x00030248

000d4c2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_RNG_GetRandomNumber+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	685b      	ldr	r3, [r3, #4]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030218 	.word	0x00030218

000d4c3c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_Delay_Microseconds+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	68db      	ldr	r3, [r3, #12]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030218 	.word	0x00030218

000d4c4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	695b      	ldr	r3, [r3, #20]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030218 	.word	0x00030218

000d4c5c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <HAL_Pin_Map+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	681b      	ldr	r3, [r3, #0]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	0003022c 	.word	0x0003022c

000d4c6c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <HAL_Pin_Mode+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	689b      	ldr	r3, [r3, #8]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003022c 	.word	0x0003022c

000d4c7c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <HAL_Get_Pin_Mode+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	68db      	ldr	r3, [r3, #12]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003022c 	.word	0x0003022c

000d4c8c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <HAL_GPIO_Write+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	691b      	ldr	r3, [r3, #16]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003022c 	.word	0x0003022c

000d4c9c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <HAL_GPIO_Read+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	695b      	ldr	r3, [r3, #20]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003022c 	.word	0x0003022c

000d4cac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_I2C_Write_Data+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6a1b      	ldr	r3, [r3, #32]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030228 	.word	0x00030228

000d4cbc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <HAL_I2C_Available_Data+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030228 	.word	0x00030228

000d4ccc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <HAL_I2C_Read_Data+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030228 	.word	0x00030228

000d4cdc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <HAL_I2C_Peek_Data+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030228 	.word	0x00030228

000d4cec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <HAL_I2C_Flush_Data+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030228 	.word	0x00030228

000d4cfc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_I2C_Is_Enabled+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030228 	.word	0x00030228

000d4d0c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_I2C_Init+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030228 	.word	0x00030228

000d4d1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <inet_inet_ntop+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	695b      	ldr	r3, [r3, #20]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030264 	.word	0x00030264

000d4d2c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <netdb_freeaddrinfo+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	689b      	ldr	r3, [r3, #8]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030268 	.word	0x00030268

000d4d3c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <netdb_getaddrinfo+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	68db      	ldr	r3, [r3, #12]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030268 	.word	0x00030268

000d4d4c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_SPI_Init+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	69db      	ldr	r3, [r3, #28]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030230 	.word	0x00030230

000d4d5c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_SPI_Is_Enabled+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	6a1b      	ldr	r3, [r3, #32]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030230 	.word	0x00030230

000d4d6c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_USART_Init+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	681b      	ldr	r3, [r3, #0]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003023c 	.word	0x0003023c

000d4d7c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_USART_End+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	689b      	ldr	r3, [r3, #8]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003023c 	.word	0x0003023c

000d4d8c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_USART_Write_Data+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	68db      	ldr	r3, [r3, #12]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003023c 	.word	0x0003023c

000d4d9c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_USART_Available_Data+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	691b      	ldr	r3, [r3, #16]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003023c 	.word	0x0003023c

000d4dac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_USART_Read_Data+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	695b      	ldr	r3, [r3, #20]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	0003023c 	.word	0x0003023c

000d4dbc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <HAL_USART_Peek_Data+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	699b      	ldr	r3, [r3, #24]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	0003023c 	.word	0x0003023c

000d4dcc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <HAL_USART_Flush_Data+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	69db      	ldr	r3, [r3, #28]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	0003023c 	.word	0x0003023c

000d4ddc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <HAL_USART_Is_Enabled+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6a1b      	ldr	r3, [r3, #32]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	0003023c 	.word	0x0003023c

000d4dec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003023c 	.word	0x0003023c

000d4dfc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_USART_BeginConfig+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003023c 	.word	0x0003023c

000d4e0c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_USB_USART_Init+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	681b      	ldr	r3, [r3, #0]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003024c 	.word	0x0003024c

000d4e1c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <HAL_USB_USART_Begin+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	685b      	ldr	r3, [r3, #4]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003024c 	.word	0x0003024c

000d4e2c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_USB_USART_End+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	689b      	ldr	r3, [r3, #8]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003024c 	.word	0x0003024c

000d4e3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_USB_USART_Available_Data+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	691b      	ldr	r3, [r3, #16]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003024c 	.word	0x0003024c

000d4e4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	695b      	ldr	r3, [r3, #20]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003024c 	.word	0x0003024c

000d4e5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_USB_USART_Receive_Data+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	699b      	ldr	r3, [r3, #24]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003024c 	.word	0x0003024c

000d4e6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_USB_USART_Send_Data+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	69db      	ldr	r3, [r3, #28]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	0003024c 	.word	0x0003024c

000d4e7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_USB_USART_Flush_Data+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6a1b      	ldr	r3, [r3, #32]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	0003024c 	.word	0x0003024c

000d4e8c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <panic_+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030260 	.word	0x00030260

000d4e9c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <log_message+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030260 	.word	0x00030260

000d4eac <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <log_message_v+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030260 	.word	0x00030260

000d4ebc <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <log_level_name+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030260 	.word	0x00030260

000d4ecc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <log_set_callbacks+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030260 	.word	0x00030260

000d4edc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <set_system_mode+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	685b      	ldr	r3, [r3, #4]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030220 	.word	0x00030220

000d4eec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b03      	ldr	r3, [pc, #12]	; (d4efc <system_ctrl_set_app_request_handler+0x10>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ef6:	9301      	str	r3, [sp, #4]
   d4ef8:	bd08      	pop	{r3, pc}
   d4efa:	0000      	.short	0x0000
   d4efc:	00030220 	.word	0x00030220

000d4f00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b03      	ldr	r3, [pc, #12]	; (d4f10 <system_ctrl_set_result+0x10>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f0a:	9301      	str	r3, [sp, #4]
   d4f0c:	bd08      	pop	{r3, pc}
   d4f0e:	0000      	.short	0x0000
   d4f10:	00030220 	.word	0x00030220

000d4f14 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030244 	.word	0x00030244

000d4f24 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <network_connect+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	685b      	ldr	r3, [r3, #4]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030240 	.word	0x00030240

000d4f34 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <network_connecting+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	689b      	ldr	r3, [r3, #8]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030240 	.word	0x00030240

000d4f44 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <network_disconnect+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	68db      	ldr	r3, [r3, #12]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030240 	.word	0x00030240

000d4f54 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <network_ready+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	691b      	ldr	r3, [r3, #16]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030240 	.word	0x00030240

000d4f64 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <network_on+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	695b      	ldr	r3, [r3, #20]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030240 	.word	0x00030240

000d4f74 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <network_off+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	699b      	ldr	r3, [r3, #24]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030240 	.word	0x00030240

000d4f84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <network_listen+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	69db      	ldr	r3, [r3, #28]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030240 	.word	0x00030240

000d4f94 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <network_listening+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6a1b      	ldr	r3, [r3, #32]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030240 	.word	0x00030240

000d4fa4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <network_set_listen_timeout+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030240 	.word	0x00030240

000d4fb4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <network_get_listen_timeout+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030240 	.word	0x00030240

000d4fc4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <malloc+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	681b      	ldr	r3, [r3, #0]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003021c 	.word	0x0003021c

000d4fd4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <free+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	685b      	ldr	r3, [r3, #4]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003021c 	.word	0x0003021c

000d4fe4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <realloc+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	689b      	ldr	r3, [r3, #8]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003021c 	.word	0x0003021c

000d4ff4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <vsnprintf+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003021c 	.word	0x0003021c

000d5004 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5004:	4770      	bx	lr

000d5006 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5006:	2000      	movs	r0, #0
   d5008:	4770      	bx	lr

000d500a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d500a:	4770      	bx	lr

000d500c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d500c:	2000      	movs	r0, #0
   d500e:	4770      	bx	lr

000d5010 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5010:	4770      	bx	lr

000d5012 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5012:	2000      	movs	r0, #0
   d5014:	4770      	bx	lr

000d5016 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5016:	b510      	push	{r4, lr}
   d5018:	2114      	movs	r1, #20
   d501a:	4604      	mov	r4, r0
   d501c:	f003 fbb7 	bl	d878e <_ZdlPvj>
   d5020:	4620      	mov	r0, r4
   d5022:	bd10      	pop	{r4, pc}

000d5024 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5024:	b510      	push	{r4, lr}
   d5026:	2114      	movs	r1, #20
   d5028:	4604      	mov	r4, r0
   d502a:	f003 fbb0 	bl	d878e <_ZdlPvj>
   d502e:	4620      	mov	r0, r4
   d5030:	bd10      	pop	{r4, pc}

000d5032 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5032:	b510      	push	{r4, lr}
   d5034:	2114      	movs	r1, #20
   d5036:	4604      	mov	r4, r0
   d5038:	f003 fba9 	bl	d878e <_ZdlPvj>
   d503c:	4620      	mov	r0, r4
   d503e:	bd10      	pop	{r4, pc}

000d5040 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5040:	f7ff b82b 	b.w	d409a <_ZdlPv>

000d5044 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5044:	f7ff b829 	b.w	d409a <_ZdlPv>

000d5048 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5048:	f7ff b827 	b.w	d409a <_ZdlPv>

000d504c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.19>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d504c:	b530      	push	{r4, r5, lr}
   d504e:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d5050:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d5052:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d5054:	2400      	movs	r4, #0
   d5056:	9302      	str	r3, [sp, #8]
   d5058:	4b08      	ldr	r3, [pc, #32]	; (d507c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.19+0x30>)
   d505a:	9300      	str	r3, [sp, #0]
   d505c:	aa02      	add	r2, sp, #8
   d505e:	4623      	mov	r3, r4
   d5060:	4907      	ldr	r1, [pc, #28]	; (d5080 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.19+0x34>)
   d5062:	9403      	str	r4, [sp, #12]
   d5064:	2001      	movs	r0, #1
   d5066:	f7ff ff19 	bl	d4e9c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d506a:	6828      	ldr	r0, [r5, #0]
   d506c:	4905      	ldr	r1, [pc, #20]	; (d5084 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.19+0x38>)
   d506e:	8800      	ldrh	r0, [r0, #0]
   d5070:	4623      	mov	r3, r4
   d5072:	462a      	mov	r2, r5
   d5074:	f7ff fd66 	bl	d4b44 <hal_ble_gatt_client_discover_all_services>
    }
   d5078:	b00b      	add	sp, #44	; 0x2c
   d507a:	bd30      	pop	{r4, r5, pc}
   d507c:	000d8f8b 	.word	0x000d8f8b
   d5080:	000d8f80 	.word	0x000d8f80
   d5084:	000d66bd 	.word	0x000d66bd

000d5088 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5088:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d508a:	200a      	movs	r0, #10
   d508c:	4a02      	ldr	r2, [pc, #8]	; (d5098 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d508e:	2100      	movs	r1, #0
   d5090:	f7ff fefc 	bl	d4e8c <panic_>
    }
}
   d5094:	bd08      	pop	{r3, pc}
   d5096:	bf00      	nop
   d5098:	000d4c3d 	.word	0x000d4c3d

000d509c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d509c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d509e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50a0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d50a2:	689b      	ldr	r3, [r3, #8]
   d50a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d50a6:	68a3      	ldr	r3, [r4, #8]
   d50a8:	3b01      	subs	r3, #1
   d50aa:	60a3      	str	r3, [r4, #8]
   d50ac:	b92b      	cbnz	r3, d50ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d50ae:	6823      	ldr	r3, [r4, #0]
   d50b0:	4620      	mov	r0, r4
   d50b2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d50b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d50b8:	4718      	bx	r3
   d50ba:	bd10      	pop	{r4, pc}

000d50bc <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d50bc:	b570      	push	{r4, r5, r6, lr}
   d50be:	1c93      	adds	r3, r2, #2
   d50c0:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d50c2:	4288      	cmp	r0, r1
   d50c4:	d018      	beq.n	d50f8 <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d50c6:	7804      	ldrb	r4, [r0, #0]
   d50c8:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d50ca:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d50ce:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d50d0:	bf88      	it	hi
   d50d2:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d50d6:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d50d8:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d50dc:	7834      	ldrb	r4, [r6, #0]
   d50de:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d50e2:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d50e6:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d50e8:	bf88      	it	hi
   d50ea:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d50ee:	f803 5c01 	strb.w	r5, [r3, #-1]
   d50f2:	3001      	adds	r0, #1
   d50f4:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d50f6:	e7e4      	b.n	d50c2 <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d50f8:	4610      	mov	r0, r2
   d50fa:	bd70      	pop	{r4, r5, r6, pc}

000d50fc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d50fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5100:	b2da      	uxtb	r2, r3
   d5102:	2a09      	cmp	r2, #9
   d5104:	d801      	bhi.n	d510a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5106:	4618      	mov	r0, r3
   d5108:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d510a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d510e:	2b05      	cmp	r3, #5
   d5110:	d801      	bhi.n	d5116 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5112:	3857      	subs	r0, #87	; 0x57
   d5114:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5116:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d511a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d511c:	bf94      	ite	ls
   d511e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5120:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5124:	4770      	bx	lr
	...

000d5128 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5128:	b510      	push	{r4, lr}
            locked_(false) {
   d512a:	2300      	movs	r3, #0
   d512c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d512e:	4b04      	ldr	r3, [pc, #16]	; (d5140 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5130:	4604      	mov	r4, r0
   d5132:	6818      	ldr	r0, [r3, #0]
   d5134:	f7ff fd6a 	bl	d4c0c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5138:	2301      	movs	r3, #1
   d513a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d513c:	4620      	mov	r0, r4
   d513e:	bd10      	pop	{r4, pc}
   d5140:	2003e390 	.word	0x2003e390

000d5144 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5144:	b510      	push	{r4, lr}
        if (locked_) {
   d5146:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5148:	4604      	mov	r4, r0
        if (locked_) {
   d514a:	b11b      	cbz	r3, d5154 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d514c:	4b02      	ldr	r3, [pc, #8]	; (d5158 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d514e:	6818      	ldr	r0, [r3, #0]
   d5150:	f7ff fd64 	bl	d4c1c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5154:	4620      	mov	r0, r4
   d5156:	bd10      	pop	{r4, pc}
   d5158:	2003e390 	.word	0x2003e390

000d515c <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d515c:	2200      	movs	r2, #0
   d515e:	6002      	str	r2, [r0, #0]
   d5160:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d5162:	4770      	bx	lr

000d5164 <_ZNK8particle10BleAddressixEh>:
    buf[len++] = '\0';
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
   d5164:	2905      	cmp	r1, #5
        return 0;
    }
    return address_.addr[i];
   d5166:	bf94      	ite	ls
   d5168:	5c40      	ldrbls	r0, [r0, r1]
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
        return 0;
   d516a:	2000      	movhi	r0, #0
    }
    return address_.addr[i];
}
   d516c:	4770      	bx	lr

000d516e <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d516e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5170:	7982      	ldrb	r2, [r0, #6]
   d5172:	798b      	ldrb	r3, [r1, #6]
   d5174:	429a      	cmp	r2, r3
   d5176:	d106      	bne.n	d5186 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5178:	2206      	movs	r2, #6
   d517a:	f003 fc79 	bl	d8a70 <memcmp>
   d517e:	fab0 f080 	clz	r0, r0
   d5182:	0940      	lsrs	r0, r0, #5
   d5184:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5186:	2000      	movs	r0, #0
}
   d5188:	bd08      	pop	{r3, pc}

000d518a <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d518a:	b510      	push	{r4, lr}
        : uuid_() {
   d518c:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d518e:	4604      	mov	r4, r0
        : uuid_() {
   d5190:	2100      	movs	r1, #0
   d5192:	f003 fca2 	bl	d8ada <memset>
}
   d5196:	4620      	mov	r0, r4
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d519a:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d519c:	4603      	mov	r3, r0
   d519e:	f101 0214 	add.w	r2, r1, #20
   d51a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d51a6:	f843 4b04 	str.w	r4, [r3], #4
   d51aa:	4291      	cmp	r1, r2
   d51ac:	d1f9      	bne.n	d51a2 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d51ae:	bd10      	pop	{r4, pc}

000d51b0 <_ZN8particle7BleUuidC1Et>:
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
    }
}

BleUuid::BleUuid(uint16_t uuid16)
   d51b0:	b538      	push	{r3, r4, r5, lr}
   d51b2:	4604      	mov	r4, r0
   d51b4:	460d      	mov	r5, r1
        : BleUuid() {
   d51b6:	f7ff ffe8 	bl	d518a <_ZN8particle7BleUuidC1Ev>
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d51ba:	2300      	movs	r3, #0
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    uuid_.uuid16 = uuid16;
   d51bc:	8025      	strh	r5, [r4, #0]
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d51be:	7423      	strb	r3, [r4, #16]
}
   d51c0:	4620      	mov	r0, r4
   d51c2:	bd38      	pop	{r3, r4, r5, pc}

000d51c4 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d51c4:	7c03      	ldrb	r3, [r0, #16]
   d51c6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d51ca:	bf14      	ite	ne
   d51cc:	2001      	movne	r0, #1
   d51ce:	2000      	moveq	r0, #0
   d51d0:	4770      	bx	lr

000d51d2 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d51d2:	4770      	bx	lr

000d51d4 <_ZN8particle7BleUuidaSEPKh>:
BleUuid& BleUuid::operator=(const BleUuid& uuid) {
    uuid_ = uuid.uuid_;
    return *this;
}

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d51d4:	b510      	push	{r4, lr}
    if (uuid128) {
   d51d6:	b151      	cbz	r1, d51ee <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d51d8:	4603      	mov	r3, r0
   d51da:	f101 0210 	add.w	r2, r1, #16
   d51de:	f851 4b04 	ldr.w	r4, [r1], #4
   d51e2:	f843 4b04 	str.w	r4, [r3], #4
   d51e6:	4291      	cmp	r1, r2
   d51e8:	d1f9      	bne.n	d51de <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d51ea:	2301      	movs	r3, #1
   d51ec:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d51f0:	b510      	push	{r4, lr}
    uuid_ = uuid;
   d51f2:	4603      	mov	r3, r0
   d51f4:	f101 0214 	add.w	r2, r1, #20
   d51f8:	f851 4b04 	ldr.w	r4, [r1], #4
   d51fc:	f843 4b04 	str.w	r4, [r3], #4
   d5200:	4291      	cmp	r1, r2
   d5202:	d1f9      	bne.n	d51f8 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t+0x8>
    return *this;
}
   d5204:	bd10      	pop	{r4, pc}

000d5206 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5206:	b510      	push	{r4, lr}
   d5208:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d520a:	f7ff ffdb 	bl	d51c4 <_ZNK8particle7BleUuid4typeEv>
   d520e:	b928      	cbnz	r0, d521c <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d5210:	8808      	ldrh	r0, [r1, #0]
   d5212:	8823      	ldrh	r3, [r4, #0]
   d5214:	1a1b      	subs	r3, r3, r0
   d5216:	4258      	negs	r0, r3
   d5218:	4158      	adcs	r0, r3
   d521a:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d521c:	2210      	movs	r2, #16
   d521e:	4620      	mov	r0, r4
   d5220:	f003 fc26 	bl	d8a70 <memcmp>
   d5224:	fab0 f080 	clz	r0, r0
   d5228:	0940      	lsrs	r0, r0, #5
    }
}
   d522a:	bd10      	pop	{r4, pc}

000d522c <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d522c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d522e:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d5230:	460e      	mov	r6, r1
   d5232:	b919      	cbnz	r1, d523c <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5234:	2210      	movs	r2, #16
   d5236:	f003 fc50 	bl	d8ada <memset>
   d523a:	e051      	b.n	d52e0 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d523c:	2124      	movs	r1, #36	; 0x24
   d523e:	4630      	mov	r0, r6
   d5240:	f003 fcc3 	bl	d8bca <strnlen>
   d5244:	2804      	cmp	r0, #4
   d5246:	d002      	beq.n	d524e <_ZN8particle7BleUuid9constructEPKc+0x22>
   d5248:	2700      	movs	r7, #0
   d524a:	2410      	movs	r4, #16
   d524c:	e03b      	b.n	d52c6 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d524e:	7830      	ldrb	r0, [r6, #0]
   d5250:	f7ff ff54 	bl	d50fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5254:	1e04      	subs	r4, r0, #0
   d5256:	db47      	blt.n	d52e8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5258:	7870      	ldrb	r0, [r6, #1]
   d525a:	f7ff ff4f 	bl	d50fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d525e:	2800      	cmp	r0, #0
   d5260:	db42      	blt.n	d52e8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5262:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5266:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d526a:	78b0      	ldrb	r0, [r6, #2]
   d526c:	f7ff ff46 	bl	d50fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5270:	1e04      	subs	r4, r0, #0
   d5272:	db39      	blt.n	d52e8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5274:	78f0      	ldrb	r0, [r6, #3]
   d5276:	f7ff ff41 	bl	d50fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d527a:	2800      	cmp	r0, #0
   d527c:	db34      	blt.n	d52e8 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d527e:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d5282:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5286:	b2c0      	uxtb	r0, r0
   d5288:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d528c:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d528e:	2300      	movs	r3, #0
   d5290:	e027      	b.n	d52e2 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5292:	b32c      	cbz	r4, d52e0 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d5294:	5df0      	ldrb	r0, [r6, r7]
   d5296:	f7ff ff31 	bl	d50fc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d529a:	0603      	lsls	r3, r0, #24
   d529c:	d412      	bmi.n	d52c4 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d529e:	3c01      	subs	r4, #1
   d52a0:	0100      	lsls	r0, r0, #4
   d52a2:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d52a4:	2124      	movs	r1, #36	; 0x24
   d52a6:	4630      	mov	r0, r6
   d52a8:	f003 fc8f 	bl	d8bca <strnlen>
   d52ac:	3701      	adds	r7, #1
   d52ae:	4287      	cmp	r7, r0
   d52b0:	d208      	bcs.n	d52c4 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d52b2:	5df0      	ldrb	r0, [r6, r7]
   d52b4:	f7ff ff22 	bl	d50fc <_ZN8particle11hexToNibbleEc>
   d52b8:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d52ba:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d52bc:	bfa2      	ittt	ge
   d52be:	5d2b      	ldrbge	r3, [r5, r4]
   d52c0:	4318      	orrge	r0, r3
   d52c2:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52c4:	3701      	adds	r7, #1
   d52c6:	2124      	movs	r1, #36	; 0x24
   d52c8:	4630      	mov	r0, r6
   d52ca:	f003 fc7e 	bl	d8bca <strnlen>
   d52ce:	4287      	cmp	r7, r0
   d52d0:	d3df      	bcc.n	d5292 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d52d2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d52d4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d52d6:	42a5      	cmp	r5, r4
   d52d8:	d002      	beq.n	d52e0 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d52da:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d52de:	e7fa      	b.n	d52d6 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d52e0:	2301      	movs	r3, #1
   d52e2:	742b      	strb	r3, [r5, #16]
}
   d52e4:	b003      	add	sp, #12
   d52e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d52e8:	2300      	movs	r3, #0
   d52ea:	802b      	strh	r3, [r5, #0]
   d52ec:	e7cf      	b.n	d528e <_ZN8particle7BleUuid9constructEPKc+0x62>

000d52ee <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d52ee:	b538      	push	{r3, r4, r5, lr}
   d52f0:	4604      	mov	r4, r0
   d52f2:	460d      	mov	r5, r1
        : BleUuid() {
   d52f4:	f7ff ff49 	bl	d518a <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d52f8:	4620      	mov	r0, r4
   d52fa:	4629      	mov	r1, r5
   d52fc:	f7ff ff96 	bl	d522c <_ZN8particle7BleUuid9constructEPKc>
}
   d5300:	4620      	mov	r0, r4
   d5302:	bd38      	pop	{r3, r4, r5, pc}

000d5304 <_ZNK8particle7BleUuideqEPKc>:
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

bool BleUuid::operator==(const char* uuid) const {
   d5304:	b510      	push	{r4, lr}
   d5306:	b086      	sub	sp, #24
   d5308:	4604      	mov	r4, r0
    BleUuid temp(uuid);
   d530a:	a801      	add	r0, sp, #4
   d530c:	f7ff ffef 	bl	d52ee <_ZN8particle7BleUuidC1EPKc>
    return *this == temp;
   d5310:	a901      	add	r1, sp, #4
   d5312:	4620      	mov	r0, r4
   d5314:	f7ff ff77 	bl	d5206 <_ZNK8particle7BleUuideqERKS0_>
}
   d5318:	b006      	add	sp, #24
   d531a:	bd10      	pop	{r4, pc}

000d531c <_ZNK8particle7BleUuid11toBigEndianEPh>:
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d531c:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d531e:	230f      	movs	r3, #15
        buf[i] = uuid_.uuid128[j];
   d5320:	5cc2      	ldrb	r2, [r0, r3]
   d5322:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5326:	3b01      	subs	r3, #1
   d5328:	b2db      	uxtb	r3, r3
   d532a:	2bff      	cmp	r3, #255	; 0xff
   d532c:	d1f8      	bne.n	d5320 <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid_.uuid128[j];
    }
}
   d532e:	4770      	bx	lr

000d5330 <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d5330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5334:	4607      	mov	r7, r0
   d5336:	b08e      	sub	sp, #56	; 0x38
   d5338:	4698      	mov	r8, r3
    if (!buf || len == 0) {
   d533a:	460d      	mov	r5, r1
   d533c:	2900      	cmp	r1, #0
   d533e:	d058      	beq.n	d53f2 <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
   d5340:	2a00      	cmp	r2, #0
   d5342:	d058      	beq.n	d53f6 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d5344:	f7ff ff3e 	bl	d51c4 <_ZNK8particle7BleUuid4typeEv>
   d5348:	4606      	mov	r6, r0
   d534a:	1e54      	subs	r4, r2, #1
   d534c:	b998      	cbnz	r0, d5376 <_ZNK8particle7BleUuid8toStringEPcjb+0x46>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = uuid_.uuid16 << 8 | uuid_.uuid16 >> 8;
   d534e:	883b      	ldrh	r3, [r7, #0]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d5350:	9005      	str	r0, [sp, #20]
        uint16_t bigEndian = uuid_.uuid16 << 8 | uuid_.uuid16 >> 8;
   d5352:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5354:	aa05      	add	r2, sp, #20
   d5356:	2102      	movs	r1, #2
   d5358:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = uuid_.uuid16 << 8 | uuid_.uuid16 >> 8;
   d535a:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d535e:	f7ff fead 	bl	d50bc <_ZL12bytes2hexbufPKhjPc>
   d5362:	2c04      	cmp	r4, #4
   d5364:	bf28      	it	cs
   d5366:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d5368:	4622      	mov	r2, r4
   d536a:	a905      	add	r1, sp, #20
   d536c:	4628      	mov	r0, r5
   d536e:	f003 fb8e 	bl	d8a8e <memcpy>
        buf[len++] = '\0';
   d5372:	552e      	strb	r6, [r5, r4]
   d5374:	e03b      	b.n	d53ee <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d5376:	a901      	add	r1, sp, #4
   d5378:	4638      	mov	r0, r7
   d537a:	f7ff ffcf 	bl	d531c <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d537e:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d5380:	f1b8 0f00 	cmp.w	r8, #0
   d5384:	d002      	beq.n	d538c <_ZNK8particle7BleUuid8toStringEPcjb+0x5c>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5386:	2110      	movs	r1, #16
   d5388:	a801      	add	r0, sp, #4
   d538a:	e024      	b.n	d53d6 <_ZNK8particle7BleUuid8toStringEPcjb+0xa6>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d538c:	2104      	movs	r1, #4
   d538e:	eb0d 0001 	add.w	r0, sp, r1
   d5392:	f7ff fe93 	bl	d50bc <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d5396:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5398:	f10d 021d 	add.w	r2, sp, #29
   d539c:	2102      	movs	r1, #2
   d539e:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d53a0:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d53a4:	f7ff fe8a 	bl	d50bc <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d53a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d53ac:	2102      	movs	r1, #2
   d53ae:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d53b2:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d53b6:	f7ff fe81 	bl	d50bc <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d53ba:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d53be:	2102      	movs	r1, #2
   d53c0:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d53c2:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d53c6:	f7ff fe79 	bl	d50bc <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d53ca:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d53ce:	aa0b      	add	r2, sp, #44	; 0x2c
   d53d0:	2106      	movs	r1, #6
   d53d2:	f10d 000e 	add.w	r0, sp, #14
   d53d6:	f7ff fe71 	bl	d50bc <_ZL12bytes2hexbufPKhjPc>
   d53da:	2c24      	cmp	r4, #36	; 0x24
   d53dc:	bf28      	it	cs
   d53de:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d53e0:	4622      	mov	r2, r4
   d53e2:	a905      	add	r1, sp, #20
   d53e4:	4628      	mov	r0, r5
   d53e6:	f003 fb52 	bl	d8a8e <memcpy>
    buf[len++] = '\0';
   d53ea:	2300      	movs	r3, #0
   d53ec:	552b      	strb	r3, [r5, r4]
   d53ee:	1c60      	adds	r0, r4, #1
   d53f0:	e002      	b.n	d53f8 <_ZNK8particle7BleUuid8toStringEPcjb+0xc8>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d53f2:	4608      	mov	r0, r1
   d53f4:	e000      	b.n	d53f8 <_ZNK8particle7BleUuid8toStringEPcjb+0xc8>
   d53f6:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d53f8:	b00e      	add	sp, #56	; 0x38
   d53fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d53fe <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}

String BleUuid::toString(bool stripped) const {
   d53fe:	b510      	push	{r4, lr}
   d5400:	b08a      	sub	sp, #40	; 0x28
   d5402:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d5404:	2300      	movs	r3, #0
   d5406:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}

String BleUuid::toString(bool stripped) const {
   d5408:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d540a:	4669      	mov	r1, sp
   d540c:	f7ff ff90 	bl	d5330 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d5410:	4669      	mov	r1, sp
   d5412:	4620      	mov	r0, r4
   d5414:	f002 fea2 	bl	d815c <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5418:	4620      	mov	r0, r4
   d541a:	b00a      	add	sp, #40	; 0x28
   d541c:	bd10      	pop	{r4, pc}

000d541e <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d541e:	b538      	push	{r3, r4, r5, lr}
   d5420:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5422:	b101      	cbz	r1, d5426 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5424:	b912      	cbnz	r2, d542c <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d5426:	2000      	movs	r0, #0
   d5428:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d542a:	bd38      	pop	{r3, r4, r5, pc}
   d542c:	2a1f      	cmp	r2, #31
   d542e:	bf28      	it	cs
   d5430:	221f      	movcs	r2, #31
   d5432:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d5434:	f003 fb2b 	bl	d8a8e <memcpy>
    selfLen_ = len;
   d5438:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d543a:	4620      	mov	r0, r4
}
   d543c:	bd38      	pop	{r3, r4, r5, pc}

000d543e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d543e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5440:	b18b      	cbz	r3, d5466 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5442:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5444:	1ce5      	adds	r5, r4, #3
   d5446:	428d      	cmp	r5, r1
   d5448:	d80f      	bhi.n	d546a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d544a:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d544c:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d544e:	5d87      	ldrb	r7, [r0, r6]
   d5450:	4297      	cmp	r7, r2
   d5452:	d105      	bne.n	d5460 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5454:	442e      	add	r6, r5
   d5456:	42b1      	cmp	r1, r6
   d5458:	d307      	bcc.n	d546a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d545a:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d545c:	1c68      	adds	r0, r5, #1
                return adsLen;
   d545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5460:	3501      	adds	r5, #1
   d5462:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5464:	e7ee      	b.n	d5444 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5466:	4618      	mov	r0, r3
   d5468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d546a:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d546c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d546e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d546e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5472:	4604      	mov	r4, r0
   d5474:	460e      	mov	r6, r1
   d5476:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5478:	4617      	mov	r7, r2
   d547a:	2a00      	cmp	r2, #0
   d547c:	d03a      	beq.n	d54f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d547e:	460a      	mov	r2, r1
   d5480:	ab01      	add	r3, sp, #4
   d5482:	6a01      	ldr	r1, [r0, #32]
   d5484:	f7ff ffdb 	bl	d543e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5488:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d548c:	6a22      	ldr	r2, [r4, #32]
   d548e:	bb03      	cbnz	r3, d54d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5490:	b1f8      	cbz	r0, d54d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5492:	1c96      	adds	r6, r2, #2
   d5494:	442e      	add	r6, r5
   d5496:	1a36      	subs	r6, r6, r0
   d5498:	2e1f      	cmp	r6, #31
   d549a:	d82b      	bhi.n	d54f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d549c:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d54a0:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d54a4:	ebc8 0202 	rsb	r2, r8, r2
   d54a8:	1a12      	subs	r2, r2, r0
   d54aa:	eb00 0108 	add.w	r1, r0, r8
   d54ae:	eb05 0009 	add.w	r0, r5, r9
   d54b2:	b292      	uxth	r2, r2
   d54b4:	4421      	add	r1, r4
   d54b6:	4420      	add	r0, r4
   d54b8:	f003 faf4 	bl	d8aa4 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d54bc:	1c6b      	adds	r3, r5, #1
   d54be:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d54c2:	462a      	mov	r2, r5
   d54c4:	4639      	mov	r1, r7
   d54c6:	eb04 0009 	add.w	r0, r4, r9
   d54ca:	f003 fae0 	bl	d8a8e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d54ce:	6226      	str	r6, [r4, #32]
   d54d0:	e010      	b.n	d54f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d54d2:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d54d4:	182b      	adds	r3, r5, r0
   d54d6:	2b1f      	cmp	r3, #31
   d54d8:	d80c      	bhi.n	d54f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d54da:	1c6b      	adds	r3, r5, #1
   d54dc:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d54de:	4422      	add	r2, r4
   d54e0:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d54e2:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d54e4:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d54e6:	4420      	add	r0, r4
   d54e8:	462a      	mov	r2, r5
   d54ea:	f003 fad0 	bl	d8a8e <memcpy>
        selfLen_ += len;
   d54ee:	6a22      	ldr	r2, [r4, #32]
   d54f0:	442a      	add	r2, r5
   d54f2:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d54f4:	6a20      	ldr	r0, [r4, #32]
}
   d54f6:	b003      	add	sp, #12
   d54f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d54fc <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d54fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d54fe:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5500:	4603      	mov	r3, r0
   d5502:	f100 021f 	add.w	r2, r0, #31
   d5506:	2000      	movs	r0, #0
   d5508:	f803 0b01 	strb.w	r0, [r3], #1
   d550c:	4293      	cmp	r3, r2
   d550e:	f04f 0100 	mov.w	r1, #0
   d5512:	d1f9      	bne.n	d5508 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5514:	aa04      	add	r2, sp, #16
   d5516:	2306      	movs	r3, #6
   d5518:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d551c:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d551e:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5520:	9100      	str	r1, [sp, #0]
   d5522:	4620      	mov	r0, r4
   d5524:	4619      	mov	r1, r3
   d5526:	f7ff ffa2 	bl	d546e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d552a:	4620      	mov	r0, r4
   d552c:	b004      	add	sp, #16
   d552e:	bd10      	pop	{r4, pc}

000d5530 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d5530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5532:	4615      	mov	r5, r2
   d5534:	461c      	mov	r4, r3
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5536:	460a      	mov	r2, r1
   d5538:	ab01      	add	r3, sp, #4
   d553a:	6a01      	ldr	r1, [r0, #32]
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d553c:	4606      	mov	r6, r0
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d553e:	f7ff ff7e 	bl	d543e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
   d5542:	4603      	mov	r3, r0
    if (adsLen > 0) {
   d5544:	f030 0002 	bics.w	r0, r0, #2
   d5548:	d00c      	beq.n	d5564 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
   d554a:	1e98      	subs	r0, r3, #2
   d554c:	4284      	cmp	r4, r0
   d554e:	bf28      	it	cs
   d5550:	4604      	movcs	r4, r0
        if ((adsLen - 2) > 0) {
            adsLen -= 2;
            len = std::min(len, adsLen);
            if (buf != nullptr) {
   d5552:	b135      	cbz	r5, d5562 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x32>
                memcpy(buf, &selfData_[offset + 2], len);
   d5554:	9901      	ldr	r1, [sp, #4]
   d5556:	3102      	adds	r1, #2
   d5558:	4622      	mov	r2, r4
   d555a:	4431      	add	r1, r6
   d555c:	4628      	mov	r0, r5
   d555e:	f003 fa96 	bl	d8a8e <memcpy>
            }
            return len;
   d5562:	4620      	mov	r0, r4
        }
    }
    return 0;
}
   d5564:	b002      	add	sp, #8
   d5566:	bd70      	pop	{r4, r5, r6, pc}

000d5568 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:

size_t BleAdvertisingData::length() const {
    return selfLen_;
}

size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d5568:	b570      	push	{r4, r5, r6, lr}
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d556a:	4613      	mov	r3, r2

size_t BleAdvertisingData::length() const {
    return selfLen_;
}

size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d556c:	460c      	mov	r4, r1
   d556e:	4615      	mov	r5, r2
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5570:	460a      	mov	r2, r1
   d5572:	2108      	movs	r1, #8

size_t BleAdvertisingData::length() const {
    return selfLen_;
}

size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d5574:	4606      	mov	r6, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5576:	f7ff ffdb 	bl	d5530 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   d557a:	b938      	cbnz	r0, d558c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x24>
        return nameLen;
    }
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d557c:	462b      	mov	r3, r5
   d557e:	4622      	mov	r2, r4
   d5580:	4630      	mov	r0, r6
   d5582:	2109      	movs	r1, #9
}
   d5584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
    if (nameLen > 0) {
        return nameLen;
    }
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5588:	f7ff bfd2 	b.w	d5530 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   d558c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5590 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:

String BleAdvertisingData::deviceName() const {
   d5590:	b570      	push	{r4, r5, r6, lr}
   d5592:	460c      	mov	r4, r1
   d5594:	b088      	sub	sp, #32
    String name;
   d5596:	490c      	ldr	r1, [pc, #48]	; (d55c8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
        return nameLen;
    }
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
}

String BleAdvertisingData::deviceName() const {
   d5598:	4605      	mov	r5, r0
    String name;
   d559a:	f002 fddf 	bl	d815c <_ZN6StringC1EPK19__FlashStringHelper>
    char buf[BLE_MAX_ADV_DATA_LEN];
    size_t len = deviceName(buf, sizeof(buf));
   d559e:	221f      	movs	r2, #31
   d55a0:	4669      	mov	r1, sp
   d55a2:	4620      	mov	r0, r4
   d55a4:	f7ff ffe0 	bl	d5568 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   d55a8:	4606      	mov	r6, r0
   d55aa:	b148      	cbz	r0, d55c0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x30>
   d55ac:	2400      	movs	r4, #0
        for (size_t i = 0; i < len; i++) {
            if (!name.concat(buf[i])) {
   d55ae:	f81d 1004 	ldrb.w	r1, [sp, r4]
   d55b2:	4628      	mov	r0, r5
   d55b4:	f002 fe4c 	bl	d8250 <_ZN6String6concatEc>
   d55b8:	b110      	cbz	r0, d55c0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x30>
String BleAdvertisingData::deviceName() const {
    String name;
    char buf[BLE_MAX_ADV_DATA_LEN];
    size_t len = deviceName(buf, sizeof(buf));
    if (len > 0) {
        for (size_t i = 0; i < len; i++) {
   d55ba:	3401      	adds	r4, #1
   d55bc:	42a6      	cmp	r6, r4
   d55be:	d1f6      	bne.n	d55ae <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x1e>
                break;
            }
        }
    }
    return name;
}
   d55c0:	4628      	mov	r0, r5
   d55c2:	b008      	add	sp, #32
   d55c4:	bd70      	pop	{r4, r5, r6, pc}
   d55c6:	bf00      	nop
   d55c8:	000d9299 	.word	0x000d9299

000d55cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d55cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d55d0:	2400      	movs	r4, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d55d2:	b085      	sub	sp, #20
   d55d4:	4606      	mov	r6, r0
   d55d6:	4689      	mov	r9, r1
   d55d8:	4617      	mov	r7, r2
   d55da:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d55dc:	4625      	mov	r5, r4
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d55de:	f04f 0814 	mov.w	r8, #20
    return *this;
}

BleUuid& BleUuid::operator=(uint16_t uuid16) {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d55e2:	46a3      	mov	fp, r4
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d55e4:	6a31      	ldr	r1, [r6, #32]
   d55e6:	428c      	cmp	r4, r1
   d55e8:	d22e      	bcs.n	d5648 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x7c>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d55ea:	ab03      	add	r3, sp, #12
   d55ec:	464a      	mov	r2, r9
   d55ee:	1b09      	subs	r1, r1, r4
   d55f0:	1930      	adds	r0, r6, r4
   d55f2:	f7ff ff24 	bl	d543e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d55f6:	4603      	mov	r3, r0
   d55f8:	b330      	cbz	r0, d5648 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x7c>
   d55fa:	4555      	cmp	r5, sl
   d55fc:	d224      	bcs.n	d5648 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x7c>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d55fe:	2804      	cmp	r0, #4
   d5600:	9903      	ldr	r1, [sp, #12]
   d5602:	d10e      	bne.n	d5622 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x56>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5604:	4421      	add	r1, r4
   d5606:	4431      	add	r1, r6
   d5608:	fb08 f205 	mul.w	r2, r8, r5
    }
    return *this;
}

BleUuid& BleUuid::operator=(uint16_t uuid16) {
    uuid_.uuid16 = uuid16;
   d560c:	f891 e003 	ldrb.w	lr, [r1, #3]
   d5610:	7889      	ldrb	r1, [r1, #2]
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5612:	18b8      	adds	r0, r7, r2
    }
    return *this;
}

BleUuid& BleUuid::operator=(uint16_t uuid16) {
    uuid_.uuid16 = uuid16;
   d5614:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
   d5618:	52b9      	strh	r1, [r7, r2]
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d561a:	3501      	adds	r5, #1
    return *this;
}

BleUuid& BleUuid::operator=(uint16_t uuid16) {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d561c:	f880 b010 	strb.w	fp, [r0, #16]
   d5620:	e00e      	b.n	d5640 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x74>
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
   d5622:	2812      	cmp	r0, #18
   d5624:	d10c      	bne.n	d5640 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x74>
                uuids[found++] = &selfData_[i + offset + 2];
   d5626:	3102      	adds	r1, #2
   d5628:	4421      	add	r1, r4
   d562a:	1c6a      	adds	r2, r5, #1
   d562c:	9001      	str	r0, [sp, #4]
   d562e:	4431      	add	r1, r6
   d5630:	fb08 7005 	mla	r0, r8, r5, r7
   d5634:	9200      	str	r2, [sp, #0]
   d5636:	f7ff fdcd 	bl	d51d4 <_ZN8particle7BleUuidaSEPKh>
   d563a:	9a00      	ldr	r2, [sp, #0]
   d563c:	9b01      	ldr	r3, [sp, #4]
   d563e:	4615      	mov	r5, r2
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5640:	9a03      	ldr	r2, [sp, #12]
   d5642:	4413      	add	r3, r2
   d5644:	441c      	add	r4, r3
   d5646:	e7cd      	b.n	d55e4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x18>
            continue;
        }
        break;
    }
    return found;
}
   d5648:	4628      	mov	r0, r5
   d564a:	b005      	add	sp, #20
   d564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5650 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5654:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5656:	460d      	mov	r5, r1
   d5658:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d565a:	460a      	mov	r2, r1
   d565c:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d565e:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5660:	f7ff ffb4 	bl	d55cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5664:	f04f 0814 	mov.w	r8, #20
   d5668:	1a33      	subs	r3, r6, r0
   d566a:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d566e:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5670:	2103      	movs	r1, #3
   d5672:	4638      	mov	r0, r7
   d5674:	f7ff ffaa 	bl	d55cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5678:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d567a:	1b33      	subs	r3, r6, r4
   d567c:	fb08 5204 	mla	r2, r8, r4, r5
   d5680:	2106      	movs	r1, #6
   d5682:	4638      	mov	r0, r7
   d5684:	f7ff ffa2 	bl	d55cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5688:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d568a:	1b33      	subs	r3, r6, r4
   d568c:	fb08 5204 	mla	r2, r8, r4, r5
   d5690:	2107      	movs	r1, #7
   d5692:	4638      	mov	r0, r7
   d5694:	f7ff ff9a 	bl	d55cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d5698:	4420      	add	r0, r4
   d569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d56a0 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d56a0:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d56a2:	2500      	movs	r5, #0
   d56a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d56a8:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d56aa:	8043      	strh	r3, [r0, #2]
   d56ac:	220e      	movs	r2, #14
   d56ae:	4629      	mov	r1, r5
   d56b0:	7005      	strb	r5, [r0, #0]
   d56b2:	7105      	strb	r5, [r0, #4]
   d56b4:	3006      	adds	r0, #6
   d56b6:	f003 fa10 	bl	d8ada <memset>
   d56ba:	f104 0014 	add.w	r0, r4, #20
   d56be:	f7ff fd64 	bl	d518a <_ZN8particle7BleUuidC1Ev>
   d56c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d56c6:	f7ff fd60 	bl	d518a <_ZN8particle7BleUuidC1Ev>
   d56ca:	4904      	ldr	r1, [pc, #16]	; (d56dc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d56cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d56d0:	f002 fd44 	bl	d815c <_ZN6StringC1EPK19__FlashStringHelper>
   d56d4:	64e5      	str	r5, [r4, #76]	; 0x4c
   d56d6:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d56d8:	4620      	mov	r0, r4
   d56da:	bd38      	pop	{r3, r4, r5, pc}
   d56dc:	000d9299 	.word	0x000d9299

000d56e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d56e0:	b510      	push	{r4, lr}
   d56e2:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d56e4:	69c2      	ldr	r2, [r0, #28]
   d56e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d56ea:	4293      	cmp	r3, r2
   d56ec:	4618      	mov	r0, r3
   d56ee:	d006      	beq.n	d56fe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d56f0:	6804      	ldr	r4, [r0, #0]
   d56f2:	8824      	ldrh	r4, [r4, #0]
   d56f4:	428c      	cmp	r4, r1
   d56f6:	f103 0308 	add.w	r3, r3, #8
   d56fa:	d1f6      	bne.n	d56ea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d56fc:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d56fe:	2000      	movs	r0, #0
    }
   d5700:	bd10      	pop	{r4, pc}

000d5702 <_ZNK8particle17BleCharacteristic4UUIDEv>:

bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
   d5702:	b510      	push	{r4, lr}
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d5704:	6809      	ldr	r1, [r1, #0]

bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
   d5706:	4604      	mov	r4, r0
    return impl()->charUUID();
   d5708:	3114      	adds	r1, #20
   d570a:	f7ff fd46 	bl	d519a <_ZN8particle7BleUuidC1ERKS0_>
}
   d570e:	4620      	mov	r0, r4
   d5710:	bd10      	pop	{r4, pc}
	...

000d5714 <_ZNK8particle17BleCharacteristic8getValueEPhj>:

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
}

ssize_t BleCharacteristic::getValue(uint8_t* buf, size_t len) const {
   d5714:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (buf == nullptr || len == 0) {
   d5716:	460d      	mov	r5, r1
   d5718:	b1c9      	cbz	r1, d574e <_ZNK8particle17BleCharacteristic8getValueEPhj+0x3a>
   d571a:	b1c2      	cbz	r2, d574e <_ZNK8particle17BleCharacteristic8getValueEPhj+0x3a>
   d571c:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d571e:	7823      	ldrb	r3, [r4, #0]
   d5720:	2af4      	cmp	r2, #244	; 0xf4
   d5722:	bf28      	it	cs
   d5724:	22f4      	movcs	r2, #244	; 0xf4
   d5726:	b133      	cbz	r3, d5736 <_ZNK8particle17BleCharacteristic8getValueEPhj+0x22>
        return hal_ble_gatt_server_get_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5728:	89a0      	ldrh	r0, [r4, #12]
   d572a:	2300      	movs	r3, #0
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        return hal_ble_gatt_client_read(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d572c:	b003      	add	sp, #12
   d572e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        return hal_ble_gatt_server_get_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5732:	f7ff b9fd 	b.w	d4b30 <hal_ble_gatt_server_get_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5736:	8860      	ldrh	r0, [r4, #2]
   d5738:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d573c:	4288      	cmp	r0, r1
   d573e:	d008      	beq.n	d5752 <_ZNK8particle17BleCharacteristic8getValueEPhj+0x3e>
        return hal_ble_gatt_client_read(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5740:	89a1      	ldrh	r1, [r4, #12]
   d5742:	9300      	str	r3, [sp, #0]
   d5744:	4613      	mov	r3, r2
   d5746:	462a      	mov	r2, r5
   d5748:	f7ff fa10 	bl	d4b6c <hal_ble_gatt_client_read>
   d574c:	e003      	b.n	d5756 <_ZNK8particle17BleCharacteristic8getValueEPhj+0x42>
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
}

ssize_t BleCharacteristic::getValue(uint8_t* buf, size_t len) const {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d574e:	4803      	ldr	r0, [pc, #12]	; (d575c <_ZNK8particle17BleCharacteristic8getValueEPhj+0x48>)
   d5750:	e001      	b.n	d5756 <_ZNK8particle17BleCharacteristic8getValueEPhj+0x42>
        return hal_ble_gatt_server_get_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        return hal_ble_gatt_client_read(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5752:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
}
   d5756:	b003      	add	sp, #12
   d5758:	bd30      	pop	{r4, r5, pc}
   d575a:	bf00      	nop
   d575c:	fffffef2 	.word	0xfffffef2

000d5760 <_ZNK8particle17BleCharacteristic8getValueER6String>:

ssize_t BleCharacteristic::getValue(String& str) const {
   d5760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5762:	4605      	mov	r5, r0
    char* buf = (char*)malloc(BLE_MAX_ATTR_VALUE_PACKET_SIZE);
   d5764:	20f4      	movs	r0, #244	; 0xf4
        return hal_ble_gatt_client_read(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
    }
    return SYSTEM_ERROR_INVALID_STATE;
}

ssize_t BleCharacteristic::getValue(String& str) const {
   d5766:	460e      	mov	r6, r1
    char* buf = (char*)malloc(BLE_MAX_ATTR_VALUE_PACKET_SIZE);
   d5768:	f7ff fc2c 	bl	d4fc4 <malloc>
    if (buf) {
   d576c:	4604      	mov	r4, r0
   d576e:	b1b8      	cbz	r0, d57a0 <_ZNK8particle17BleCharacteristic8getValueER6String+0x40>
        SCOPE_GUARD ({
            free(buf);
        });
        int len = getValue((uint8_t*)buf, BLE_MAX_ATTR_VALUE_PACKET_SIZE);
   d5770:	4601      	mov	r1, r0
   d5772:	22f4      	movs	r2, #244	; 0xf4
   d5774:	4628      	mov	r0, r5
   d5776:	f7ff ffcd 	bl	d5714 <_ZNK8particle17BleCharacteristic8getValueEPhj>
        if (len > 0) {
   d577a:	1e05      	subs	r5, r0, #0
   d577c:	dd0b      	ble.n	d5796 <_ZNK8particle17BleCharacteristic8getValueER6String+0x36>
            str = String(buf, len);
   d577e:	462a      	mov	r2, r5
   d5780:	4621      	mov	r1, r4
   d5782:	4668      	mov	r0, sp
   d5784:	f002 fcde 	bl	d8144 <_ZN6StringC1EPKcj>
   d5788:	4669      	mov	r1, sp
   d578a:	4630      	mov	r0, r6
   d578c:	f002 fd30 	bl	d81f0 <_ZN6StringaSEOS_>
   d5790:	4668      	mov	r0, sp
   d5792:	f002 fc90 	bl	d80b6 <_ZN6StringD1Ev>
}

ssize_t BleCharacteristic::getValue(String& str) const {
    char* buf = (char*)malloc(BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (buf) {
        SCOPE_GUARD ({
   d5796:	4620      	mov	r0, r4
   d5798:	f7ff fc1c 	bl	d4fd4 <free>
            free(buf);
        });
        int len = getValue((uint8_t*)buf, BLE_MAX_ATTR_VALUE_PACKET_SIZE);
   d579c:	4628      	mov	r0, r5
   d579e:	e7ff      	b.n	d57a0 <_ZNK8particle17BleCharacteristic8getValueER6String+0x40>
            str = String(buf, len);
        }
        return len;
    }
    return 0;
}
   d57a0:	b004      	add	sp, #16
   d57a2:	bd70      	pop	{r4, r5, r6, pc}

000d57a4 <_ZNK8particle17BleCharacteristic9subscribeEb>:

int BleCharacteristic::subscribe(bool enable) const {
   d57a4:	b570      	push	{r4, r5, r6, lr}
   d57a6:	6804      	ldr	r4, [r0, #0]
   d57a8:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d57aa:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d57ac:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d57ae:	2900      	cmp	r1, #0
   d57b0:	d12e      	bne.n	d5810 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d57b2:	8862      	ldrh	r2, [r4, #2]
   d57b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d57b8:	429a      	cmp	r2, r3
   d57ba:	d029      	beq.n	d5810 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d57bc:	8a23      	ldrh	r3, [r4, #16]
   d57be:	b353      	cbz	r3, d5816 <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d57c0:	2518      	movs	r5, #24
   d57c2:	462a      	mov	r2, r5
   d57c4:	4668      	mov	r0, sp
   d57c6:	f003 f988 	bl	d8ada <memset>
    config.version = BLE_API_VERSION;
   d57ca:	2301      	movs	r3, #1
   d57cc:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d57d0:	4b13      	ldr	r3, [pc, #76]	; (d5820 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d57d2:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d57d6:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d57d8:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d57da:	8863      	ldrh	r3, [r4, #2]
   d57dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d57e0:	8a23      	ldrh	r3, [r4, #16]
   d57e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d57e6:	89a3      	ldrh	r3, [r4, #12]
   d57e8:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d57ec:	b15e      	cbz	r6, d5806 <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE) {
   d57ee:	7923      	ldrb	r3, [r4, #4]
   d57f0:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d57f2:	bf44      	itt	mi
   d57f4:	2302      	movmi	r3, #2
   d57f6:	9305      	strmi	r3, [sp, #20]
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY) {
   d57f8:	7923      	ldrb	r3, [r4, #4]
   d57fa:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d57fc:	bf42      	ittt	mi
   d57fe:	9b05      	ldrmi	r3, [sp, #20]
   d5800:	f043 0301 	orrmi.w	r3, r3, #1
   d5804:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d5806:	2100      	movs	r1, #0
   d5808:	4668      	mov	r0, sp
   d580a:	f7ff f9cd 	bl	d4ba8 <hal_ble_gatt_client_configure_cccd>
   d580e:	e004      	b.n	d581a <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5810:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5814:	e001      	b.n	d581a <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5816:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d581a:	b006      	add	sp, #24
   d581c:	bd70      	pop	{r4, r5, r6, pc}
   d581e:	bf00      	nop
   d5820:	000d5a0d 	.word	0x000d5a0d

000d5824 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5824:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d5826:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d5828:	651a      	str	r2, [r3, #80]	; 0x50
   d582a:	4770      	bx	lr

000d582c <_ZNK8particle10BleService4UUIDEv>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleUuid BleService::UUID() const {
   d582c:	b510      	push	{r4, lr}
   d582e:	4604      	mov	r4, r0
    return impl()->UUID();
   d5830:	6809      	ldr	r1, [r1, #0]
   d5832:	f7ff fcb2 	bl	d519a <_ZN8particle7BleUuidC1ERKS0_>
}
   d5836:	4620      	mov	r0, r4
   d5838:	bd10      	pop	{r4, pc}
	...

000d583c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5840:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d5842:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d5844:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d5846:	9302      	str	r3, [sp, #8]
   d5848:	2500      	movs	r5, #0
   d584a:	4b2e      	ldr	r3, [pc, #184]	; (d5904 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d584c:	9300      	str	r3, [sp, #0]
   d584e:	aa02      	add	r2, sp, #8
   d5850:	462b      	mov	r3, r5
   d5852:	492d      	ldr	r1, [pc, #180]	; (d5908 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d5854:	9503      	str	r5, [sp, #12]
   d5856:	2001      	movs	r0, #1
   d5858:	f7ff fb20 	bl	d4e9c <log_message>
   d585c:	6833      	ldr	r3, [r6, #0]
   d585e:	68dc      	ldr	r4, [r3, #12]
   d5860:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d5862:	f04f 081c 	mov.w	r8, #28
   d5866:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d586a:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d586c:	f1a4 0308 	sub.w	r3, r4, #8
   d5870:	429f      	cmp	r7, r3
   d5872:	6832      	ldr	r2, [r6, #0]
   d5874:	d017      	beq.n	d58a6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d5876:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d587a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d587e:	8a9b      	ldrh	r3, [r3, #20]
   d5880:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d5884:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5888:	8adb      	ldrh	r3, [r3, #22]
   d588a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d588e:	8810      	ldrh	r0, [r2, #0]
   d5890:	9500      	str	r5, [sp, #0]
   d5892:	4633      	mov	r3, r6
   d5894:	4a1d      	ldr	r2, [pc, #116]	; (d590c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d5896:	a902      	add	r1, sp, #8
   d5898:	f7ff f95e 	bl	d4b58 <hal_ble_gatt_client_discover_characteristics>
   d589c:	2800      	cmp	r0, #0
   d589e:	f104 0408 	add.w	r4, r4, #8
   d58a2:	dae3      	bge.n	d586c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d58a4:	e02a      	b.n	d58fc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d58a6:	6994      	ldr	r4, [r2, #24]
   d58a8:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d58aa:	2700      	movs	r7, #0
   d58ac:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d58b0:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d58b2:	f1a4 0308 	sub.w	r3, r4, #8
   d58b6:	429d      	cmp	r5, r3
   d58b8:	d01f      	beq.n	d58fa <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d58ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d58be:	89db      	ldrh	r3, [r3, #14]
   d58c0:	b1cb      	cbz	r3, d58f6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d58c2:	2214      	movs	r2, #20
   d58c4:	2100      	movs	r1, #0
   d58c6:	a802      	add	r0, sp, #8
   d58c8:	f003 f907 	bl	d8ada <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d58cc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d58d0:	89d9      	ldrh	r1, [r3, #14]
   d58d2:	6833      	ldr	r3, [r6, #0]
   d58d4:	aa02      	add	r2, sp, #8
   d58d6:	8818      	ldrh	r0, [r3, #0]
   d58d8:	9700      	str	r7, [sp, #0]
   d58da:	2313      	movs	r3, #19
   d58dc:	f7ff f946 	bl	d4b6c <hal_ble_gatt_client_read>
                if (len > 0) {
   d58e0:	b148      	cbz	r0, d58f6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d58e2:	ab0a      	add	r3, sp, #40	; 0x28
   d58e4:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d58e6:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d58e8:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d58ec:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d58f0:	303c      	adds	r0, #60	; 0x3c
   d58f2:	f002 fc85 	bl	d8200 <_ZN6StringaSEPKc>
   d58f6:	3408      	adds	r4, #8
   d58f8:	e7db      	b.n	d58b2 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d58fa:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d58fc:	b00a      	add	sp, #40	; 0x28
   d58fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5902:	bf00      	nop
   d5904:	000d8fa7 	.word	0x000d8fa7
   d5908:	000d8f80 	.word	0x000d8f80
   d590c:	000d6505 	.word	0x000d6505

000d5910 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d5910:	6803      	ldr	r3, [r0, #0]
   d5912:	8818      	ldrh	r0, [r3, #0]
}
   d5914:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5918:	1ac0      	subs	r0, r0, r3
   d591a:	bf18      	it	ne
   d591c:	2001      	movne	r0, #1
   d591e:	4770      	bx	lr

000d5920 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d5920:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d5922:	680b      	ldr	r3, [r1, #0]
   d5924:	f8c2 3002 	str.w	r3, [r2, #2]
   d5928:	684b      	ldr	r3, [r1, #4]
   d592a:	f8c2 3006 	str.w	r3, [r2, #6]
   d592e:	4770      	bx	lr

000d5930 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d5930:	b510      	push	{r4, lr}
    return impl()->address();
   d5932:	680a      	ldr	r2, [r1, #0]
   d5934:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5938:	6003      	str	r3, [r0, #0]
   d593a:	6853      	ldr	r3, [r2, #4]
   d593c:	6043      	str	r3, [r0, #4]
}
   d593e:	bd10      	pop	{r4, pc}

000d5940 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5942:	6802      	ldr	r2, [r0, #0]
   d5944:	680b      	ldr	r3, [r1, #0]
   d5946:	8812      	ldrh	r2, [r2, #0]
   d5948:	881b      	ldrh	r3, [r3, #0]
   d594a:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d594c:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d594e:	d10c      	bne.n	d596a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5950:	4601      	mov	r1, r0
   d5952:	4668      	mov	r0, sp
   d5954:	f7ff ffec 	bl	d5930 <_ZNK8particle13BlePeerDevice7addressEv>
   d5958:	4621      	mov	r1, r4
   d595a:	a802      	add	r0, sp, #8
   d595c:	f7ff ffe8 	bl	d5930 <_ZNK8particle13BlePeerDevice7addressEv>
   d5960:	a902      	add	r1, sp, #8
   d5962:	4668      	mov	r0, sp
   d5964:	f7ff fc03 	bl	d516e <_ZNK8particle10BleAddresseqERKS0_>
   d5968:	b900      	cbnz	r0, d596c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d596a:	2000      	movs	r0, #0
}
   d596c:	b004      	add	sp, #16
   d596e:	bd10      	pop	{r4, pc}

000d5970 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5970:	b510      	push	{r4, lr}
   d5972:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5974:	2034      	movs	r0, #52	; 0x34
   d5976:	f7fe fb8e 	bl	d4096 <_Znwj>
   d597a:	4601      	mov	r1, r0
   d597c:	b168      	cbz	r0, d599a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d597e:	2300      	movs	r3, #0
   d5980:	6003      	str	r3, [r0, #0]
   d5982:	6043      	str	r3, [r0, #4]
   d5984:	6083      	str	r3, [r0, #8]
   d5986:	60c3      	str	r3, [r0, #12]
   d5988:	6103      	str	r3, [r0, #16]
   d598a:	6143      	str	r3, [r0, #20]
   d598c:	6183      	str	r3, [r0, #24]
   d598e:	61c3      	str	r3, [r0, #28]
   d5990:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5992:	6243      	str	r3, [r0, #36]	; 0x24
   d5994:	6283      	str	r3, [r0, #40]	; 0x28
   d5996:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5998:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d599a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d599c:	b919      	cbnz	r1, d59a6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d599e:	4a0a      	ldr	r2, [pc, #40]	; (d59c8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d59a0:	200a      	movs	r0, #10
   d59a2:	f7ff fa73 	bl	d4e8c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d59a6:	2000      	movs	r0, #0
   d59a8:	f7ff f88e 	bl	d4ac8 <hal_ble_stack_init>
   d59ac:	b120      	cbz	r0, d59b8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d59ae:	4a06      	ldr	r2, [pc, #24]	; (d59c8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d59b0:	2100      	movs	r1, #0
   d59b2:	200a      	movs	r0, #10
   d59b4:	f7ff fa6a 	bl	d4e8c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d59b8:	2200      	movs	r2, #0
   d59ba:	6821      	ldr	r1, [r4, #0]
   d59bc:	4803      	ldr	r0, [pc, #12]	; (d59cc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d59be:	f7ff f8e9 	bl	d4b94 <hal_ble_set_callback_on_periph_link_events>
}
   d59c2:	4620      	mov	r0, r4
   d59c4:	bd10      	pop	{r4, pc}
   d59c6:	bf00      	nop
   d59c8:	000d4c3d 	.word	0x000d4c3d
   d59cc:	000d5e31 	.word	0x000d5e31

000d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d59d0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d59d2:	4c0a      	ldr	r4, [pc, #40]	; (d59fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d59d4:	6823      	ldr	r3, [r4, #0]
   d59d6:	07db      	lsls	r3, r3, #31
   d59d8:	d40e      	bmi.n	d59f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d59da:	4620      	mov	r0, r4
   d59dc:	f7fe fb6c 	bl	d40b8 <__cxa_guard_acquire>
   d59e0:	b150      	cbz	r0, d59f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d59e2:	4807      	ldr	r0, [pc, #28]	; (d5a00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d59e4:	f7ff ffc4 	bl	d5970 <_ZN8particle14BleLocalDeviceC1Ev>
   d59e8:	4620      	mov	r0, r4
   d59ea:	f7fe fb6a 	bl	d40c2 <__cxa_guard_release>
   d59ee:	4a05      	ldr	r2, [pc, #20]	; (d5a04 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d59f0:	4905      	ldr	r1, [pc, #20]	; (d5a08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d59f2:	4803      	ldr	r0, [pc, #12]	; (d5a00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d59f4:	f002 fec6 	bl	d8784 <__aeabi_atexit>
    return instance;
}
   d59f8:	4801      	ldr	r0, [pc, #4]	; (d5a00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d59fa:	bd10      	pop	{r4, pc}
   d59fc:	2003e38c 	.word	0x2003e38c
   d5a00:	2003e388 	.word	0x2003e388
   d5a04:	2003d238 	.word	0x2003d238
   d5a08:	000d5b99 	.word	0x000d5b99

000d5a0c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5a0c:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5a0e:	6803      	ldr	r3, [r0, #0]
   d5a10:	3b09      	subs	r3, #9
   d5a12:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5a14:	b08a      	sub	sp, #40	; 0x28
   d5a16:	4604      	mov	r4, r0
   d5a18:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5a1a:	d819      	bhi.n	d5a50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5a1c:	f7ff ffd8 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5a20:	88a1      	ldrh	r1, [r4, #4]
   d5a22:	6800      	ldr	r0, [r0, #0]
   d5a24:	f7ff fe5c 	bl	d56e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5a28:	4602      	mov	r2, r0
   d5a2a:	b958      	cbnz	r0, d5a44 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5a2c:	2320      	movs	r3, #32
   d5a2e:	9302      	str	r3, [sp, #8]
   d5a30:	4b08      	ldr	r3, [pc, #32]	; (d5a54 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5a32:	9003      	str	r0, [sp, #12]
   d5a34:	9300      	str	r3, [sp, #0]
   d5a36:	aa02      	add	r2, sp, #8
   d5a38:	4603      	mov	r3, r0
   d5a3a:	4907      	ldr	r1, [pc, #28]	; (d5a58 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5a3c:	2032      	movs	r0, #50	; 0x32
   d5a3e:	f7ff fa2d 	bl	d4e9c <log_message>
   d5a42:	e005      	b.n	d5a50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5a44:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5a46:	b11d      	cbz	r5, d5a50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5a48:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5a4a:	68e1      	ldr	r1, [r4, #12]
   d5a4c:	6920      	ldr	r0, [r4, #16]
   d5a4e:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5a50:	b00a      	add	sp, #40	; 0x28
   d5a52:	bd70      	pop	{r4, r5, r6, pc}
   d5a54:	000d8fca 	.word	0x000d8fca
   d5a58:	000d8f80 	.word	0x000d8f80

000d5a5c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a5c:	6803      	ldr	r3, [r0, #0]
        connectedCb_ = callback;
        connectedContext_ = context;
    }

    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
   d5a5e:	6299      	str	r1, [r3, #40]	; 0x28
        disconnectedContext_ = context;
   d5a60:	631a      	str	r2, [r3, #48]	; 0x30
   d5a62:	4770      	bx	lr

000d5a64 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5a64:	b530      	push	{r4, r5, lr}
   d5a66:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5a68:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d5a6a:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5a6c:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5a6e:	f7ff fb5b 	bl	d5128 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5a72:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5a74:	4621      	mov	r1, r4
   d5a76:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5a78:	9401      	str	r4, [sp, #4]
   d5a7a:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5a7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5a80:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5a82:	f7ff f831 	bl	d4ae8 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d5a86:	4621      	mov	r1, r4
   d5a88:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d5a8a:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d5a8e:	f7ff f823 	bl	d4ad8 <hal_ble_gap_set_scan_parameters>
   d5a92:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d5a94:	4668      	mov	r0, sp
   d5a96:	f7ff fb55 	bl	d5144 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	b005      	add	sp, #20
   d5a9e:	bd30      	pop	{r4, r5, pc}

000d5aa0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5aa0:	b530      	push	{r4, r5, lr}
   d5aa2:	b08b      	sub	sp, #44	; 0x2c
   d5aa4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5aa6:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5aa8:	4614      	mov	r4, r2
    WiringBleLock lk;
   d5aaa:	f7ff fb3d 	bl	d5128 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d5aae:	b1b5      	cbz	r5, d5ade <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d5ab0:	b1ac      	cbz	r4, d5ade <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d5ab2:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5ab4:	a902      	add	r1, sp, #8
   d5ab6:	480d      	ldr	r0, [pc, #52]	; (d5aec <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d5ab8:	9406      	str	r4, [sp, #24]
   d5aba:	9202      	str	r2, [sp, #8]
   d5abc:	9203      	str	r2, [sp, #12]
   d5abe:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d5ac0:	9207      	str	r2, [sp, #28]
   d5ac2:	9208      	str	r2, [sp, #32]
   d5ac4:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d5ac6:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5ac8:	f7ff f816 	bl	d4af8 <hal_ble_gap_start_scan>
   d5acc:	2800      	cmp	r0, #0
   d5ace:	bfb8      	it	lt
   d5ad0:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ad2:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5ad4:	bfa8      	it	ge
   d5ad6:	9c07      	ldrge	r4, [sp, #28]
   d5ad8:	f7ff fa7c 	bl	d4fd4 <free>
   d5adc:	e000      	b.n	d5ae0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5ade:	4c04      	ldr	r4, [pc, #16]	; (d5af0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d5ae0:	a801      	add	r0, sp, #4
   d5ae2:	f7ff fb2f 	bl	d5144 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	b00b      	add	sp, #44	; 0x2c
   d5aea:	bd30      	pop	{r4, r5, pc}
   d5aec:	000d5f9f 	.word	0x000d5f9f
   d5af0:	fffffef2 	.word	0xfffffef2

000d5af4 <_ZNK8particle14BleLocalDevice12stopScanningEv>:
    BleScanDelegator scanner;
    return scanner.start();
}

int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
   d5af4:	2000      	movs	r0, #0
   d5af6:	f7ff b807 	b.w	d4b08 <hal_ble_gap_stop_scan>

000d5afa <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5afa:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5afc:	69d8      	ldr	r0, [r3, #28]
}
   d5afe:	2800      	cmp	r0, #0
   d5b00:	bfd4      	ite	le
   d5b02:	2000      	movle	r0, #0
   d5b04:	2001      	movgt	r0, #1
   d5b06:	4770      	bx	lr

000d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5b08:	680b      	ldr	r3, [r1, #0]
   d5b0a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5b0c:	b113      	cbz	r3, d5b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5b0e:	685a      	ldr	r2, [r3, #4]
   d5b10:	3201      	adds	r2, #1
   d5b12:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5b14:	4770      	bx	lr

000d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5b16:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b18:	f851 3b04 	ldr.w	r3, [r1], #4
   d5b1c:	4604      	mov	r4, r0
   d5b1e:	f840 3b04 	str.w	r3, [r0], #4
   d5b22:	f7ff fff1 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5b26:	6823      	ldr	r3, [r4, #0]
   d5b28:	b90b      	cbnz	r3, d5b2e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5b2a:	f7ff faad 	bl	d5088 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd10      	pop	{r4, pc}

000d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5b32:	b510      	push	{r4, lr}
   d5b34:	f851 3b04 	ldr.w	r3, [r1], #4
   d5b38:	4604      	mov	r4, r0
   d5b3a:	f840 3b04 	str.w	r3, [r0], #4
   d5b3e:	f7ff ffe3 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5b42:	4620      	mov	r0, r4
   d5b44:	bd10      	pop	{r4, pc}

000d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b46:	b510      	push	{r4, lr}
   d5b48:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5b4a:	6800      	ldr	r0, [r0, #0]
   d5b4c:	b128      	cbz	r0, d5b5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5b4e:	6843      	ldr	r3, [r0, #4]
   d5b50:	3b01      	subs	r3, #1
   d5b52:	6043      	str	r3, [r0, #4]
   d5b54:	b90b      	cbnz	r3, d5b5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5b56:	f7ff faa1 	bl	d509c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	bd10      	pop	{r4, pc}

000d5b5e <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5b5e:	b510      	push	{r4, lr}
   d5b60:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b62:	3004      	adds	r0, #4
   d5b64:	f7ff ffef 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5b68:	4620      	mov	r0, r4
   d5b6a:	bd10      	pop	{r4, pc}

000d5b6c <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d5b6c:	b510      	push	{r4, lr}
   d5b6e:	4604      	mov	r4, r0
   d5b70:	3004      	adds	r0, #4
   d5b72:	f7ff ffe8 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5b76:	4620      	mov	r0, r4
   d5b78:	bd10      	pop	{r4, pc}

000d5b7a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5b7a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5b7c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5b7e:	f104 0018 	add.w	r0, r4, #24
   d5b82:	f7fe faa6 	bl	d40d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5b86:	f104 000c 	add.w	r0, r4, #12
   d5b8a:	f7fe fad0 	bl	d412e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5b8e:	4620      	mov	r0, r4
   d5b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b94:	f7fe ba81 	b.w	d409a <_ZdlPv>

000d5b98 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b9a:	6804      	ldr	r4, [r0, #0]
   d5b9c:	4607      	mov	r7, r0
   d5b9e:	b1c4      	cbz	r4, d5bd2 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5ba0:	69a5      	ldr	r5, [r4, #24]
   d5ba2:	69e3      	ldr	r3, [r4, #28]
   d5ba4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ba8:	42ae      	cmp	r6, r5
   d5baa:	d004      	beq.n	d5bb6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bac:	1d28      	adds	r0, r5, #4
   d5bae:	f7ff ffca 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bb2:	3508      	adds	r5, #8
   d5bb4:	e7f8      	b.n	d5ba8 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5bb6:	69a0      	ldr	r0, [r4, #24]
   d5bb8:	f7ff fa0c 	bl	d4fd4 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5bbc:	f104 000c 	add.w	r0, r4, #12
   d5bc0:	f7fe fa87 	bl	d40d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	f7fe fab2 	bl	d412e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bca:	2134      	movs	r1, #52	; 0x34
   d5bcc:	4620      	mov	r0, r4
   d5bce:	f002 fdde 	bl	d878e <_ZdlPvj>
   d5bd2:	4638      	mov	r0, r7
   d5bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5bd8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5bda:	2500      	movs	r5, #0
   d5bdc:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5bde:	6045      	str	r5, [r0, #4]
   d5be0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5be2:	2024      	movs	r0, #36	; 0x24
   d5be4:	f7fe fa57 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5be8:	4604      	mov	r4, r0
   d5bea:	b178      	cbz	r0, d5c0c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5bec:	4603      	mov	r3, r0
   d5bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5bf2:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5bf6:	f8c0 5002 	str.w	r5, [r0, #2]
   d5bfa:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5bfc:	7285      	strb	r5, [r0, #10]
   d5bfe:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5c00:	60c5      	str	r5, [r0, #12]
   d5c02:	6105      	str	r5, [r0, #16]
   d5c04:	6145      	str	r5, [r0, #20]
   d5c06:	6185      	str	r5, [r0, #24]
   d5c08:	61c5      	str	r5, [r0, #28]
   d5c0a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5c0c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5c0e:	2014      	movs	r0, #20
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	f7fe fa40 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5c16:	4603      	mov	r3, r0
   d5c18:	b128      	cbz	r0, d5c26 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5c1a:	2201      	movs	r2, #1
   d5c1c:	6042      	str	r2, [r0, #4]
   d5c1e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5c20:	4a08      	ldr	r2, [pc, #32]	; (d5c44 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5c22:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5c24:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5c26:	a802      	add	r0, sp, #8
   d5c28:	6872      	ldr	r2, [r6, #4]
   d5c2a:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5c2e:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5c30:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5c32:	f7ff ff88 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5c36:	6833      	ldr	r3, [r6, #0]
   d5c38:	b90b      	cbnz	r3, d5c3e <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5c3a:	f7ff fa25 	bl	d5088 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5c3e:	4630      	mov	r0, r6
   d5c40:	b002      	add	sp, #8
   d5c42:	bd70      	pop	{r4, r5, r6, pc}
   d5c44:	000d8f6c 	.word	0x000d8f6c

000d5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5c48:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5c4a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5c4c:	6803      	ldr	r3, [r0, #0]
   d5c4e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5c50:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5c52:	d00c      	beq.n	d5c6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5c54:	b114      	cbz	r4, d5c5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5c56:	6863      	ldr	r3, [r4, #4]
   d5c58:	3301      	adds	r3, #1
   d5c5a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5c5c:	6828      	ldr	r0, [r5, #0]
   d5c5e:	b128      	cbz	r0, d5c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5c60:	6843      	ldr	r3, [r0, #4]
   d5c62:	3b01      	subs	r3, #1
   d5c64:	6043      	str	r3, [r0, #4]
   d5c66:	b90b      	cbnz	r3, d5c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5c68:	f7ff fa18 	bl	d509c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5c6c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5c6e:	4628      	mov	r0, r5
   d5c70:	bd38      	pop	{r3, r4, r5, pc}

000d5c72 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d5c72:	b510      	push	{r4, lr}
   d5c74:	6802      	ldr	r2, [r0, #0]
   d5c76:	680b      	ldr	r3, [r1, #0]
   d5c78:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d5c7a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d5c7c:	b110      	cbz	r0, d5c84 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d5c7e:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d5c80:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d5c82:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5c84:	4620      	mov	r0, r4
   d5c86:	f851 3b04 	ldr.w	r3, [r1], #4
   d5c8a:	f840 3b04 	str.w	r3, [r0], #4
   d5c8e:	f7ff ffdb 	bl	d5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d5c92:	4620      	mov	r0, r4
   d5c94:	bd10      	pop	{r4, pc}

000d5c96 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d5c96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c9a:	6803      	ldr	r3, [r0, #0]
   d5c9c:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5c9e:	69de      	ldr	r6, [r3, #28]
   d5ca0:	b087      	sub	sp, #28
   d5ca2:	460f      	mov	r7, r1
   d5ca4:	4690      	mov	r8, r2
   d5ca6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d5caa:	42b4      	cmp	r4, r6
   d5cac:	46a1      	mov	r9, r4
   d5cae:	d011      	beq.n	d5cd4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d5cb0:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d5cb4:	a801      	add	r0, sp, #4
   d5cb6:	3114      	adds	r1, #20
   d5cb8:	f7ff fa6f 	bl	d519a <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d5cbc:	4641      	mov	r1, r8
   d5cbe:	a801      	add	r0, sp, #4
   d5cc0:	f7ff faa1 	bl	d5206 <_ZNK8particle7BleUuideqERKS0_>
   d5cc4:	4605      	mov	r5, r0
   d5cc6:	2800      	cmp	r0, #0
   d5cc8:	d0ef      	beq.n	d5caa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d5cca:	4649      	mov	r1, r9
   d5ccc:	4638      	mov	r0, r7
   d5cce:	f7ff ffd0 	bl	d5c72 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d5cd2:	e000      	b.n	d5cd6 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d5cd4:	2500      	movs	r5, #0
}
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	b007      	add	sp, #28
   d5cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5cde <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	f851 3b04 	ldr.w	r3, [r1], #4
   d5ce4:	4604      	mov	r4, r0
   d5ce6:	f840 3b04 	str.w	r3, [r0], #4
   d5cea:	f7ff ffad 	bl	d5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d5cee:	4620      	mov	r0, r4
   d5cf0:	bd10      	pop	{r4, pc}

000d5cf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5cf2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5cf4:	b570      	push	{r4, r5, r6, lr}
   d5cf6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5cf8:	d91a      	bls.n	d5d30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5cfa:	4290      	cmp	r0, r2
   d5cfc:	d219      	bcs.n	d5d32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5cfe:	f1a1 0608 	sub.w	r6, r1, #8
   d5d02:	1a51      	subs	r1, r2, r1
   d5d04:	3904      	subs	r1, #4
   d5d06:	1f15      	subs	r5, r2, #4
   d5d08:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5d0a:	1f2b      	subs	r3, r5, #4
   d5d0c:	429e      	cmp	r6, r3
   d5d0e:	d025      	beq.n	d5d5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5d10:	2c04      	cmp	r4, #4
   d5d12:	d007      	beq.n	d5d24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d14:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5d18:	f844 3c04 	str.w	r3, [r4, #-4]
   d5d1c:	4629      	mov	r1, r5
   d5d1e:	4620      	mov	r0, r4
   d5d20:	f7ff fef2 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d24:	4628      	mov	r0, r5
   d5d26:	f7ff ff0e 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d2a:	3d08      	subs	r5, #8
   d5d2c:	3c08      	subs	r4, #8
   d5d2e:	e7ec      	b.n	d5d0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5d30:	d014      	beq.n	d5d5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5d32:	1d0c      	adds	r4, r1, #4
   d5d34:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5d36:	1f23      	subs	r3, r4, #4
   d5d38:	429d      	cmp	r5, r3
   d5d3a:	d00f      	beq.n	d5d5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5d3c:	2e04      	cmp	r6, #4
   d5d3e:	d007      	beq.n	d5d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d40:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5d44:	f846 3c04 	str.w	r3, [r6, #-4]
   d5d48:	4621      	mov	r1, r4
   d5d4a:	4630      	mov	r0, r6
   d5d4c:	f7ff fedc 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d50:	4620      	mov	r0, r4
   d5d52:	f7ff fef8 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d56:	3408      	adds	r4, #8
   d5d58:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5d5a:	e7ec      	b.n	d5d36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5d5c:	bd70      	pop	{r4, r5, r6, pc}

000d5d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5d62:	6804      	ldr	r4, [r0, #0]
   d5d64:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5d66:	4605      	mov	r5, r0
   d5d68:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5d6a:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5d6e:	42a7      	cmp	r7, r4
   d5d70:	d018      	beq.n	d5da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5d72:	4641      	mov	r1, r8
   d5d74:	4620      	mov	r0, r4
   d5d76:	f7ff fde3 	bl	d5940 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5d7a:	4606      	mov	r6, r0
   d5d7c:	b908      	cbnz	r0, d5d82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5d7e:	3408      	adds	r4, #8
   d5d80:	e7f5      	b.n	d5d6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5d82:	b18c      	cbz	r4, d5da8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5d84:	1d20      	adds	r0, r4, #4
   d5d86:	f7ff fede 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5d8a:	682b      	ldr	r3, [r5, #0]
   d5d8c:	686a      	ldr	r2, [r5, #4]
   d5d8e:	f104 0108 	add.w	r1, r4, #8
   d5d92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff ffab 	bl	d5cf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5d9c:	686b      	ldr	r3, [r5, #4]
   d5d9e:	3b01      	subs	r3, #1
   d5da0:	606b      	str	r3, [r5, #4]
    return true;
   d5da2:	e002      	b.n	d5daa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5da4:	2600      	movs	r6, #0
   d5da6:	e000      	b.n	d5daa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5da8:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5daa:	4630      	mov	r0, r6
   d5dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5db0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5db2:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5db4:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5db8:	6847      	ldr	r7, [r0, #4]
   d5dba:	9300      	str	r3, [sp, #0]
   d5dbc:	a801      	add	r0, sp, #4
   d5dbe:	f7ff fea3 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5dc2:	6866      	ldr	r6, [r4, #4]
   d5dc4:	68a3      	ldr	r3, [r4, #8]
   d5dc6:	429e      	cmp	r6, r3
   d5dc8:	db14      	blt.n	d5df4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5dca:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5dcc:	2e00      	cmp	r6, #0
   d5dce:	dd0b      	ble.n	d5de8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5dd0:	00f0      	lsls	r0, r6, #3
   d5dd2:	f7ff f8f7 	bl	d4fc4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5dd6:	4605      	mov	r5, r0
   d5dd8:	b318      	cbz	r0, d5e22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5dda:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5dde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5de2:	f7ff ff86 	bl	d5cf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5de6:	e000      	b.n	d5dea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5de8:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5dea:	6820      	ldr	r0, [r4, #0]
   d5dec:	f7ff f8f2 	bl	d4fd4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5df0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5df2:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5df4:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5df6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5df8:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5dfc:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5e00:	4629      	mov	r1, r5
   d5e02:	f105 0008 	add.w	r0, r5, #8
   d5e06:	f7ff ff74 	bl	d5cf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5e0a:	b135      	cbz	r5, d5e1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5e0c:	9b00      	ldr	r3, [sp, #0]
   d5e0e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5e12:	a901      	add	r1, sp, #4
   d5e14:	1d28      	adds	r0, r5, #4
   d5e16:	f7ff fe77 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5e1a:	6863      	ldr	r3, [r4, #4]
   d5e1c:	3301      	adds	r3, #1
   d5e1e:	6063      	str	r3, [r4, #4]
   d5e20:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e22:	a801      	add	r0, sp, #4
   d5e24:	f7ff fe8f 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5e28:	4628      	mov	r0, r5
   d5e2a:	b003      	add	sp, #12
   d5e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5e30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e34:	4604      	mov	r4, r0
   d5e36:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5e38:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5e3a:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5e3c:	f7ff f974 	bl	d5128 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5e40:	6823      	ldr	r3, [r4, #0]
   d5e42:	2b03      	cmp	r3, #3
   d5e44:	d002      	beq.n	d5e4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5e46:	2b04      	cmp	r3, #4
   d5e48:	d042      	beq.n	d5ed0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5e4a:	e087      	b.n	d5f5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5e4c:	a804      	add	r0, sp, #16
   d5e4e:	f7ff fec3 	bl	d5bd8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5e52:	9b04      	ldr	r3, [sp, #16]
   d5e54:	8922      	ldrh	r2, [r4, #8]
   d5e56:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5e58:	6862      	ldr	r2, [r4, #4]
   d5e5a:	9904      	ldr	r1, [sp, #16]
   d5e5c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5e60:	f8c1 3002 	str.w	r3, [r1, #2]
   d5e64:	6853      	ldr	r3, [r2, #4]
   d5e66:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e6a:	a807      	add	r0, sp, #28
   d5e6c:	9b04      	ldr	r3, [sp, #16]
   d5e6e:	9306      	str	r3, [sp, #24]
   d5e70:	a905      	add	r1, sp, #20
   d5e72:	f7ff fe49 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5e76:	a906      	add	r1, sp, #24
   d5e78:	f105 0018 	add.w	r0, r5, #24
   d5e7c:	f7ff ff98 	bl	d5db0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5e80:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e82:	a807      	add	r0, sp, #28
   d5e84:	f7ff fe5f 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e88:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5e8a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5e8c:	b974      	cbnz	r4, d5eac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5e8e:	4b36      	ldr	r3, [pc, #216]	; (d5f68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5e90:	9300      	str	r3, [sp, #0]
   d5e92:	aa06      	add	r2, sp, #24
   d5e94:	4623      	mov	r3, r4
   d5e96:	4935      	ldr	r1, [pc, #212]	; (d5f6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5e98:	9407      	str	r4, [sp, #28]
   d5e9a:	2032      	movs	r0, #50	; 0x32
   d5e9c:	f7fe fffe 	bl	d4e9c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5ea0:	9b04      	ldr	r3, [sp, #16]
   d5ea2:	4621      	mov	r1, r4
   d5ea4:	8818      	ldrh	r0, [r3, #0]
   d5ea6:	f7fe fe39 	bl	d4b1c <hal_ble_gap_disconnect>
   d5eaa:	e00d      	b.n	d5ec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5eac:	4a30      	ldr	r2, [pc, #192]	; (d5f70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5eae:	9200      	str	r2, [sp, #0]
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	aa06      	add	r2, sp, #24
   d5eb4:	492d      	ldr	r1, [pc, #180]	; (d5f6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5eb6:	9307      	str	r3, [sp, #28]
   d5eb8:	2001      	movs	r0, #1
   d5eba:	f7fe ffef 	bl	d4e9c <log_message>
                if (impl->connectedCb_) {
   d5ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5ec0:	b113      	cbz	r3, d5ec8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5ec2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5ec4:	a804      	add	r0, sp, #16
   d5ec6:	4798      	blx	r3
   d5ec8:	a805      	add	r0, sp, #20
   d5eca:	f7ff fe3c 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ece:	e045      	b.n	d5f5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5ed0:	8921      	ldrh	r1, [r4, #8]
   d5ed2:	4628      	mov	r0, r5
   d5ed4:	f7ff fc04 	bl	d56e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5ed8:	4607      	mov	r7, r0
   d5eda:	2800      	cmp	r0, #0
   d5edc:	d03e      	beq.n	d5f5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5ede:	6804      	ldr	r4, [r0, #0]
   d5ee0:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ee2:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5ee8:	8022      	strh	r2, [r4, #0]
   d5eea:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5eee:	4299      	cmp	r1, r3
   d5ef0:	d003      	beq.n	d5efa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5ef2:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5ef6:	8042      	strh	r2, [r0, #2]
   d5ef8:	e7f9      	b.n	d5eee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5efa:	68e6      	ldr	r6, [r4, #12]
   d5efc:	6923      	ldr	r3, [r4, #16]
   d5efe:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f02:	45b0      	cmp	r8, r6
   d5f04:	d004      	beq.n	d5f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5f06:	1d30      	adds	r0, r6, #4
   d5f08:	f7ff fe1d 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f0c:	3608      	adds	r6, #8
   d5f0e:	e7f8      	b.n	d5f02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5f10:	2300      	movs	r3, #0
   d5f12:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5f14:	69a6      	ldr	r6, [r4, #24]
   d5f16:	69e3      	ldr	r3, [r4, #28]
   d5f18:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f1c:	45b0      	cmp	r8, r6
   d5f1e:	d004      	beq.n	d5f2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5f20:	1d30      	adds	r0, r6, #4
   d5f22:	f7ff fe10 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f26:	3608      	adds	r6, #8
   d5f28:	e7f8      	b.n	d5f1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5f2a:	2300      	movs	r3, #0
   d5f2c:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5f2e:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5f30:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5f32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5f34:	b113      	cbz	r3, d5f3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5f36:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5f38:	4638      	mov	r0, r7
   d5f3a:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5f3c:	2320      	movs	r3, #32
   d5f3e:	4a0d      	ldr	r2, [pc, #52]	; (d5f74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5f40:	9306      	str	r3, [sp, #24]
   d5f42:	9200      	str	r2, [sp, #0]
   d5f44:	2300      	movs	r3, #0
   d5f46:	4909      	ldr	r1, [pc, #36]	; (d5f6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f48:	9307      	str	r3, [sp, #28]
   d5f4a:	2001      	movs	r0, #1
   d5f4c:	aa06      	add	r2, sp, #24
   d5f4e:	f7fe ffa5 	bl	d4e9c <log_message>
                    impl->peers_.removeOne(*peer);
   d5f52:	4639      	mov	r1, r7
   d5f54:	f105 0018 	add.w	r0, r5, #24
   d5f58:	f7ff ff01 	bl	d5d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5f5c:	a803      	add	r0, sp, #12
   d5f5e:	f7ff f8f1 	bl	d5144 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5f62:	b00e      	add	sp, #56	; 0x38
   d5f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f68:	000d8fe2 	.word	0x000d8fe2
   d5f6c:	000d8f80 	.word	0x000d8f80
   d5f70:	000d9008 	.word	0x000d9008
   d5f74:	000d9025 	.word	0x000d9025

000d5f78 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5f78:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d5f7a:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5f7c:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d5f7e:	dd06      	ble.n	d5f8e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5f80:	2154      	movs	r1, #84	; 0x54
   d5f82:	4369      	muls	r1, r5
   d5f84:	6800      	ldr	r0, [r0, #0]
   d5f86:	f7ff f82d 	bl	d4fe4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5f8a:	b920      	cbnz	r0, d5f96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d5f8c:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f8e:	6800      	ldr	r0, [r0, #0]
   d5f90:	f7ff f820 	bl	d4fd4 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5f94:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5f96:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5f98:	60a5      	str	r5, [r4, #8]
        return true;
   d5f9a:	2001      	movs	r0, #1
    }
   d5f9c:	bd38      	pop	{r3, r4, r5, pc}

000d5f9e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5f9e:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5fa0:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5fa2:	b0c0      	sub	sp, #256	; 0x100
   d5fa4:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5fa6:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5fa8:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5faa:	a801      	add	r0, sp, #4
   d5fac:	2100      	movs	r1, #0
   d5fae:	f002 fd94 	bl	d8ada <memset>
   d5fb2:	a803      	add	r0, sp, #12
   d5fb4:	f7ff faa2 	bl	d54fc <_ZN8particle18BleAdvertisingDataC1Ev>
   d5fb8:	a80c      	add	r0, sp, #48	; 0x30
   d5fba:	f7ff fa9f 	bl	d54fc <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5fbe:	462a      	mov	r2, r5
   d5fc0:	ab01      	add	r3, sp, #4
   d5fc2:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5fc6:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5fc8:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5fca:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5fcc:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5fce:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5fd0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5fd4:	a80c      	add	r0, sp, #48	; 0x30
   d5fd6:	f7ff fa22 	bl	d541e <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d5fda:	89aa      	ldrh	r2, [r5, #12]
   d5fdc:	6869      	ldr	r1, [r5, #4]
   d5fde:	a803      	add	r0, sp, #12
   d5fe0:	f7ff fa1d 	bl	d541e <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d5fe4:	69a5      	ldr	r5, [r4, #24]
   d5fe6:	b11d      	cbz	r5, d5ff0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5fe8:	69e1      	ldr	r1, [r4, #28]
   d5fea:	a801      	add	r0, sp, #4
   d5fec:	47a8      	blx	r5
   d5fee:	e03c      	b.n	d606a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d5ff0:	68e0      	ldr	r0, [r4, #12]
   d5ff2:	b198      	cbz	r0, d601c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d5ff4:	6963      	ldr	r3, [r4, #20]
   d5ff6:	6922      	ldr	r2, [r4, #16]
   d5ff8:	4293      	cmp	r3, r2
   d5ffa:	d239      	bcs.n	d6070 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d5ffc:	1c5a      	adds	r2, r3, #1
   d5ffe:	6162      	str	r2, [r4, #20]
   d6000:	fb06 0003 	mla	r0, r6, r3, r0
   d6004:	2251      	movs	r2, #81	; 0x51
   d6006:	a901      	add	r1, sp, #4
   d6008:	f002 fd41 	bl	d8a8e <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d600c:	6962      	ldr	r2, [r4, #20]
   d600e:	6923      	ldr	r3, [r4, #16]
   d6010:	429a      	cmp	r2, r3
   d6012:	d32d      	bcc.n	d6070 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d6014:	4628      	mov	r0, r5
   d6016:	f7fe fd77 	bl	d4b08 <hal_ble_gap_stop_scan>
   d601a:	e029      	b.n	d6070 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d601c:	4632      	mov	r2, r6
   d601e:	a901      	add	r1, sp, #4
   d6020:	a816      	add	r0, sp, #88	; 0x58
   d6022:	f002 fd34 	bl	d8a8e <memcpy>
   d6026:	4632      	mov	r2, r6
   d6028:	a916      	add	r1, sp, #88	; 0x58
   d602a:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d602c:	6865      	ldr	r5, [r4, #4]
   d602e:	f002 fd2e 	bl	d8a8e <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6032:	68a3      	ldr	r3, [r4, #8]
   d6034:	429d      	cmp	r5, r3
   d6036:	db04      	blt.n	d6042 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d6038:	1c69      	adds	r1, r5, #1
   d603a:	4620      	mov	r0, r4
   d603c:	f7ff ff9c 	bl	d5f78 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6040:	b1b0      	cbz	r0, d6070 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6042:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6044:	6822      	ldr	r2, [r4, #0]
   d6046:	2654      	movs	r6, #84	; 0x54
   d6048:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d604c:	fb06 2203 	mla	r2, r6, r3, r2
   d6050:	1b52      	subs	r2, r2, r5
   d6052:	4629      	mov	r1, r5
   d6054:	19a8      	adds	r0, r5, r6
   d6056:	f002 fd25 	bl	d8aa4 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d605a:	4632      	mov	r2, r6
   d605c:	a92b      	add	r1, sp, #172	; 0xac
   d605e:	4628      	mov	r0, r5
   d6060:	f002 fd15 	bl	d8a8e <memcpy>
    ++size_;
   d6064:	6863      	ldr	r3, [r4, #4]
   d6066:	3301      	adds	r3, #1
   d6068:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d606a:	6963      	ldr	r3, [r4, #20]
   d606c:	3301      	adds	r3, #1
   d606e:	6163      	str	r3, [r4, #20]
        }
    }
   d6070:	b040      	add	sp, #256	; 0x100
   d6072:	bd70      	pop	{r4, r5, r6, pc}

000d6074 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6074:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6078:	4606      	mov	r6, r0
   d607a:	460c      	mov	r4, r1
   d607c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d607e:	d914      	bls.n	d60aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6080:	4290      	cmp	r0, r2
   d6082:	d213      	bcs.n	d60ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6084:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6088:	1a6c      	subs	r4, r5, r1
   d608a:	f1a1 0708 	sub.w	r7, r1, #8
   d608e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6090:	42af      	cmp	r7, r5
   d6092:	d018      	beq.n	d60c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6094:	b11c      	cbz	r4, d609e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6096:	4629      	mov	r1, r5
   d6098:	4620      	mov	r0, r4
   d609a:	f7ff fd4a 	bl	d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d609e:	1d28      	adds	r0, r5, #4
   d60a0:	f7ff fd51 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d60a4:	3d08      	subs	r5, #8
   d60a6:	3c08      	subs	r4, #8
   d60a8:	e7f2      	b.n	d6090 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d60aa:	d00c      	beq.n	d60c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d60ac:	42ac      	cmp	r4, r5
   d60ae:	d00a      	beq.n	d60c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d60b0:	b11e      	cbz	r6, d60ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d60b2:	4621      	mov	r1, r4
   d60b4:	4630      	mov	r0, r6
   d60b6:	f7ff fd3c 	bl	d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d60ba:	1d20      	adds	r0, r4, #4
   d60bc:	f7ff fd43 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d60c0:	3408      	adds	r4, #8
   d60c2:	3608      	adds	r6, #8
   d60c4:	e7f2      	b.n	d60ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d60c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d60c8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d60ca:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d60cc:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d60ce:	dd0b      	ble.n	d60e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d60d0:	00f0      	lsls	r0, r6, #3
   d60d2:	f7fe ff77 	bl	d4fc4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d60d6:	4604      	mov	r4, r0
   d60d8:	b170      	cbz	r0, d60f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d60da:	e895 0006 	ldmia.w	r5, {r1, r2}
   d60de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d60e2:	f7ff ffc7 	bl	d6074 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d60e6:	e000      	b.n	d60ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d60e8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d60ea:	6828      	ldr	r0, [r5, #0]
   d60ec:	f7fe ff72 	bl	d4fd4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d60f0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d60f2:	60ae      	str	r6, [r5, #8]
        return true;
   d60f4:	2001      	movs	r0, #1
   d60f6:	bd70      	pop	{r4, r5, r6, pc}
    }
   d60f8:	bd70      	pop	{r4, r5, r6, pc}

000d60fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d60fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d60fe:	2300      	movs	r3, #0
   d6100:	6003      	str	r3, [r0, #0]
   d6102:	6043      	str	r3, [r0, #4]
   d6104:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6106:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6108:	6849      	ldr	r1, [r1, #4]
   d610a:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d610c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d610e:	dd13      	ble.n	d6138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6110:	f7ff ffda 	bl	d60c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6114:	b180      	cbz	r0, d6138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6116:	6835      	ldr	r5, [r6, #0]
   d6118:	6873      	ldr	r3, [r6, #4]
   d611a:	6827      	ldr	r7, [r4, #0]
   d611c:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6120:	4545      	cmp	r5, r8
   d6122:	d007      	beq.n	d6134 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6124:	b11f      	cbz	r7, d612e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6126:	4629      	mov	r1, r5
   d6128:	4638      	mov	r0, r7
   d612a:	f7ff fd02 	bl	d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d612e:	3508      	adds	r5, #8
   d6130:	3708      	adds	r7, #8
   d6132:	e7f5      	b.n	d6120 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6134:	6873      	ldr	r3, [r6, #4]
   d6136:	6063      	str	r3, [r4, #4]
    }
}
   d6138:	4620      	mov	r0, r4
   d613a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d613e <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d613e:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6140:	680b      	ldr	r3, [r1, #0]
   d6142:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6144:	4605      	mov	r5, r0
   d6146:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6148:	b933      	cbnz	r3, d6158 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d614a:	4608      	mov	r0, r1
   d614c:	f7fe ff7e 	bl	d504c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.19>
   d6150:	b910      	cbnz	r0, d6158 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d6152:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d6154:	2201      	movs	r2, #1
   d6156:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6158:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d615a:	4628      	mov	r0, r5
   d615c:	310c      	adds	r1, #12
   d615e:	f7ff ffcc 	bl	d60fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d6162:	4628      	mov	r0, r5
   d6164:	bd38      	pop	{r3, r4, r5, pc}

000d6166 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6166:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6168:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d616a:	6845      	ldr	r5, [r0, #4]
   d616c:	4668      	mov	r0, sp
   d616e:	f7ff fce0 	bl	d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6172:	6861      	ldr	r1, [r4, #4]
   d6174:	68a3      	ldr	r3, [r4, #8]
   d6176:	4299      	cmp	r1, r3
   d6178:	db05      	blt.n	d6186 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d617a:	3101      	adds	r1, #1
   d617c:	4620      	mov	r0, r4
   d617e:	f7ff ffa3 	bl	d60c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6182:	4606      	mov	r6, r0
   d6184:	b198      	cbz	r0, d61ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6186:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6188:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d618a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d618e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6192:	4629      	mov	r1, r5
   d6194:	f105 0008 	add.w	r0, r5, #8
   d6198:	f7ff ff6c 	bl	d6074 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d619c:	b11d      	cbz	r5, d61a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d619e:	4669      	mov	r1, sp
   d61a0:	4628      	mov	r0, r5
   d61a2:	f7ff fcc6 	bl	d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d61a6:	6863      	ldr	r3, [r4, #4]
   d61a8:	3301      	adds	r3, #1
   d61aa:	6063      	str	r3, [r4, #4]
   d61ac:	2601      	movs	r6, #1
   d61ae:	a801      	add	r0, sp, #4
   d61b0:	f7ff fcc9 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d61b4:	4630      	mov	r0, r6
   d61b6:	b002      	add	sp, #8
   d61b8:	bd70      	pop	{r4, r5, r6, pc}

000d61ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d61ba:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d61bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61be:	4606      	mov	r6, r0
   d61c0:	460c      	mov	r4, r1
   d61c2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d61c4:	d914      	bls.n	d61f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d61c6:	4290      	cmp	r0, r2
   d61c8:	d213      	bcs.n	d61f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d61ca:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d61ce:	1a6c      	subs	r4, r5, r1
   d61d0:	f1a1 0708 	sub.w	r7, r1, #8
   d61d4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d61d6:	42af      	cmp	r7, r5
   d61d8:	d018      	beq.n	d620c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d61da:	b11c      	cbz	r4, d61e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d61dc:	4629      	mov	r1, r5
   d61de:	4620      	mov	r0, r4
   d61e0:	f7ff fc99 	bl	d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d61e4:	1d28      	adds	r0, r5, #4
   d61e6:	f7ff fcae 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d61ea:	3d08      	subs	r5, #8
   d61ec:	3c08      	subs	r4, #8
   d61ee:	e7f2      	b.n	d61d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d61f0:	d00c      	beq.n	d620c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d61f2:	42ac      	cmp	r4, r5
   d61f4:	d00a      	beq.n	d620c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d61f6:	b11e      	cbz	r6, d6200 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d61f8:	4621      	mov	r1, r4
   d61fa:	4630      	mov	r0, r6
   d61fc:	f7ff fc8b 	bl	d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6200:	1d20      	adds	r0, r4, #4
   d6202:	f7ff fca0 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6206:	3408      	adds	r4, #8
   d6208:	3608      	adds	r6, #8
   d620a:	e7f2      	b.n	d61f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d620e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d620e:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6210:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6212:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6214:	dd0b      	ble.n	d622e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6216:	00f0      	lsls	r0, r6, #3
   d6218:	f7fe fed4 	bl	d4fc4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d621c:	4604      	mov	r4, r0
   d621e:	b170      	cbz	r0, d623e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6220:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6224:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6228:	f7ff ffc7 	bl	d61ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d622c:	e000      	b.n	d6230 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d622e:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6230:	6828      	ldr	r0, [r5, #0]
   d6232:	f7fe fecf 	bl	d4fd4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6236:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6238:	60ae      	str	r6, [r5, #8]
        return true;
   d623a:	2001      	movs	r0, #1
   d623c:	bd70      	pop	{r4, r5, r6, pc}
    }
   d623e:	bd70      	pop	{r4, r5, r6, pc}

000d6240 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6244:	2300      	movs	r3, #0
   d6246:	6003      	str	r3, [r0, #0]
   d6248:	6043      	str	r3, [r0, #4]
   d624a:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d624c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d624e:	6849      	ldr	r1, [r1, #4]
   d6250:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6252:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6254:	dd13      	ble.n	d627e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6256:	f7ff ffda 	bl	d620e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d625a:	b180      	cbz	r0, d627e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d625c:	6835      	ldr	r5, [r6, #0]
   d625e:	6873      	ldr	r3, [r6, #4]
   d6260:	6827      	ldr	r7, [r4, #0]
   d6262:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6266:	4545      	cmp	r5, r8
   d6268:	d007      	beq.n	d627a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d626a:	b11f      	cbz	r7, d6274 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d626c:	4629      	mov	r1, r5
   d626e:	4638      	mov	r0, r7
   d6270:	f7ff fc51 	bl	d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6274:	3508      	adds	r5, #8
   d6276:	3708      	adds	r7, #8
   d6278:	e7f5      	b.n	d6266 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d627a:	6873      	ldr	r3, [r6, #4]
   d627c:	6063      	str	r3, [r4, #4]
    }
}
   d627e:	4620      	mov	r0, r4
   d6280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6284 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6284:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6286:	680b      	ldr	r3, [r1, #0]
   d6288:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d628a:	b085      	sub	sp, #20
   d628c:	4605      	mov	r5, r0
   d628e:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6290:	b92b      	cbnz	r3, d629e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d6292:	a801      	add	r0, sp, #4
   d6294:	f7ff ff53 	bl	d613e <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d6298:	a801      	add	r0, sp, #4
   d629a:	f7fd ff48 	bl	d412e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d629e:	6823      	ldr	r3, [r4, #0]
   d62a0:	7adb      	ldrb	r3, [r3, #11]
   d62a2:	b93b      	cbnz	r3, d62b4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d62a4:	4621      	mov	r1, r4
   d62a6:	a801      	add	r0, sp, #4
   d62a8:	f7ff fac8 	bl	d583c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d62ac:	b910      	cbnz	r0, d62b4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d62ae:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d62b0:	2201      	movs	r2, #1
   d62b2:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d62b4:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d62b6:	4628      	mov	r0, r5
   d62b8:	3118      	adds	r1, #24
   d62ba:	f7ff ffc1 	bl	d6240 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d62be:	4628      	mov	r0, r5
   d62c0:	b005      	add	sp, #20
   d62c2:	bd30      	pop	{r4, r5, pc}

000d62c4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d62c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d62c8:	460d      	mov	r5, r1
   d62ca:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d62cc:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d62d0:	4617      	mov	r7, r2
   d62d2:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d62d4:	4642      	mov	r2, r8
   d62d6:	2100      	movs	r1, #0
   d62d8:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d62da:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d62dc:	f002 fbfd 	bl	d8ada <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d62e0:	6869      	ldr	r1, [r5, #4]
   d62e2:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d62e4:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d62e6:	ab02      	add	r3, sp, #8
   d62e8:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d62ea:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d62ee:	ab05      	add	r3, sp, #20
   d62f0:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d62f4:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d62f8:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d62fc:	f7ff fb68 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6300:	4b34      	ldr	r3, [pc, #208]	; (d63d4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d6302:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6304:	f7ff fb64 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6308:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d630a:	6803      	ldr	r3, [r0, #0]
   d630c:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d630e:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6310:	a804      	add	r0, sp, #16
   d6312:	f7fe fc35 	bl	d4b80 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d6316:	4607      	mov	r7, r0
   d6318:	b120      	cbz	r0, d6324 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d631a:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d631c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6320:	801a      	strh	r2, [r3, #0]
        return ret;
   d6322:	e053      	b.n	d63cc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d6324:	4629      	mov	r1, r5
   d6326:	4630      	mov	r0, r6
   d6328:	f7ff fafa 	bl	d5920 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d632c:	f7ff fb50 	bl	d59d0 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6330:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d6332:	6803      	ldr	r3, [r0, #0]
   d6334:	ad12      	add	r5, sp, #72	; 0x48
   d6336:	f103 0818 	add.w	r8, r3, #24
   d633a:	f851 3b04 	ldr.w	r3, [r1], #4
   d633e:	f845 3d20 	str.w	r3, [r5, #-32]!
   d6342:	a80b      	add	r0, sp, #44	; 0x2c
   d6344:	f7ff fbe0 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6348:	4629      	mov	r1, r5
   d634a:	4640      	mov	r0, r8
   d634c:	f7ff fd30 	bl	d5db0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6350:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6352:	a80b      	add	r0, sp, #44	; 0x2c
   d6354:	f7ff fbf7 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6358:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d635a:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d635c:	f1b8 0f00 	cmp.w	r8, #0
   d6360:	d114      	bne.n	d638c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d6362:	4b1d      	ldr	r3, [pc, #116]	; (d63d8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d6364:	9300      	str	r3, [sp, #0]
   d6366:	462a      	mov	r2, r5
   d6368:	4643      	mov	r3, r8
   d636a:	491c      	ldr	r1, [pc, #112]	; (d63dc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d636c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d6370:	2032      	movs	r0, #50	; 0x32
   d6372:	f7fe fd93 	bl	d4e9c <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d6376:	6833      	ldr	r3, [r6, #0]
   d6378:	4641      	mov	r1, r8
   d637a:	8818      	ldrh	r0, [r3, #0]
   d637c:	f7fe fbce 	bl	d4b1c <hal_ble_gap_disconnect>
   d6380:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d6382:	4817      	ldr	r0, [pc, #92]	; (d63e0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6384:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6388:	801a      	strh	r2, [r3, #0]
   d638a:	e01f      	b.n	d63cc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d638c:	4b15      	ldr	r3, [pc, #84]	; (d63e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d638e:	9300      	str	r3, [sp, #0]
   d6390:	462a      	mov	r2, r5
   d6392:	463b      	mov	r3, r7
   d6394:	4911      	ldr	r1, [pc, #68]	; (d63dc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6396:	970b      	str	r7, [sp, #44]	; 0x2c
   d6398:	4648      	mov	r0, r9
   d639a:	f7fe fd7f 	bl	d4e9c <log_message>
    if (automatic) {
   d639e:	b1a4      	cbz	r4, d63ca <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d63a0:	4631      	mov	r1, r6
   d63a2:	4628      	mov	r0, r5
   d63a4:	f7ff ff6e 	bl	d6284 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d63a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d63aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d63ac:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d63b0:	42a6      	cmp	r6, r4
   d63b2:	d005      	beq.n	d63c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d63b4:	4620      	mov	r0, r4
   d63b6:	2101      	movs	r1, #1
   d63b8:	f7ff f9f4 	bl	d57a4 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d63bc:	3408      	adds	r4, #8
   d63be:	e7f7      	b.n	d63b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d63c0:	4628      	mov	r0, r5
   d63c2:	f7fd fe86 	bl	d40d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d63c6:	2000      	movs	r0, #0
   d63c8:	e000      	b.n	d63cc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d63ca:	4620      	mov	r0, r4
}
   d63cc:	b013      	add	sp, #76	; 0x4c
   d63ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d63d2:	bf00      	nop
   d63d4:	000d5e31 	.word	0x000d5e31
   d63d8:	000d9044 	.word	0x000d9044
   d63dc:	000d8f80 	.word	0x000d8f80
   d63e0:	fffffefc 	.word	0xfffffefc
   d63e4:	000d9060 	.word	0x000d9060

000d63e8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d63e8:	b570      	push	{r4, r5, r6, lr}
   d63ea:	4604      	mov	r4, r0
   d63ec:	4615      	mov	r5, r2
   d63ee:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d63f0:	f7ff fbf2 	bl	d5bd8 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d63f4:	4633      	mov	r3, r6
   d63f6:	2200      	movs	r2, #0
   d63f8:	4629      	mov	r1, r5
   d63fa:	4620      	mov	r0, r4
   d63fc:	f7ff ff62 	bl	d62c4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d6400:	4620      	mov	r0, r4
   d6402:	bd70      	pop	{r4, r5, r6, pc}

000d6404 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6404:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6406:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6408:	6845      	ldr	r5, [r0, #4]
   d640a:	4668      	mov	r0, sp
   d640c:	f7ff fb83 	bl	d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6410:	6861      	ldr	r1, [r4, #4]
   d6412:	68a3      	ldr	r3, [r4, #8]
   d6414:	4299      	cmp	r1, r3
   d6416:	db05      	blt.n	d6424 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6418:	3101      	adds	r1, #1
   d641a:	4620      	mov	r0, r4
   d641c:	f7ff fef7 	bl	d620e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6420:	4606      	mov	r6, r0
   d6422:	b198      	cbz	r0, d644c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6424:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6426:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6428:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d642c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6430:	4629      	mov	r1, r5
   d6432:	f105 0008 	add.w	r0, r5, #8
   d6436:	f7ff fec0 	bl	d61ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d643a:	b11d      	cbz	r5, d6444 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d643c:	4669      	mov	r1, sp
   d643e:	4628      	mov	r0, r5
   d6440:	f7ff fb69 	bl	d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6444:	6863      	ldr	r3, [r4, #4]
   d6446:	3301      	adds	r3, #1
   d6448:	6063      	str	r3, [r4, #4]
   d644a:	2601      	movs	r6, #1
   d644c:	a801      	add	r0, sp, #4
   d644e:	f7ff fb7a 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6452:	4630      	mov	r0, r6
   d6454:	b002      	add	sp, #8
   d6456:	bd70      	pop	{r4, r5, r6, pc}

000d6458 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6458:	b510      	push	{r4, lr}
   d645a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d645c:	6840      	ldr	r0, [r0, #4]
   d645e:	b108      	cbz	r0, d6464 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6460:	f7fd fe1b 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6464:	4620      	mov	r0, r4
   d6466:	bd10      	pop	{r4, pc}

000d6468 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6468:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d646a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d646c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d646e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6472:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6476:	f001 fe1e 	bl	d80b6 <_ZN6StringD1Ev>
   d647a:	4668      	mov	r0, sp
   d647c:	f7ff ffec 	bl	d6458 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6480:	b003      	add	sp, #12
   d6482:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6488:	b538      	push	{r3, r4, r5, lr}
   d648a:	2300      	movs	r3, #0
   d648c:	4604      	mov	r4, r0
   d648e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6490:	2014      	movs	r0, #20
   d6492:	460d      	mov	r5, r1
   d6494:	f7fd fdff 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6498:	b128      	cbz	r0, d64a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d649a:	2301      	movs	r3, #1
   d649c:	6043      	str	r3, [r0, #4]
   d649e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d64a0:	4b02      	ldr	r3, [pc, #8]	; (d64ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d64a2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d64a4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d64a6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d64a8:	4620      	mov	r0, r4
   d64aa:	bd38      	pop	{r3, r4, r5, pc}
   d64ac:	000d8f34 	.word	0x000d8f34

000d64b0 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d64b0:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d64b2:	2500      	movs	r5, #0
   d64b4:	b086      	sub	sp, #24
   d64b6:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d64b8:	6045      	str	r5, [r0, #4]
   d64ba:	4604      	mov	r4, r0
   d64bc:	2054      	movs	r0, #84	; 0x54
   d64be:	f7fd fdea 	bl	d4096 <_Znwj>
   d64c2:	f8cd d010 	str.w	sp, [sp, #16]
   d64c6:	4606      	mov	r6, r0
   d64c8:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d64ca:	b108      	cbz	r0, d64d0 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d64cc:	f7ff f8e8 	bl	d56a0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d64d0:	4631      	mov	r1, r6
   d64d2:	ab01      	add	r3, sp, #4
   d64d4:	aa02      	add	r2, sp, #8
   d64d6:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d64d8:	9505      	str	r5, [sp, #20]
   d64da:	f7ff ffd5 	bl	d6488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64de:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d64e0:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d64e2:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64e4:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d64e6:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64e8:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d64ea:	f7ff fb2c 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d64ee:	a804      	add	r0, sp, #16
   d64f0:	f7ff ffb2 	bl	d6458 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d64f4:	6823      	ldr	r3, [r4, #0]
   d64f6:	b90b      	cbnz	r3, d64fc <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d64f8:	f7fe fdc6 	bl	d5088 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d64fc:	4620      	mov	r0, r4
   d64fe:	b006      	add	sp, #24
   d6500:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6504 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6508:	f8df 8104 	ldr.w	r8, [pc, #260]	; d6610 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d650c:	b08c      	sub	sp, #48	; 0x30
   d650e:	4605      	mov	r5, r0
   d6510:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6512:	2600      	movs	r6, #0
   d6514:	682b      	ldr	r3, [r5, #0]
   d6516:	429e      	cmp	r6, r3
   d6518:	d275      	bcs.n	d6606 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d651a:	a802      	add	r0, sp, #8
   d651c:	f7ff ffc8 	bl	d64b0 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d6520:	9b02      	ldr	r3, [sp, #8]
   d6522:	892a      	ldrh	r2, [r5, #8]
   d6524:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6526:	686b      	ldr	r3, [r5, #4]
   d6528:	9802      	ldr	r0, [sp, #8]
   d652a:	242a      	movs	r4, #42	; 0x2a
   d652c:	4374      	muls	r4, r6
   d652e:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6530:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6532:	7e5b      	ldrb	r3, [r3, #25]
   d6534:	f013 0f02 	tst.w	r3, #2

inline BleCharacteristicProperty& operator|=(BleCharacteristicProperty& lhs, BleCharacteristicProperty rhs) {
    lhs = static_cast<BleCharacteristicProperty> (
        static_cast<std::underlying_type<BleCharacteristicProperty>::type>(lhs) |
        static_cast<std::underlying_type<BleCharacteristicProperty>::type>(rhs)
    );
   d6538:	bf1e      	ittt	ne
   d653a:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d653e:	f043 0302 	orrne.w	r3, r3, #2
   d6542:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d6546:	686b      	ldr	r3, [r5, #4]
   d6548:	4423      	add	r3, r4
   d654a:	7e5b      	ldrb	r3, [r3, #25]
   d654c:	075b      	lsls	r3, r3, #29
   d654e:	bf42      	ittt	mi
   d6550:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6554:	f043 0304 	orrmi.w	r3, r3, #4
   d6558:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d655c:	686b      	ldr	r3, [r5, #4]
   d655e:	4423      	add	r3, r4
   d6560:	7e5b      	ldrb	r3, [r3, #25]
   d6562:	0719      	lsls	r1, r3, #28
   d6564:	bf42      	ittt	mi
   d6566:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d656a:	f043 0308 	orrmi.w	r3, r3, #8
   d656e:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6572:	686b      	ldr	r3, [r5, #4]
   d6574:	4423      	add	r3, r4
   d6576:	7e5b      	ldrb	r3, [r3, #25]
   d6578:	06da      	lsls	r2, r3, #27
   d657a:	bf42      	ittt	mi
   d657c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6580:	f043 0310 	orrmi.w	r3, r3, #16
   d6584:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6588:	686b      	ldr	r3, [r5, #4]
   d658a:	4423      	add	r3, r4
   d658c:	7e5b      	ldrb	r3, [r3, #25]
   d658e:	069b      	lsls	r3, r3, #26
   d6590:	bf42      	ittt	mi
   d6592:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6596:	f043 0320 	orrmi.w	r3, r3, #32
   d659a:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d659e:	6869      	ldr	r1, [r5, #4]
   d65a0:	4421      	add	r1, r4
   d65a2:	3104      	adds	r1, #4
   d65a4:	f7fe fe24 	bl	d51f0 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d65a8:	686a      	ldr	r2, [r5, #4]
   d65aa:	9b02      	ldr	r3, [sp, #8]
   d65ac:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d65ae:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d65b0:	8be2      	ldrh	r2, [r4, #30]
   d65b2:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d65b4:	8c22      	ldrh	r2, [r4, #32]
   d65b6:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d65b8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d65ba:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d65bc:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d65be:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d65c0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d65c2:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d65c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d65c6:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d65c8:	6838      	ldr	r0, [r7, #0]
   d65ca:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d65ce:	a804      	add	r0, sp, #16
   d65d0:	f7ff faa1 	bl	d5b16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d65d4:	4620      	mov	r0, r4
   d65d6:	a904      	add	r1, sp, #16
   d65d8:	f7ff ff14 	bl	d6404 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d65dc:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65de:	a805      	add	r0, sp, #20
   d65e0:	f7ff fab1 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d65e4:	b954      	cbnz	r4, d65fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d65e6:	2320      	movs	r3, #32
   d65e8:	9304      	str	r3, [sp, #16]
   d65ea:	f8cd 8000 	str.w	r8, [sp]
   d65ee:	4623      	mov	r3, r4
   d65f0:	aa04      	add	r2, sp, #16
   d65f2:	4906      	ldr	r1, [pc, #24]	; (d660c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d65f4:	9405      	str	r4, [sp, #20]
   d65f6:	2032      	movs	r0, #50	; 0x32
   d65f8:	f7fe fc50 	bl	d4e9c <log_message>
   d65fc:	a803      	add	r0, sp, #12
   d65fe:	f7ff faa2 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6602:	3601      	adds	r6, #1
   d6604:	e786      	b.n	d6514 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d6606:	b00c      	add	sp, #48	; 0x30
   d6608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d660c:	000d8f80 	.word	0x000d8f80
   d6610:	000d907d 	.word	0x000d907d

000d6614 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6614:	b510      	push	{r4, lr}
   d6616:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6618:	6840      	ldr	r0, [r0, #4]
   d661a:	b108      	cbz	r0, d6620 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d661c:	f7fd fd3d 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6620:	4620      	mov	r0, r4
   d6622:	bd10      	pop	{r4, pc}

000d6624 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6624:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6626:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6628:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d662a:	e88d 0009 	stmia.w	sp, {r0, r3}
   d662e:	4668      	mov	r0, sp
   d6630:	f7ff fff0 	bl	d6614 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6634:	b003      	add	sp, #12
   d6636:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d663c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d663c:	b538      	push	{r3, r4, r5, lr}
   d663e:	2300      	movs	r3, #0
   d6640:	4604      	mov	r4, r0
   d6642:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6644:	2014      	movs	r0, #20
   d6646:	460d      	mov	r5, r1
   d6648:	f7fd fd25 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d664c:	b128      	cbz	r0, d665a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d664e:	2301      	movs	r3, #1
   d6650:	6043      	str	r3, [r0, #4]
   d6652:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6654:	4b02      	ldr	r3, [pc, #8]	; (d6660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6656:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6658:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d665a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d665c:	4620      	mov	r0, r4
   d665e:	bd38      	pop	{r3, r4, r5, pc}
   d6660:	000d8f50 	.word	0x000d8f50

000d6664 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d6664:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6666:	2500      	movs	r5, #0
   d6668:	b086      	sub	sp, #24
   d666a:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d666c:	6045      	str	r5, [r0, #4]
   d666e:	4604      	mov	r4, r0
   d6670:	2018      	movs	r0, #24
   d6672:	f7fd fd10 	bl	d4096 <_Znwj>
   d6676:	f8cd d010 	str.w	sp, [sp, #16]
   d667a:	4606      	mov	r6, r0
   d667c:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d667e:	b118      	cbz	r0, d6688 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6680:	f7fe fd83 	bl	d518a <_ZN8particle7BleUuidC1Ev>
   d6684:	82b5      	strh	r5, [r6, #20]
   d6686:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6688:	4631      	mov	r1, r6
   d668a:	ab01      	add	r3, sp, #4
   d668c:	aa02      	add	r2, sp, #8
   d668e:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6690:	9505      	str	r5, [sp, #20]
   d6692:	f7ff ffd3 	bl	d663c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6696:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6698:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d669a:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d669c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d669e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d66a0:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d66a2:	f7ff fa50 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d66a6:	a804      	add	r0, sp, #16
   d66a8:	f7ff ffb4 	bl	d6614 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d66ac:	6823      	ldr	r3, [r4, #0]
   d66ae:	b90b      	cbnz	r3, d66b4 <_ZN8particle10BleServiceC1Ev+0x50>
   d66b0:	f7fe fcea 	bl	d5088 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d66b4:	4620      	mov	r0, r4
   d66b6:	b006      	add	sp, #24
   d66b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d66bc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d66bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d66c0:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6744 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d66c4:	b08c      	sub	sp, #48	; 0x30
   d66c6:	4606      	mov	r6, r0
   d66c8:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d66ca:	2500      	movs	r5, #0
   d66cc:	6833      	ldr	r3, [r6, #0]
   d66ce:	429d      	cmp	r5, r3
   d66d0:	d233      	bcs.n	d673a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d66d2:	a802      	add	r0, sp, #8
   d66d4:	f7ff ffc6 	bl	d6664 <_ZN8particle10BleServiceC1Ev>
   d66d8:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d66da:	6871      	ldr	r1, [r6, #4]
   d66dc:	9802      	ldr	r0, [sp, #8]
   d66de:	436c      	muls	r4, r5
   d66e0:	4421      	add	r1, r4
   d66e2:	3104      	adds	r1, #4
   d66e4:	f7fe fd84 	bl	d51f0 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d66e8:	6873      	ldr	r3, [r6, #4]
   d66ea:	9a02      	ldr	r2, [sp, #8]
   d66ec:	4423      	add	r3, r4
   d66ee:	a902      	add	r1, sp, #8
   d66f0:	8b1b      	ldrh	r3, [r3, #24]
   d66f2:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d66f4:	6873      	ldr	r3, [r6, #4]
   d66f6:	441c      	add	r4, r3
   d66f8:	8b63      	ldrh	r3, [r4, #26]
   d66fa:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d66fc:	6838      	ldr	r0, [r7, #0]
   d66fe:	f100 040c 	add.w	r4, r0, #12
   d6702:	a804      	add	r0, sp, #16
   d6704:	f7ff fa15 	bl	d5b32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d6708:	4620      	mov	r0, r4
   d670a:	a904      	add	r1, sp, #16
   d670c:	f7ff fd2b 	bl	d6166 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6710:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6712:	a805      	add	r0, sp, #20
   d6714:	f7ff fa17 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6718:	b954      	cbnz	r4, d6730 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d671a:	2320      	movs	r3, #32
   d671c:	9304      	str	r3, [sp, #16]
   d671e:	f8cd 8000 	str.w	r8, [sp]
   d6722:	4623      	mov	r3, r4
   d6724:	aa04      	add	r2, sp, #16
   d6726:	4906      	ldr	r1, [pc, #24]	; (d6740 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d6728:	9405      	str	r4, [sp, #20]
   d672a:	2032      	movs	r0, #50	; 0x32
   d672c:	f7fe fbb6 	bl	d4e9c <log_message>
   d6730:	a803      	add	r0, sp, #12
   d6732:	f7ff fa08 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6736:	3501      	adds	r5, #1
   d6738:	e7c8      	b.n	d66cc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d673a:	b00c      	add	sp, #48	; 0x30
   d673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6740:	000d8f80 	.word	0x000d8f80
   d6744:	000d90a9 	.word	0x000d90a9

000d6748 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6748:	4802      	ldr	r0, [pc, #8]	; (d6754 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d674a:	2300      	movs	r3, #0
   d674c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d674e:	f7fe ba55 	b.w	d4bfc <os_mutex_recursive_create>
   d6752:	bf00      	nop
   d6754:	2003e390 	.word	0x2003e390

000d6758 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6758:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d675a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d675c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d675e:	b113      	cbz	r3, d6766 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6760:	2203      	movs	r2, #3
   d6762:	4601      	mov	r1, r0
   d6764:	4798      	blx	r3
    }
   d6766:	4620      	mov	r0, r4
   d6768:	bd10      	pop	{r4, pc}

000d676a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d676a:	2200      	movs	r2, #0
   d676c:	4611      	mov	r1, r2
   d676e:	6840      	ldr	r0, [r0, #4]
   d6770:	f7fe bc10 	b.w	d4f94 <network_listening>

000d6774 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6774:	2200      	movs	r2, #0
   d6776:	4611      	mov	r1, r2
   d6778:	6840      	ldr	r0, [r0, #4]
   d677a:	f7fe bc1b 	b.w	d4fb4 <network_get_listen_timeout>

000d677e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d677e:	2200      	movs	r2, #0
   d6780:	6840      	ldr	r0, [r0, #4]
   d6782:	f7fe bc0f 	b.w	d4fa4 <network_set_listen_timeout>

000d6786 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6786:	2200      	movs	r2, #0
   d6788:	f081 0101 	eor.w	r1, r1, #1
   d678c:	6840      	ldr	r0, [r0, #4]
   d678e:	f7fe bbf9 	b.w	d4f84 <network_listen>

000d6792 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6792:	2300      	movs	r3, #0
   d6794:	461a      	mov	r2, r3
   d6796:	4619      	mov	r1, r3
   d6798:	6840      	ldr	r0, [r0, #4]
   d679a:	f7fe bbeb 	b.w	d4f74 <network_off>

000d679e <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d679e:	2300      	movs	r3, #0
   d67a0:	461a      	mov	r2, r3
   d67a2:	4619      	mov	r1, r3
   d67a4:	6840      	ldr	r0, [r0, #4]
   d67a6:	f7fe bbdd 	b.w	d4f64 <network_on>

000d67aa <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d67aa:	2200      	movs	r2, #0
   d67ac:	4611      	mov	r1, r2
   d67ae:	6840      	ldr	r0, [r0, #4]
   d67b0:	f7fe bbd0 	b.w	d4f54 <network_ready>

000d67b4 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d67b4:	2200      	movs	r2, #0
   d67b6:	4611      	mov	r1, r2
   d67b8:	6840      	ldr	r0, [r0, #4]
   d67ba:	f7fe bbbb 	b.w	d4f34 <network_connecting>

000d67be <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d67be:	2200      	movs	r2, #0
   d67c0:	2102      	movs	r1, #2
   d67c2:	6840      	ldr	r0, [r0, #4]
   d67c4:	f7fe bbbe 	b.w	d4f44 <network_disconnect>

000d67c8 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d67c8:	2300      	movs	r3, #0
   d67ca:	461a      	mov	r2, r3
   d67cc:	6840      	ldr	r0, [r0, #4]
   d67ce:	f7fe bba9 	b.w	d4f24 <network_connect>
	...

000d67d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d67d4:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d67d6:	2203      	movs	r2, #3
   d67d8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d67da:	4a02      	ldr	r2, [pc, #8]	; (d67e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d67dc:	601a      	str	r2, [r3, #0]
   d67de:	4770      	bx	lr
   d67e0:	2003e394 	.word	0x2003e394
   d67e4:	000d9128 	.word	0x000d9128

000d67e8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d67e8:	4770      	bx	lr

000d67ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67ec:	4606      	mov	r6, r0
   d67ee:	4615      	mov	r5, r2
   d67f0:	460c      	mov	r4, r1
   d67f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67f4:	42bc      	cmp	r4, r7
   d67f6:	d006      	beq.n	d6806 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67f8:	6833      	ldr	r3, [r6, #0]
   d67fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67fe:	689b      	ldr	r3, [r3, #8]
   d6800:	4630      	mov	r0, r6
   d6802:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6804:	e7f6      	b.n	d67f4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6806:	4628      	mov	r0, r5
   d6808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d680a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d680a:	2200      	movs	r2, #0
   d680c:	7c00      	ldrb	r0, [r0, #16]
   d680e:	f7fe ba4d 	b.w	d4cac <HAL_I2C_Write_Data>

000d6812 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6812:	2100      	movs	r1, #0
   d6814:	7c00      	ldrb	r0, [r0, #16]
   d6816:	f7fe ba51 	b.w	d4cbc <HAL_I2C_Available_Data>

000d681a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d681a:	2100      	movs	r1, #0
   d681c:	7c00      	ldrb	r0, [r0, #16]
   d681e:	f7fe ba55 	b.w	d4ccc <HAL_I2C_Read_Data>

000d6822 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6822:	2100      	movs	r1, #0
   d6824:	7c00      	ldrb	r0, [r0, #16]
   d6826:	f7fe ba59 	b.w	d4cdc <HAL_I2C_Peek_Data>

000d682a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d682a:	2100      	movs	r1, #0
   d682c:	7c00      	ldrb	r0, [r0, #16]
   d682e:	f7fe ba5d 	b.w	d4cec <HAL_I2C_Flush_Data>

000d6832 <_ZN7TwoWireD0Ev>:
   d6832:	b510      	push	{r4, lr}
   d6834:	2114      	movs	r1, #20
   d6836:	4604      	mov	r4, r0
   d6838:	f001 ffa9 	bl	d878e <_ZdlPvj>
   d683c:	4620      	mov	r0, r4
   d683e:	bd10      	pop	{r4, pc}

000d6840 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6840:	b510      	push	{r4, lr}
   d6842:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6848:	4608      	mov	r0, r1
   d684a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d684c:	2100      	movs	r1, #0
   d684e:	4b04      	ldr	r3, [pc, #16]	; (d6860 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6850:	7420      	strb	r0, [r4, #16]
   d6852:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6854:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6856:	f7fe fa59 	bl	d4d0c <HAL_I2C_Init>

}
   d685a:	4620      	mov	r0, r4
   d685c:	bd10      	pop	{r4, pc}
   d685e:	bf00      	nop
   d6860:	000d915c 	.word	0x000d915c

000d6864 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6864:	2100      	movs	r1, #0
   d6866:	7c00      	ldrb	r0, [r0, #16]
   d6868:	f7fe ba48 	b.w	d4cfc <HAL_I2C_Is_Enabled>

000d686c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d686c:	4770      	bx	lr

000d686e <_ZN9IPAddressD0Ev>:
   d686e:	b510      	push	{r4, lr}
   d6870:	2118      	movs	r1, #24
   d6872:	4604      	mov	r4, r0
   d6874:	f001 ff8b 	bl	d878e <_ZdlPvj>
   d6878:	4620      	mov	r0, r4
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d687c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d687e:	7d03      	ldrb	r3, [r0, #20]
   d6880:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6882:	b08d      	sub	sp, #52	; 0x34
   d6884:	460e      	mov	r6, r1
   d6886:	f100 0704 	add.w	r7, r0, #4
   d688a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d688e:	d002      	beq.n	d6896 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6890:	f100 0508 	add.w	r5, r0, #8
   d6894:	e018      	b.n	d68c8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6896:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6898:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d689a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d689e:	232f      	movs	r3, #47	; 0x2f
   d68a0:	462a      	mov	r2, r5
   d68a2:	200a      	movs	r0, #10
   d68a4:	f7fe fa3a 	bl	d4d1c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d68a8:	4628      	mov	r0, r5
   d68aa:	f002 f971 	bl	d8b90 <strlen>
   d68ae:	6833      	ldr	r3, [r6, #0]
   d68b0:	4602      	mov	r2, r0
   d68b2:	68db      	ldr	r3, [r3, #12]
   d68b4:	4629      	mov	r1, r5
   d68b6:	4630      	mov	r0, r6
   d68b8:	4798      	blx	r3
   d68ba:	e00f      	b.n	d68dc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d68bc:	b124      	cbz	r4, d68c8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d68be:	212e      	movs	r1, #46	; 0x2e
   d68c0:	4630      	mov	r0, r6
   d68c2:	f001 fb3d 	bl	d7f40 <_ZN5Print5printEc>
   d68c6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d68c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d68cc:	220a      	movs	r2, #10
   d68ce:	4630      	mov	r0, r6
   d68d0:	f001 fb72 	bl	d7fb8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68d4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68d6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68d8:	d1f0      	bne.n	d68bc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68da:	4620      	mov	r0, r4
    }
    return n;
}
   d68dc:	b00d      	add	sp, #52	; 0x34
   d68de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d68e0:	b510      	push	{r4, lr}
   d68e2:	4b05      	ldr	r3, [pc, #20]	; (d68f8 <_ZN9IPAddressC1Ev+0x18>)
   d68e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d68e6:	2211      	movs	r2, #17
   d68e8:	f840 3b04 	str.w	r3, [r0], #4
   d68ec:	2100      	movs	r1, #0
   d68ee:	f002 f8f4 	bl	d8ada <memset>
{
    clear();
}
   d68f2:	4620      	mov	r0, r4
   d68f4:	bd10      	pop	{r4, pc}
   d68f6:	bf00      	nop
   d68f8:	000d9184 	.word	0x000d9184

000d68fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d68fc:	4603      	mov	r3, r0
   d68fe:	4a07      	ldr	r2, [pc, #28]	; (d691c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6900:	b510      	push	{r4, lr}
   d6902:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6906:	f101 0210 	add.w	r2, r1, #16
   d690a:	f851 4b04 	ldr.w	r4, [r1], #4
   d690e:	f843 4b04 	str.w	r4, [r3], #4
   d6912:	4291      	cmp	r1, r2
   d6914:	d1f9      	bne.n	d690a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6916:	780a      	ldrb	r2, [r1, #0]
   d6918:	701a      	strb	r2, [r3, #0]
}
   d691a:	bd10      	pop	{r4, pc}
   d691c:	000d9184 	.word	0x000d9184

000d6920 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6920:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6922:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6926:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d692a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d692e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6932:	2304      	movs	r3, #4
   d6934:	6041      	str	r1, [r0, #4]
   d6936:	7503      	strb	r3, [r0, #20]
   d6938:	bd10      	pop	{r4, pc}

000d693a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d693a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d693c:	780d      	ldrb	r5, [r1, #0]
   d693e:	788b      	ldrb	r3, [r1, #2]
   d6940:	784a      	ldrb	r2, [r1, #1]
   d6942:	78c9      	ldrb	r1, [r1, #3]
   d6944:	9100      	str	r1, [sp, #0]
   d6946:	4629      	mov	r1, r5
   d6948:	f7ff ffea 	bl	d6920 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d694c:	b003      	add	sp, #12
   d694e:	bd30      	pop	{r4, r5, pc}

000d6950 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d6950:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d6954:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6956:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d695a:	2901      	cmp	r1, #1
   d695c:	4610      	mov	r0, r2
   d695e:	d104      	bne.n	d696a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d6960:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d6964:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d6968:	e004      	b.n	d6974 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d696a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d696c:	bf04      	itt	eq
   d696e:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d6972:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d6974:	3b01      	subs	r3, #1
   d6976:	f102 0210 	add.w	r2, r2, #16
   d697a:	d1ec      	bne.n	d6956 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d697c:	4770      	bx	lr

000d697e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d697e:	b40e      	push	{r1, r2, r3}
   d6980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6984:	b087      	sub	sp, #28
   d6986:	af00      	add	r7, sp, #0
   d6988:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d698c:	4605      	mov	r5, r0
   d698e:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d6992:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6994:	4623      	mov	r3, r4
   d6996:	4632      	mov	r2, r6
   d6998:	2110      	movs	r1, #16
   d699a:	f107 0008 	add.w	r0, r7, #8
   d699e:	f7fe fb29 	bl	d4ff4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d69a2:	280f      	cmp	r0, #15
   d69a4:	d916      	bls.n	d69d4 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d69a6:	f100 0308 	add.w	r3, r0, #8
   d69aa:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d69ae:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d69b0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d69b4:	4632      	mov	r2, r6
   d69b6:	1c41      	adds	r1, r0, #1
   d69b8:	4623      	mov	r3, r4
   d69ba:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d69bc:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d69be:	f7fe fb19 	bl	d4ff4 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d69c2:	1e02      	subs	r2, r0, #0
   d69c4:	dd04      	ble.n	d69d0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d69c6:	682b      	ldr	r3, [r5, #0]
   d69c8:	4669      	mov	r1, sp
   d69ca:	689b      	ldr	r3, [r3, #8]
   d69cc:	4628      	mov	r0, r5
   d69ce:	4798      	blx	r3
   d69d0:	46c5      	mov	sp, r8
   d69d2:	e007      	b.n	d69e4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d69d4:	b130      	cbz	r0, d69e4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d69d6:	682b      	ldr	r3, [r5, #0]
   d69d8:	4602      	mov	r2, r0
   d69da:	689b      	ldr	r3, [r3, #8]
   d69dc:	f107 0108 	add.w	r1, r7, #8
   d69e0:	4628      	mov	r0, r5
   d69e2:	4798      	blx	r3
    }
}
   d69e4:	371c      	adds	r7, #28
   d69e6:	46bd      	mov	sp, r7
   d69e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d69ec:	b003      	add	sp, #12
   d69ee:	4770      	bx	lr

000d69f0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d69f0:	b513      	push	{r0, r1, r4, lr}
   d69f2:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d69f4:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d69f6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d69fa:	6894      	ldr	r4, [r2, #8]
   d69fc:	4619      	mov	r1, r3
   d69fe:	2201      	movs	r2, #1
   d6a00:	47a0      	blx	r4
}
   d6a02:	b002      	add	sp, #8
   d6a04:	bd10      	pop	{r4, pc}

000d6a06 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d6a06:	6883      	ldr	r3, [r0, #8]
   d6a08:	b1fb      	cbz	r3, d6a4a <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d6a0a:	781a      	ldrb	r2, [r3, #0]
   d6a0c:	2a03      	cmp	r2, #3
   d6a0e:	d81a      	bhi.n	d6a46 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6a10:	e8df f002 	tbb	[pc, r2]
   d6a14:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d6a18:	2005      	movs	r0, #5
   d6a1a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6a1c:	6802      	ldr	r2, [r0, #0]
   d6a1e:	685b      	ldr	r3, [r3, #4]
   d6a20:	6852      	ldr	r2, [r2, #4]
   d6a22:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6a24:	282d      	cmp	r0, #45	; 0x2d
   d6a26:	d014      	beq.n	d6a52 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6a28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6a2c:	2b09      	cmp	r3, #9
   d6a2e:	d910      	bls.n	d6a52 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6a30:	2874      	cmp	r0, #116	; 0x74
   d6a32:	d010      	beq.n	d6a56 <_ZNK5spark9JSONValue4typeEv+0x50>
   d6a34:	2866      	cmp	r0, #102	; 0x66
   d6a36:	d00e      	beq.n	d6a56 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d6a38:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6a3c:	4258      	negs	r0, r3
   d6a3e:	4158      	adcs	r0, r3
   d6a40:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d6a42:	2006      	movs	r0, #6
   d6a44:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d6a46:	2000      	movs	r0, #0
   d6a48:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d6a4a:	4618      	mov	r0, r3
   d6a4c:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d6a4e:	2004      	movs	r0, #4
   d6a50:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d6a52:	2003      	movs	r0, #3
   d6a54:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d6a56:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d6a58:	4770      	bx	lr

000d6a5a <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d6a5a:	b510      	push	{r4, lr}
   d6a5c:	4604      	mov	r4, r0
    switch (type()) {
   d6a5e:	f7ff ffd2 	bl	d6a06 <_ZNK5spark9JSONValue4typeEv>
   d6a62:	2802      	cmp	r0, #2
   d6a64:	d00d      	beq.n	d6a82 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d6a66:	d316      	bcc.n	d6a96 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d6a68:	2804      	cmp	r0, #4
   d6a6a:	d814      	bhi.n	d6a96 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d6a6c:	6822      	ldr	r2, [r4, #0]
   d6a6e:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d6a70:	6850      	ldr	r0, [r2, #4]
   d6a72:	685b      	ldr	r3, [r3, #4]
   d6a74:	220a      	movs	r2, #10
   d6a76:	2100      	movs	r1, #0
   d6a78:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d6a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d6a7e:	f002 b949 	b.w	d8d14 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d6a82:	6822      	ldr	r2, [r4, #0]
   d6a84:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6a86:	6852      	ldr	r2, [r2, #4]
   d6a88:	685b      	ldr	r3, [r3, #4]
   d6a8a:	5cd0      	ldrb	r0, [r2, r3]
   d6a8c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6a90:	4258      	negs	r0, r3
   d6a92:	4158      	adcs	r0, r3
   d6a94:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d6a96:	2000      	movs	r0, #0
    }
}
   d6a98:	bd10      	pop	{r4, pc}

000d6a9a <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6a9a:	b510      	push	{r4, lr}
    if (!n_) {
   d6a9c:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6a9e:	4604      	mov	r4, r0
    if (!n_) {
   d6aa0:	b15b      	cbz	r3, d6aba <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d6aa2:	6880      	ldr	r0, [r0, #8]
   d6aa4:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6aa6:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d6aa8:	3010      	adds	r0, #16
   d6aaa:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6aac:	6120      	str	r0, [r4, #16]
    --n_;
   d6aae:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6ab0:	b12b      	cbz	r3, d6abe <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d6ab2:	f7ff ff4d 	bl	d6950 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6ab6:	60a0      	str	r0, [r4, #8]
   d6ab8:	e001      	b.n	d6abe <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d6aba:	4618      	mov	r0, r3
   d6abc:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d6abe:	2001      	movs	r0, #1
}
   d6ac0:	bd10      	pop	{r4, pc}

000d6ac2 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6ac2:	b510      	push	{r4, lr}
    write('}');
   d6ac4:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6ac6:	4604      	mov	r4, r0
    write('}');
   d6ac8:	f7ff ff92 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6acc:	2301      	movs	r3, #1
   d6ace:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	bd10      	pop	{r4, pc}

000d6ad4 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6ad4:	b508      	push	{r3, lr}
    switch (state_) {
   d6ad6:	7903      	ldrb	r3, [r0, #4]
   d6ad8:	2b01      	cmp	r3, #1
   d6ada:	d002      	beq.n	d6ae2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6adc:	2b02      	cmp	r3, #2
   d6ade:	d002      	beq.n	d6ae6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d6ae0:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d6ae2:	212c      	movs	r1, #44	; 0x2c
   d6ae4:	e000      	b.n	d6ae8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d6ae6:	213a      	movs	r1, #58	; 0x3a
   d6ae8:	f7ff ff82 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
   d6aec:	bd08      	pop	{r3, pc}

000d6aee <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6aee:	b510      	push	{r4, lr}
   d6af0:	4604      	mov	r4, r0
    writeSeparator();
   d6af2:	f7ff ffef 	bl	d6ad4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6af6:	4620      	mov	r0, r4
   d6af8:	217b      	movs	r1, #123	; 0x7b
   d6afa:	f7ff ff79 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6afe:	2300      	movs	r3, #0
   d6b00:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6b02:	4620      	mov	r0, r4
   d6b04:	bd10      	pop	{r4, pc}
	...

000d6b08 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6b08:	b538      	push	{r3, r4, r5, lr}
   d6b0a:	4604      	mov	r4, r0
   d6b0c:	460d      	mov	r5, r1
    writeSeparator();
   d6b0e:	f7ff ffe1 	bl	d6ad4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6b12:	6823      	ldr	r3, [r4, #0]
   d6b14:	4904      	ldr	r1, [pc, #16]	; (d6b28 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6b16:	68db      	ldr	r3, [r3, #12]
   d6b18:	4620      	mov	r0, r4
   d6b1a:	462a      	mov	r2, r5
   d6b1c:	4798      	blx	r3
    state_ = NEXT;
   d6b1e:	2301      	movs	r3, #1
   d6b20:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6b22:	4620      	mov	r0, r4
   d6b24:	bd38      	pop	{r3, r4, r5, pc}
   d6b26:	bf00      	nop
   d6b28:	000d8e36 	.word	0x000d8e36

000d6b2c <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6b2c:	b538      	push	{r3, r4, r5, lr}
   d6b2e:	4604      	mov	r4, r0
   d6b30:	460d      	mov	r5, r1
    writeSeparator();
   d6b32:	f7ff ffcf 	bl	d6ad4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6b36:	6823      	ldr	r3, [r4, #0]
   d6b38:	4904      	ldr	r1, [pc, #16]	; (d6b4c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6b3a:	68db      	ldr	r3, [r3, #12]
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	462a      	mov	r2, r5
   d6b40:	4798      	blx	r3
    state_ = NEXT;
   d6b42:	2301      	movs	r3, #1
   d6b44:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6b46:	4620      	mov	r0, r4
   d6b48:	bd38      	pop	{r3, r4, r5, pc}
   d6b4a:	bf00      	nop
   d6b4c:	000d8d9a 	.word	0x000d8d9a

000d6b50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b52:	460d      	mov	r5, r1
   d6b54:	4617      	mov	r7, r2
    write('"');
   d6b56:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6b58:	4604      	mov	r4, r0
   d6b5a:	442f      	add	r7, r5
    write('"');
   d6b5c:	f7ff ff48 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
   d6b60:	462a      	mov	r2, r5
    const char* const end = str + size;
   d6b62:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d6b64:	42ba      	cmp	r2, r7
   d6b66:	d038      	beq.n	d6bda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d6b68:	4616      	mov	r6, r2
   d6b6a:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6b6e:	2d22      	cmp	r5, #34	; 0x22
   d6b70:	d003      	beq.n	d6b7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d6b72:	2d5c      	cmp	r5, #92	; 0x5c
   d6b74:	d001      	beq.n	d6b7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d6b76:	2d1f      	cmp	r5, #31
   d6b78:	d82d      	bhi.n	d6bd6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d6b7a:	6823      	ldr	r3, [r4, #0]
   d6b7c:	1a52      	subs	r2, r2, r1
   d6b7e:	689b      	ldr	r3, [r3, #8]
   d6b80:	4620      	mov	r0, r4
   d6b82:	4798      	blx	r3
            write('\\');
   d6b84:	215c      	movs	r1, #92	; 0x5c
   d6b86:	4620      	mov	r0, r4
   d6b88:	f7ff ff32 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6b8c:	2d0c      	cmp	r5, #12
   d6b8e:	d019      	beq.n	d6bc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d6b90:	d807      	bhi.n	d6ba2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d6b92:	2d09      	cmp	r5, #9
   d6b94:	d00f      	beq.n	d6bb6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d6b96:	2d0a      	cmp	r5, #10
   d6b98:	d012      	beq.n	d6bc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d6b9a:	2d08      	cmp	r5, #8
   d6b9c:	d114      	bne.n	d6bc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6b9e:	2162      	movs	r1, #98	; 0x62
   d6ba0:	e00a      	b.n	d6bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d6ba2:	2d22      	cmp	r5, #34	; 0x22
   d6ba4:	d005      	beq.n	d6bb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6ba6:	2d5c      	cmp	r5, #92	; 0x5c
   d6ba8:	d003      	beq.n	d6bb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6baa:	2d0d      	cmp	r5, #13
   d6bac:	d10c      	bne.n	d6bc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d6bae:	2172      	movs	r1, #114	; 0x72
   d6bb0:	e002      	b.n	d6bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d6bb2:	4629      	mov	r1, r5
   d6bb4:	e000      	b.n	d6bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d6bb6:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6bb8:	4620      	mov	r0, r4
   d6bba:	f7ff ff19 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
                break;
   d6bbe:	e009      	b.n	d6bd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d6bc0:	216e      	movs	r1, #110	; 0x6e
   d6bc2:	e7f9      	b.n	d6bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6bc4:	2166      	movs	r1, #102	; 0x66
   d6bc6:	e7f7      	b.n	d6bb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6bc8:	6823      	ldr	r3, [r4, #0]
   d6bca:	490a      	ldr	r1, [pc, #40]	; (d6bf4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d6bcc:	68db      	ldr	r3, [r3, #12]
   d6bce:	462a      	mov	r2, r5
   d6bd0:	4620      	mov	r0, r4
   d6bd2:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6bd4:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d6bd6:	4632      	mov	r2, r6
   d6bd8:	e7c4      	b.n	d6b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d6bda:	4291      	cmp	r1, r2
   d6bdc:	d004      	beq.n	d6be8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d6bde:	6823      	ldr	r3, [r4, #0]
   d6be0:	1a52      	subs	r2, r2, r1
   d6be2:	689d      	ldr	r5, [r3, #8]
   d6be4:	4620      	mov	r0, r4
   d6be6:	47a8      	blx	r5
    }
    write('"');
   d6be8:	2122      	movs	r1, #34	; 0x22
   d6bea:	4620      	mov	r0, r4
   d6bec:	f7ff ff00 	bl	d69f0 <_ZN5spark10JSONWriter5writeEc>
   d6bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6bf2:	bf00      	nop
   d6bf4:	000d91a7 	.word	0x000d91a7

000d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6bf8:	b570      	push	{r4, r5, r6, lr}
   d6bfa:	4604      	mov	r4, r0
   d6bfc:	460d      	mov	r5, r1
   d6bfe:	4616      	mov	r6, r2
    writeSeparator();
   d6c00:	f7ff ff68 	bl	d6ad4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6c04:	4620      	mov	r0, r4
   d6c06:	4632      	mov	r2, r6
   d6c08:	4629      	mov	r1, r5
   d6c0a:	f7ff ffa1 	bl	d6b50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6c0e:	2302      	movs	r3, #2
   d6c10:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6c12:	4620      	mov	r0, r4
   d6c14:	bd70      	pop	{r4, r5, r6, pc}

000d6c16 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6c16:	b570      	push	{r4, r5, r6, lr}
   d6c18:	4604      	mov	r4, r0
   d6c1a:	460d      	mov	r5, r1
   d6c1c:	4616      	mov	r6, r2
    writeSeparator();
   d6c1e:	f7ff ff59 	bl	d6ad4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6c22:	4620      	mov	r0, r4
   d6c24:	4632      	mov	r2, r6
   d6c26:	4629      	mov	r1, r5
   d6c28:	f7ff ff92 	bl	d6b50 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6c2c:	2301      	movs	r3, #1
   d6c2e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6c30:	4620      	mov	r0, r4
   d6c32:	bd70      	pop	{r4, r5, r6, pc}

000d6c34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c34:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6c36:	2300      	movs	r3, #0
   d6c38:	4604      	mov	r4, r0
   d6c3a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c3c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d6c3e:	4810      	ldr	r0, [pc, #64]	; (d6c80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d6c40:	60a0      	str	r0, [r4, #8]
   d6c42:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6c44:	b1d1      	cbz	r1, d6c7c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d6c46:	780b      	ldrb	r3, [r1, #0]
   d6c48:	2b03      	cmp	r3, #3
   d6c4a:	d006      	beq.n	d6c5a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6c4c:	b9b3      	cbnz	r3, d6c7c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6c4e:	6813      	ldr	r3, [r2, #0]
   d6c50:	6858      	ldr	r0, [r3, #4]
   d6c52:	684b      	ldr	r3, [r1, #4]
   d6c54:	5cc3      	ldrb	r3, [r0, r3]
   d6c56:	2b6e      	cmp	r3, #110	; 0x6e
   d6c58:	d008      	beq.n	d6c6c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d6c5a:	6813      	ldr	r3, [r2, #0]
   d6c5c:	6858      	ldr	r0, [r3, #4]
   d6c5e:	684b      	ldr	r3, [r1, #4]
   d6c60:	4403      	add	r3, r0
   d6c62:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d6c64:	688b      	ldr	r3, [r1, #8]
   d6c66:	6849      	ldr	r1, [r1, #4]
   d6c68:	1a5b      	subs	r3, r3, r1
   d6c6a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6c6c:	4611      	mov	r1, r2
   d6c6e:	4620      	mov	r0, r4
   d6c70:	f851 3b04 	ldr.w	r3, [r1], #4
   d6c74:	f840 3b04 	str.w	r3, [r0], #4
   d6c78:	f7fe ffe6 	bl	d5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	bd10      	pop	{r4, pc}
   d6c80:	000d9299 	.word	0x000d9299

000d6c84 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6c84:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c86:	b510      	push	{r4, lr}
   d6c88:	4604      	mov	r4, r0
   d6c8a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c8c:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d6c8e:	6083      	str	r3, [r0, #8]
   d6c90:	60c3      	str	r3, [r0, #12]
   d6c92:	6103      	str	r3, [r0, #16]
   d6c94:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d6c96:	b171      	cbz	r1, d6cb6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d6c98:	780b      	ldrb	r3, [r1, #0]
   d6c9a:	2b01      	cmp	r3, #1
   d6c9c:	d10b      	bne.n	d6cb6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d6c9e:	f101 0310 	add.w	r3, r1, #16
   d6ca2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6ca4:	68cb      	ldr	r3, [r1, #12]
   d6ca6:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6ca8:	4611      	mov	r1, r2
   d6caa:	f851 3b04 	ldr.w	r3, [r1], #4
   d6cae:	f840 3b04 	str.w	r3, [r0], #4
   d6cb2:	f7fe ffc9 	bl	d5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d6cb6:	4620      	mov	r0, r4
   d6cb8:	bd10      	pop	{r4, pc}

000d6cba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6cba:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6cbc:	b510      	push	{r4, lr}
   d6cbe:	4604      	mov	r4, r0
   d6cc0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6cc2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6cc4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d6cc6:	b131      	cbz	r1, d6cd6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6cc8:	4611      	mov	r1, r2
   d6cca:	f851 3b04 	ldr.w	r3, [r1], #4
   d6cce:	f840 3b04 	str.w	r3, [r0], #4
   d6cd2:	f7fe ffb9 	bl	d5c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	bd10      	pop	{r4, pc}

000d6cda <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6cda:	6880      	ldr	r0, [r0, #8]
   d6cdc:	6803      	ldr	r3, [r0, #0]
   d6cde:	68db      	ldr	r3, [r3, #12]
   d6ce0:	4718      	bx	r3

000d6ce2 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6ce2:	4770      	bx	lr

000d6ce4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6ce4:	b119      	cbz	r1, d6cee <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6ce6:	680b      	ldr	r3, [r1, #0]
   d6ce8:	4608      	mov	r0, r1
   d6cea:	685b      	ldr	r3, [r3, #4]
   d6cec:	4718      	bx	r3
   d6cee:	4770      	bx	lr

000d6cf0 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6cf0:	b119      	cbz	r1, d6cfa <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6cf2:	680b      	ldr	r3, [r1, #0]
   d6cf4:	4608      	mov	r0, r1
   d6cf6:	685b      	ldr	r3, [r3, #4]
   d6cf8:	4718      	bx	r3
   d6cfa:	4770      	bx	lr

000d6cfc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6cfc:	4770      	bx	lr

000d6cfe <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6cfe:	4770      	bx	lr

000d6d00 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6d00:	4770      	bx	lr

000d6d02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6d02:	b538      	push	{r3, r4, r5, lr}
   d6d04:	4604      	mov	r4, r0
   d6d06:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6d08:	6800      	ldr	r0, [r0, #0]
   d6d0a:	212e      	movs	r1, #46	; 0x2e
   d6d0c:	f001 ff24 	bl	d8b58 <strchrnul>
    size = s - category;
   d6d10:	6823      	ldr	r3, [r4, #0]
   d6d12:	1ac3      	subs	r3, r0, r3
   d6d14:	602b      	str	r3, [r5, #0]
    if (size) {
   d6d16:	b123      	cbz	r3, d6d22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6d18:	7803      	ldrb	r3, [r0, #0]
   d6d1a:	b103      	cbz	r3, d6d1e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6d1c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d1e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d20:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d6d22:	4618      	mov	r0, r3
}
   d6d24:	bd38      	pop	{r3, r4, r5, pc}

000d6d26 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6d26:	b510      	push	{r4, lr}
   d6d28:	210c      	movs	r1, #12
   d6d2a:	4604      	mov	r4, r0
   d6d2c:	f001 fd2f 	bl	d878e <_ZdlPvj>
   d6d30:	4620      	mov	r0, r4
   d6d32:	bd10      	pop	{r4, pc}

000d6d34 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6d34:	b510      	push	{r4, lr}
   d6d36:	2104      	movs	r1, #4
   d6d38:	4604      	mov	r4, r0
   d6d3a:	f001 fd28 	bl	d878e <_ZdlPvj>
   d6d3e:	4620      	mov	r0, r4
   d6d40:	bd10      	pop	{r4, pc}

000d6d42 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6d42:	b510      	push	{r4, lr}
   d6d44:	2104      	movs	r1, #4
   d6d46:	4604      	mov	r4, r0
   d6d48:	f001 fd21 	bl	d878e <_ZdlPvj>
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	bd10      	pop	{r4, pc}

000d6d50 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6d50:	b538      	push	{r3, r4, r5, lr}
   d6d52:	460c      	mov	r4, r1
   d6d54:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6d56:	f001 fba3 	bl	d84a0 <_Z16_fetch_usbserialv>
   d6d5a:	4284      	cmp	r4, r0
   d6d5c:	d00d      	beq.n	d6d7a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6d5e:	f001 fb13 	bl	d8388 <_Z22__fetch_global_Serial1v>
   d6d62:	4284      	cmp	r4, r0
   d6d64:	d105      	bne.n	d6d72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d6d66:	f001 fb0f 	bl	d8388 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d6d6e:	f001 bb04 	b.w	d837a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d6d72:	4621      	mov	r1, r4
   d6d74:	4628      	mov	r0, r5
   d6d76:	f7ff ffbb 	bl	d6cf0 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d6d7a:	bd38      	pop	{r3, r4, r5, pc}

000d6d7c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d6d7c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6d7e:	f001 fef5 	bl	d8b6c <strcmp>
}
   d6d82:	fab0 f080 	clz	r0, r0
   d6d86:	0940      	lsrs	r0, r0, #5
   d6d88:	bd08      	pop	{r3, pc}

000d6d8a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6d8a:	b538      	push	{r3, r4, r5, lr}
   d6d8c:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d6d8e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6d90:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6d92:	f001 fefd 	bl	d8b90 <strlen>
   d6d96:	4621      	mov	r1, r4
   d6d98:	4602      	mov	r2, r0
   d6d9a:	4628      	mov	r0, r5
}
   d6d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6da0:	f7ff bf39 	b.w	d6c16 <_ZN5spark10JSONWriter5valueEPKcj>

000d6da4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6da4:	6800      	ldr	r0, [r0, #0]
   d6da6:	f7fd bf31 	b.w	d4c0c <os_mutex_recursive_lock>

000d6daa <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6daa:	b570      	push	{r4, r5, r6, lr}
   d6dac:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6dae:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6db0:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6db2:	f001 feed 	bl	d8b90 <strlen>
   d6db6:	6823      	ldr	r3, [r4, #0]
   d6db8:	4602      	mov	r2, r0
   d6dba:	4629      	mov	r1, r5
   d6dbc:	4620      	mov	r0, r4
   d6dbe:	68db      	ldr	r3, [r3, #12]
}
   d6dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6dc4:	4718      	bx	r3

000d6dc6 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6dc6:	b513      	push	{r0, r1, r4, lr}
   d6dc8:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6dca:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6dcc:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6dd0:	68d4      	ldr	r4, [r2, #12]
   d6dd2:	4619      	mov	r1, r3
   d6dd4:	2201      	movs	r2, #1
   d6dd6:	47a0      	blx	r4
}
   d6dd8:	b002      	add	sp, #8
   d6dda:	bd10      	pop	{r4, pc}

000d6ddc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6de0:	6845      	ldr	r5, [r0, #4]
   d6de2:	6807      	ldr	r7, [r0, #0]
   d6de4:	b085      	sub	sp, #20
   d6de6:	4691      	mov	r9, r2
   d6de8:	2214      	movs	r2, #20
   d6dea:	4355      	muls	r5, r2
   d6dec:	9301      	str	r3, [sp, #4]
   d6dee:	10ab      	asrs	r3, r5, #2
   d6df0:	4d19      	ldr	r5, [pc, #100]	; (d6e58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6df2:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6df4:	435d      	muls	r5, r3
   d6df6:	468b      	mov	fp, r1
   d6df8:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6dfa:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6dfc:	2d00      	cmp	r5, #0
   d6dfe:	9303      	str	r3, [sp, #12]
   d6e00:	dd23      	ble.n	d6e4a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6e02:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6e04:	106e      	asrs	r6, r5, #1
   d6e06:	fb03 f006 	mul.w	r0, r3, r6
   d6e0a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6e0e:	464a      	mov	r2, r9
   d6e10:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6e14:	5820      	ldr	r0, [r4, r0]
   d6e16:	45d1      	cmp	r9, sl
   d6e18:	bf28      	it	cs
   d6e1a:	4652      	movcs	r2, sl
   d6e1c:	4659      	mov	r1, fp
   d6e1e:	f001 febf 	bl	d8ba0 <strncmp>
                if (cmp == 0) {
   d6e22:	9b03      	ldr	r3, [sp, #12]
   d6e24:	b948      	cbnz	r0, d6e3a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d6e26:	45d1      	cmp	r9, sl
   d6e28:	d103      	bne.n	d6e32 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6e2a:	9a01      	ldr	r2, [sp, #4]
   d6e2c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6e2e:	4635      	mov	r5, r6
   d6e30:	e7e4      	b.n	d6dfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d6e32:	bf8c      	ite	hi
   d6e34:	2001      	movhi	r0, #1
   d6e36:	2000      	movls	r0, #0
   d6e38:	e000      	b.n	d6e3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d6e3a:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d6e3c:	2800      	cmp	r0, #0
   d6e3e:	d0f6      	beq.n	d6e2e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6e40:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d6e42:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d6e46:	3e01      	subs	r6, #1
   d6e48:	e7f1      	b.n	d6e2e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d6e4a:	1be4      	subs	r4, r4, r7
}
   d6e4c:	4802      	ldr	r0, [pc, #8]	; (d6e58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d6e4e:	10a4      	asrs	r4, r4, #2
}
   d6e50:	4360      	muls	r0, r4
   d6e52:	b005      	add	sp, #20
   d6e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e58:	cccccccd 	.word	0xcccccccd

000d6e5c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e5e:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d6e60:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6e62:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d6e64:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d6e66:	b313      	cbz	r3, d6eae <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d6e68:	b309      	cbz	r1, d6eae <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6e6a:	af04      	add	r7, sp, #16
   d6e6c:	2300      	movs	r3, #0
   d6e6e:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6e72:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6e76:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6e78:	4639      	mov	r1, r7
   d6e7a:	a801      	add	r0, sp, #4
   d6e7c:	f7ff ff41 	bl	d6d02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6e80:	4601      	mov	r1, r0
   d6e82:	b1a0      	cbz	r0, d6eae <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6e84:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e86:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6e88:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	f7ff ffa5 	bl	d6ddc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6e92:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6e96:	b153      	cbz	r3, d6eae <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6e98:	6823      	ldr	r3, [r4, #0]
   d6e9a:	2414      	movs	r4, #20
   d6e9c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6ea0:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6ea2:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6ea6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6ea8:	bfa8      	it	ge
   d6eaa:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6eac:	e7e4      	b.n	d6e78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d6eae:	4630      	mov	r0, r6
   d6eb0:	b005      	add	sp, #20
   d6eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6eb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6eb4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6eb6:	4c09      	ldr	r4, [pc, #36]	; (d6edc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6eb8:	6823      	ldr	r3, [r4, #0]
   d6eba:	07db      	lsls	r3, r3, #31
   d6ebc:	d40b      	bmi.n	d6ed6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	f7fd f8fa 	bl	d40b8 <__cxa_guard_acquire>
   d6ec4:	b138      	cbz	r0, d6ed6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6ec6:	4620      	mov	r0, r4
   d6ec8:	f7fd f8fb 	bl	d40c2 <__cxa_guard_release>
   d6ecc:	4a04      	ldr	r2, [pc, #16]	; (d6ee0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6ece:	4905      	ldr	r1, [pc, #20]	; (d6ee4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6ed0:	4805      	ldr	r0, [pc, #20]	; (d6ee8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6ed2:	f001 fc57 	bl	d8784 <__aeabi_atexit>
    return &factory;
}
   d6ed6:	4804      	ldr	r0, [pc, #16]	; (d6ee8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6ed8:	bd10      	pop	{r4, pc}
   d6eda:	bf00      	nop
   d6edc:	2003e39c 	.word	0x2003e39c
   d6ee0:	2003d238 	.word	0x2003d238
   d6ee4:	000d6cff 	.word	0x000d6cff
   d6ee8:	2003d1c8 	.word	0x2003d1c8

000d6eec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6eec:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6eee:	4c09      	ldr	r4, [pc, #36]	; (d6f14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6ef0:	6823      	ldr	r3, [r4, #0]
   d6ef2:	07db      	lsls	r3, r3, #31
   d6ef4:	d40b      	bmi.n	d6f0e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6ef6:	4620      	mov	r0, r4
   d6ef8:	f7fd f8de 	bl	d40b8 <__cxa_guard_acquire>
   d6efc:	b138      	cbz	r0, d6f0e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6efe:	4620      	mov	r0, r4
   d6f00:	f7fd f8df 	bl	d40c2 <__cxa_guard_release>
   d6f04:	4a04      	ldr	r2, [pc, #16]	; (d6f18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6f06:	4905      	ldr	r1, [pc, #20]	; (d6f1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6f08:	4805      	ldr	r0, [pc, #20]	; (d6f20 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6f0a:	f001 fc3b 	bl	d8784 <__aeabi_atexit>
    return &factory;
}
   d6f0e:	4804      	ldr	r0, [pc, #16]	; (d6f20 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6f10:	bd10      	pop	{r4, pc}
   d6f12:	bf00      	nop
   d6f14:	2003e3cc 	.word	0x2003e3cc
   d6f18:	2003d238 	.word	0x2003d238
   d6f1c:	000d6cfd 	.word	0x000d6cfd
   d6f20:	2003d1c4 	.word	0x2003d1c4

000d6f24 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6f24:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f26:	2500      	movs	r5, #0
   d6f28:	4604      	mov	r4, r0
   d6f2a:	6005      	str	r5, [r0, #0]
   d6f2c:	6045      	str	r5, [r0, #4]
   d6f2e:	6085      	str	r5, [r0, #8]
   d6f30:	6105      	str	r5, [r0, #16]
   d6f32:	6145      	str	r5, [r0, #20]
   d6f34:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f36:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d6f3a:	f7fd fe5f 	bl	d4bfc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d6f3e:	f7ff ffb9 	bl	d6eb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d6f42:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6f44:	f7ff ffd2 	bl	d6eec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d6f48:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6f4a:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d6f4c:	4620      	mov	r0, r4
   d6f4e:	bd38      	pop	{r3, r4, r5, pc}

000d6f50 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d6f50:	b510      	push	{r4, lr}
    static LogManager mgr;
   d6f52:	4c0a      	ldr	r4, [pc, #40]	; (d6f7c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6f54:	6823      	ldr	r3, [r4, #0]
   d6f56:	07db      	lsls	r3, r3, #31
   d6f58:	d40e      	bmi.n	d6f78 <_ZN5spark10LogManager8instanceEv+0x28>
   d6f5a:	4620      	mov	r0, r4
   d6f5c:	f7fd f8ac 	bl	d40b8 <__cxa_guard_acquire>
   d6f60:	b150      	cbz	r0, d6f78 <_ZN5spark10LogManager8instanceEv+0x28>
   d6f62:	4807      	ldr	r0, [pc, #28]	; (d6f80 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6f64:	f7ff ffde 	bl	d6f24 <_ZN5spark10LogManagerC1Ev>
   d6f68:	4620      	mov	r0, r4
   d6f6a:	f7fd f8aa 	bl	d40c2 <__cxa_guard_release>
   d6f6e:	4a05      	ldr	r2, [pc, #20]	; (d6f84 <_ZN5spark10LogManager8instanceEv+0x34>)
   d6f70:	4905      	ldr	r1, [pc, #20]	; (d6f88 <_ZN5spark10LogManager8instanceEv+0x38>)
   d6f72:	4803      	ldr	r0, [pc, #12]	; (d6f80 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6f74:	f001 fc06 	bl	d8784 <__aeabi_atexit>
    return &mgr;
}
   d6f78:	4801      	ldr	r0, [pc, #4]	; (d6f80 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6f7a:	bd10      	pop	{r4, pc}
   d6f7c:	2003e3a0 	.word	0x2003e3a0
   d6f80:	2003e3a4 	.word	0x2003e3a4
   d6f84:	2003d238 	.word	0x2003d238
   d6f88:	000d73bb 	.word	0x000d73bb

000d6f8c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6f8c:	2300      	movs	r3, #0
   d6f8e:	4a02      	ldr	r2, [pc, #8]	; (d6f98 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6f90:	4902      	ldr	r1, [pc, #8]	; (d6f9c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6f92:	4803      	ldr	r0, [pc, #12]	; (d6fa0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6f94:	f7fd bf9a 	b.w	d4ecc <log_set_callbacks>
   d6f98:	000d729d 	.word	0x000d729d
   d6f9c:	000d722d 	.word	0x000d722d
   d6fa0:	000d71b5 	.word	0x000d71b5

000d6fa4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6fa4:	2300      	movs	r3, #0
   d6fa6:	461a      	mov	r2, r3
   d6fa8:	4619      	mov	r1, r3
   d6faa:	4618      	mov	r0, r3
   d6fac:	f7fd bf8e 	b.w	d4ecc <log_set_callbacks>

000d6fb0 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6fb2:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6fb4:	690e      	ldr	r6, [r1, #16]
   d6fb6:	f851 3b04 	ldr.w	r3, [r1], #4
   d6fba:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6fbe:	4605      	mov	r5, r0
   d6fc0:	a801      	add	r0, sp, #4
   d6fc2:	f7fe fda1 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6fc6:	4622      	mov	r2, r4
   d6fc8:	4631      	mov	r1, r6
   d6fca:	4628      	mov	r0, r5
   d6fcc:	f7ff fe75 	bl	d6cba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6fd0:	a801      	add	r0, sp, #4
   d6fd2:	f7fe fdb8 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6fd6:	4628      	mov	r0, r5
   d6fd8:	b002      	add	sp, #8
   d6fda:	bd70      	pop	{r4, r5, r6, pc}

000d6fdc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6fdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6fde:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6fe0:	688e      	ldr	r6, [r1, #8]
   d6fe2:	f851 3b04 	ldr.w	r3, [r1], #4
   d6fe6:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6fea:	4605      	mov	r5, r0
   d6fec:	a801      	add	r0, sp, #4
   d6fee:	f7fe fd8b 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6ff2:	4622      	mov	r2, r4
   d6ff4:	4631      	mov	r1, r6
   d6ff6:	4628      	mov	r0, r5
   d6ff8:	f7ff fe44 	bl	d6c84 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ffc:	a801      	add	r0, sp, #4
   d6ffe:	f7fe fda2 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7002:	4628      	mov	r0, r5
   d7004:	b002      	add	sp, #8
   d7006:	bd70      	pop	{r4, r5, r6, pc}

000d7008 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7008:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d700a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d700c:	68ce      	ldr	r6, [r1, #12]
   d700e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7012:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7016:	4605      	mov	r5, r0
   d7018:	a801      	add	r0, sp, #4
   d701a:	f7fe fd75 	bl	d5b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d701e:	4622      	mov	r2, r4
   d7020:	4631      	mov	r1, r6
   d7022:	4628      	mov	r0, r5
   d7024:	f7ff fe06 	bl	d6c34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7028:	a801      	add	r0, sp, #4
   d702a:	f7fe fd8c 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d702e:	4628      	mov	r0, r5
   d7030:	b002      	add	sp, #8
   d7032:	bd70      	pop	{r4, r5, r6, pc}

000d7034 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7034:	b530      	push	{r4, r5, lr}
   d7036:	b08b      	sub	sp, #44	; 0x2c
   d7038:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d703a:	4601      	mov	r1, r0
   d703c:	a804      	add	r0, sp, #16
   d703e:	f7ff ffcd 	bl	d6fdc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d7042:	a804      	add	r0, sp, #16
   d7044:	f7ff fd29 	bl	d6a9a <_ZN5spark18JSONObjectIterator4nextEv>
   d7048:	b1e8      	cbz	r0, d7086 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d704a:	a904      	add	r1, sp, #16
   d704c:	4668      	mov	r0, sp
   d704e:	f7ff ffdb 	bl	d7008 <_ZNK5spark18JSONObjectIterator4nameEv>
   d7052:	490f      	ldr	r1, [pc, #60]	; (d7090 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d7054:	9802      	ldr	r0, [sp, #8]
   d7056:	f7ff fe91 	bl	d6d7c <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d705a:	4604      	mov	r4, r0
   d705c:	b110      	cbz	r0, d7064 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d705e:	1c2c      	adds	r4, r5, #0
   d7060:	bf18      	it	ne
   d7062:	2401      	movne	r4, #1
   d7064:	a801      	add	r0, sp, #4
   d7066:	f7fe fd6e 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d706a:	2c00      	cmp	r4, #0
   d706c:	d0e9      	beq.n	d7042 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d706e:	a904      	add	r1, sp, #16
   d7070:	4668      	mov	r0, sp
   d7072:	f7ff ff9d 	bl	d6fb0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d7076:	4668      	mov	r0, sp
   d7078:	f7ff fcef 	bl	d6a5a <_ZNK5spark9JSONValue5toIntEv>
   d707c:	6028      	str	r0, [r5, #0]
   d707e:	a801      	add	r0, sp, #4
   d7080:	f7fe fd61 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7084:	e7dd      	b.n	d7042 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d7086:	a805      	add	r0, sp, #20
   d7088:	f7fe fd5d 	bl	d5b46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d708c:	b00b      	add	sp, #44	; 0x2c
   d708e:	bd30      	pop	{r4, r5, pc}
   d7090:	000d91f8 	.word	0x000d91f8

000d7094 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7094:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7096:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d7098:	4620      	mov	r0, r4
   d709a:	4913      	ldr	r1, [pc, #76]	; (d70e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d709c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d709e:	f001 fd65 	bl	d8b6c <strcmp>
   d70a2:	b940      	cbnz	r0, d70b6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d70a4:	f001 f9fc 	bl	d84a0 <_Z16_fetch_usbserialv>
   d70a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d70ac:	f001 f9e8 	bl	d8480 <_ZN9USBSerial5beginEl>
        return &Serial;
   d70b0:	f001 f9f6 	bl	d84a0 <_Z16_fetch_usbserialv>
   d70b4:	e015      	b.n	d70e2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d70b6:	490d      	ldr	r1, [pc, #52]	; (d70ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d70b8:	4620      	mov	r0, r4
   d70ba:	f001 fd57 	bl	d8b6c <strcmp>
   d70be:	b978      	cbnz	r0, d70e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d70c0:	a902      	add	r1, sp, #8
   d70c2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d70c6:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d70ca:	4628      	mov	r0, r5
   d70cc:	f7ff ffb2 	bl	d7034 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d70d0:	f001 f95a 	bl	d8388 <_Z22__fetch_global_Serial1v>
   d70d4:	9901      	ldr	r1, [sp, #4]
   d70d6:	f001 f94d 	bl	d8374 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d70da:	f001 f955 	bl	d8388 <_Z22__fetch_global_Serial1v>
   d70de:	e000      	b.n	d70e2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d70e0:	2000      	movs	r0, #0
}
   d70e2:	b003      	add	sp, #12
   d70e4:	bd30      	pop	{r4, r5, pc}
   d70e6:	bf00      	nop
   d70e8:	000d91fd 	.word	0x000d91fd
   d70ec:	000d9204 	.word	0x000d9204

000d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d70f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d70f2:	6804      	ldr	r4, [r0, #0]
   d70f4:	6843      	ldr	r3, [r0, #4]
   d70f6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d70f8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d70fa:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d70fe:	42a6      	cmp	r6, r4
   d7100:	d005      	beq.n	d710e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7102:	f104 0008 	add.w	r0, r4, #8
   d7106:	f7ff fff3 	bl	d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d710a:	3414      	adds	r4, #20
   d710c:	e7f7      	b.n	d70fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d710e:	6828      	ldr	r0, [r5, #0]
   d7110:	f7fd ff60 	bl	d4fd4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7114:	4628      	mov	r0, r5
   d7116:	bd70      	pop	{r4, r5, r6, pc}

000d7118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7118:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d711a:	6804      	ldr	r4, [r0, #0]
   d711c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d711e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7120:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7124:	42a6      	cmp	r6, r4
   d7126:	d004      	beq.n	d7132 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7128:	4620      	mov	r0, r4
   d712a:	f000 ffc4 	bl	d80b6 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d712e:	3410      	adds	r4, #16
   d7130:	e7f8      	b.n	d7124 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7132:	6828      	ldr	r0, [r5, #0]
   d7134:	f7fd ff4e 	bl	d4fd4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7138:	4628      	mov	r0, r5
   d713a:	bd70      	pop	{r4, r5, r6, pc}

000d713c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d713c:	b510      	push	{r4, lr}
   d713e:	4604      	mov	r4, r0
   d7140:	300c      	adds	r0, #12
   d7142:	f7ff ffd5 	bl	d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7146:	4620      	mov	r0, r4
   d7148:	f7ff ffe6 	bl	d7118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d714c:	4620      	mov	r0, r4
   d714e:	bd10      	pop	{r4, pc}

000d7150 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7150:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d7152:	4b04      	ldr	r3, [pc, #16]	; (d7164 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7154:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d7156:	f840 3b04 	str.w	r3, [r0], #4
   d715a:	f7ff ffef 	bl	d713c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d715e:	4620      	mov	r0, r4
   d7160:	bd10      	pop	{r4, pc}
   d7162:	bf00      	nop
   d7164:	000d8d44 	.word	0x000d8d44

000d7168 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7168:	b510      	push	{r4, lr}
   d716a:	4604      	mov	r4, r0
   d716c:	f7ff fff0 	bl	d7150 <_ZN5spark16StreamLogHandlerD1Ev>
   d7170:	4620      	mov	r0, r4
   d7172:	2124      	movs	r1, #36	; 0x24
   d7174:	f001 fb0b 	bl	d878e <_ZdlPvj>
   d7178:	4620      	mov	r0, r4
   d717a:	bd10      	pop	{r4, pc}

000d717c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d717c:	b510      	push	{r4, lr}
   d717e:	4b03      	ldr	r3, [pc, #12]	; (d718c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7180:	6003      	str	r3, [r0, #0]
   d7182:	4604      	mov	r4, r0
   d7184:	f7ff ffe4 	bl	d7150 <_ZN5spark16StreamLogHandlerD1Ev>
   d7188:	4620      	mov	r0, r4
   d718a:	bd10      	pop	{r4, pc}
   d718c:	000d91d0 	.word	0x000d91d0

000d7190 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7190:	b510      	push	{r4, lr}
   d7192:	4604      	mov	r4, r0
   d7194:	f7ff fff2 	bl	d717c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7198:	4620      	mov	r0, r4
   d719a:	2124      	movs	r1, #36	; 0x24
   d719c:	f001 faf7 	bl	d878e <_ZdlPvj>
   d71a0:	4620      	mov	r0, r4
   d71a2:	bd10      	pop	{r4, pc}

000d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d71a4:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d71a6:	6803      	ldr	r3, [r0, #0]
   d71a8:	4604      	mov	r4, r0
   d71aa:	6818      	ldr	r0, [r3, #0]
   d71ac:	f7fd fd36 	bl	d4c1c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d71b0:	4620      	mov	r0, r4
   d71b2:	bd10      	pop	{r4, pc}

000d71b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d71b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d71b8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d71ba:	4b1b      	ldr	r3, [pc, #108]	; (d7228 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d71bc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d71be:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d71c2:	b085      	sub	sp, #20
   d71c4:	4682      	mov	sl, r0
   d71c6:	460e      	mov	r6, r1
   d71c8:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d71ca:	bb53      	cbnz	r3, d7222 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d71cc:	f7ff fec0 	bl	d6f50 <_ZN5spark10LogManager8instanceEv>
   d71d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d71d2:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d71d4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d71d6:	f7ff fde5 	bl	d6da4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d71da:	7b23      	ldrb	r3, [r4, #12]
   d71dc:	b9f3      	cbnz	r3, d721c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d71de:	2301      	movs	r3, #1
   d71e0:	7323      	strb	r3, [r4, #12]
   d71e2:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d71e4:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d71e6:	b2f6      	uxtb	r6, r6
   d71e8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d71ec:	454d      	cmp	r5, r9
   d71ee:	d013      	beq.n	d7218 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d71f0:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d71f4:	4641      	mov	r1, r8
   d71f6:	1d38      	adds	r0, r7, #4
   d71f8:	f7ff fe30 	bl	d6e5c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d71fc:	4286      	cmp	r6, r0
   d71fe:	d3f5      	bcc.n	d71ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d7200:	683b      	ldr	r3, [r7, #0]
   d7202:	f8cd b000 	str.w	fp, [sp]
   d7206:	689b      	ldr	r3, [r3, #8]
   d7208:	469e      	mov	lr, r3
   d720a:	4638      	mov	r0, r7
   d720c:	4643      	mov	r3, r8
   d720e:	4632      	mov	r2, r6
   d7210:	4651      	mov	r1, sl
   d7212:	4677      	mov	r7, lr
   d7214:	47b8      	blx	r7
   d7216:	e7e9      	b.n	d71ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7218:	2300      	movs	r3, #0
   d721a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d721c:	a803      	add	r0, sp, #12
   d721e:	f7ff ffc1 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7222:	b005      	add	sp, #20
   d7224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7228:	e000ed00 	.word	0xe000ed00

000d722c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d722c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7230:	4699      	mov	r9, r3
   d7232:	4b19      	ldr	r3, [pc, #100]	; (d7298 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d7234:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7236:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d723a:	4607      	mov	r7, r0
   d723c:	4688      	mov	r8, r1
   d723e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7240:	bb33      	cbnz	r3, d7290 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d7242:	f7ff fe85 	bl	d6f50 <_ZN5spark10LogManager8instanceEv>
   d7246:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7248:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d724a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d724c:	f7ff fdaa 	bl	d6da4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d7250:	7b23      	ldrb	r3, [r4, #12]
   d7252:	b9d3      	cbnz	r3, d728a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7254:	2301      	movs	r3, #1
   d7256:	7323      	strb	r3, [r4, #12]
   d7258:	6825      	ldr	r5, [r4, #0]
   d725a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d725c:	fa5f fb86 	uxtb.w	fp, r6
   d7260:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d7264:	4555      	cmp	r5, sl
   d7266:	d00e      	beq.n	d7286 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d7268:	f855 6b04 	ldr.w	r6, [r5], #4
   d726c:	4649      	mov	r1, r9
   d726e:	1d30      	adds	r0, r6, #4
   d7270:	f7ff fdf4 	bl	d6e5c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7274:	4583      	cmp	fp, r0
   d7276:	d3f5      	bcc.n	d7264 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d7278:	6833      	ldr	r3, [r6, #0]
   d727a:	4642      	mov	r2, r8
   d727c:	68db      	ldr	r3, [r3, #12]
   d727e:	4639      	mov	r1, r7
   d7280:	4630      	mov	r0, r6
   d7282:	4798      	blx	r3
   d7284:	e7ee      	b.n	d7264 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7286:	2300      	movs	r3, #0
   d7288:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d728a:	a801      	add	r0, sp, #4
   d728c:	f7ff ff8a 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d7290:	b003      	add	sp, #12
   d7292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7296:	bf00      	nop
   d7298:	e000ed00 	.word	0xe000ed00

000d729c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d729c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d72a0:	4b15      	ldr	r3, [pc, #84]	; (d72f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d72a2:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d72a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d72a8:	4604      	mov	r4, r0
   d72aa:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d72ac:	b9fb      	cbnz	r3, d72ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d72ae:	f7ff fe4f 	bl	d6f50 <_ZN5spark10LogManager8instanceEv>
   d72b2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d72b4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d72b8:	f7ff fd74 	bl	d6da4 <_ZN14RecursiveMutex4lockEv>
   d72bc:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d72c0:	2646      	movs	r6, #70	; 0x46
   d72c2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d72c6:	42af      	cmp	r7, r5
   d72c8:	d107      	bne.n	d72da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d72ca:	a801      	add	r0, sp, #4
   d72cc:	f7ff ff6a 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d72d0:	42b4      	cmp	r4, r6
   d72d2:	bfb4      	ite	lt
   d72d4:	2000      	movlt	r0, #0
   d72d6:	2001      	movge	r0, #1
   d72d8:	e00a      	b.n	d72f0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d72da:	f855 0b04 	ldr.w	r0, [r5], #4
   d72de:	4641      	mov	r1, r8
   d72e0:	3004      	adds	r0, #4
   d72e2:	f7ff fdbb 	bl	d6e5c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d72e6:	4286      	cmp	r6, r0
   d72e8:	bfa8      	it	ge
   d72ea:	4606      	movge	r6, r0
   d72ec:	e7eb      	b.n	d72c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d72ee:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d72f0:	b002      	add	sp, #8
   d72f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72f6:	bf00      	nop
   d72f8:	e000ed00 	.word	0xe000ed00

000d72fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d72fc:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d72fe:	6803      	ldr	r3, [r0, #0]
   d7300:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7302:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7304:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7308:	429a      	cmp	r2, r3
   d730a:	4618      	mov	r0, r3
   d730c:	d00e      	beq.n	d732c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d730e:	6806      	ldr	r6, [r0, #0]
   d7310:	680d      	ldr	r5, [r1, #0]
   d7312:	42ae      	cmp	r6, r5
   d7314:	f103 0304 	add.w	r3, r3, #4
   d7318:	d1f6      	bne.n	d7308 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d731a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d731c:	1a52      	subs	r2, r2, r1
   d731e:	f001 fbc1 	bl	d8aa4 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d7322:	6863      	ldr	r3, [r4, #4]
   d7324:	3b01      	subs	r3, #1
   d7326:	6063      	str	r3, [r4, #4]
    return true;
   d7328:	2001      	movs	r0, #1
}
   d732a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d732c:	2000      	movs	r0, #0
   d732e:	bd70      	pop	{r4, r5, r6, pc}

000d7330 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7332:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7334:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7336:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7338:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d733a:	f7ff fd33 	bl	d6da4 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d733e:	a901      	add	r1, sp, #4
   d7340:	4620      	mov	r0, r4
   d7342:	f7ff ffdb 	bl	d72fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7346:	b920      	cbnz	r0, d7352 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7348:	a803      	add	r0, sp, #12
   d734a:	f7ff ff2b 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d734e:	b004      	add	sp, #16
   d7350:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7352:	6863      	ldr	r3, [r4, #4]
   d7354:	2b00      	cmp	r3, #0
   d7356:	d1f7      	bne.n	d7348 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d7358:	f7ff fe24 	bl	d6fa4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d735c:	e7f4      	b.n	d7348 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d735e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d735e:	b570      	push	{r4, r5, r6, lr}
   d7360:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7362:	6943      	ldr	r3, [r0, #20]
   d7364:	2618      	movs	r6, #24
   d7366:	4604      	mov	r4, r0
   d7368:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d736c:	42ae      	cmp	r6, r5
   d736e:	d015      	beq.n	d739c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7370:	f105 0110 	add.w	r1, r5, #16
   d7374:	4620      	mov	r0, r4
   d7376:	f7ff ffc1 	bl	d72fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d737a:	6863      	ldr	r3, [r4, #4]
   d737c:	b90b      	cbnz	r3, d7382 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d737e:	f7ff fe11 	bl	d6fa4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d7382:	69e0      	ldr	r0, [r4, #28]
   d7384:	6929      	ldr	r1, [r5, #16]
   d7386:	6803      	ldr	r3, [r0, #0]
   d7388:	68db      	ldr	r3, [r3, #12]
   d738a:	4798      	blx	r3
        if (h.stream) {
   d738c:	6969      	ldr	r1, [r5, #20]
   d738e:	b119      	cbz	r1, d7398 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7390:	6a20      	ldr	r0, [r4, #32]
   d7392:	6803      	ldr	r3, [r0, #0]
   d7394:	68db      	ldr	r3, [r3, #12]
   d7396:	4798      	blx	r3
   d7398:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d739a:	e7e7      	b.n	d736c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d739c:	6925      	ldr	r5, [r4, #16]
   d739e:	6963      	ldr	r3, [r4, #20]
   d73a0:	2618      	movs	r6, #24
   d73a2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d73a6:	42b5      	cmp	r5, r6
   d73a8:	d004      	beq.n	d73b4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d73aa:	4628      	mov	r0, r5
   d73ac:	f000 fe83 	bl	d80b6 <_ZN6StringD1Ev>
   d73b0:	3518      	adds	r5, #24
   d73b2:	e7f8      	b.n	d73a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d73b4:	2300      	movs	r3, #0
   d73b6:	6163      	str	r3, [r4, #20]
   d73b8:	bd70      	pop	{r4, r5, r6, pc}

000d73ba <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d73ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d73bc:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73be:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d73c0:	f7ff fdf0 	bl	d6fa4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d73c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d73c8:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d73cc:	f7ff fcea 	bl	d6da4 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d73d0:	4620      	mov	r0, r4
   d73d2:	f7ff ffc4 	bl	d735e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d73d6:	4628      	mov	r0, r5
   d73d8:	f7ff fee4 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d73dc:	6925      	ldr	r5, [r4, #16]
   d73de:	6963      	ldr	r3, [r4, #20]
   d73e0:	2618      	movs	r6, #24
   d73e2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d73e6:	42b5      	cmp	r5, r6
   d73e8:	d004      	beq.n	d73f4 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d73ea:	4628      	mov	r0, r5
   d73ec:	f000 fe63 	bl	d80b6 <_ZN6StringD1Ev>
   d73f0:	3518      	adds	r5, #24
   d73f2:	e7f8      	b.n	d73e6 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d73f4:	6920      	ldr	r0, [r4, #16]
   d73f6:	f7fd fded 	bl	d4fd4 <free>
   d73fa:	6820      	ldr	r0, [r4, #0]
   d73fc:	f7fd fdea 	bl	d4fd4 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d7400:	4620      	mov	r0, r4
   d7402:	b002      	add	sp, #8
   d7404:	bd70      	pop	{r4, r5, r6, pc}

000d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7406:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7408:	680a      	ldr	r2, [r1, #0]
   d740a:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d740c:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d740e:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7410:	684a      	ldr	r2, [r1, #4]
   d7412:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7414:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7416:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7418:	688a      	ldr	r2, [r1, #8]
   d741a:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d741c:	608b      	str	r3, [r1, #8]
   d741e:	4770      	bx	lr

000d7420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7420:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7422:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7424:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7426:	6003      	str	r3, [r0, #0]
   d7428:	6043      	str	r3, [r0, #4]
   d742a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d742c:	f7ff ffeb 	bl	d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d7430:	4620      	mov	r0, r4
   d7432:	bd10      	pop	{r4, pc}

000d7434 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7434:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7438:	4604      	mov	r4, r0
   d743a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d743c:	d925      	bls.n	d748a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d743e:	4290      	cmp	r0, r2
   d7440:	d224      	bcs.n	d748c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7442:	1a55      	subs	r5, r2, r1
   d7444:	3d14      	subs	r5, #20
   d7446:	442c      	add	r4, r5
   d7448:	f1a1 0714 	sub.w	r7, r1, #20
   d744c:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7450:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7452:	f1a5 0308 	sub.w	r3, r5, #8
   d7456:	429f      	cmp	r7, r3
   d7458:	d037      	beq.n	d74ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d745a:	b184      	cbz	r4, d747e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d745c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7460:	6023      	str	r3, [r4, #0]
   d7462:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7466:	80a3      	strh	r3, [r4, #4]
   d7468:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d746c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d746e:	60a6      	str	r6, [r4, #8]
   d7470:	60e6      	str	r6, [r4, #12]
   d7472:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7474:	4629      	mov	r1, r5
   d7476:	f104 0008 	add.w	r0, r4, #8
   d747a:	f7ff ffc4 	bl	d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d747e:	4628      	mov	r0, r5
   d7480:	f7ff fe36 	bl	d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7484:	3c14      	subs	r4, #20
   d7486:	3d14      	subs	r5, #20
   d7488:	e7e3      	b.n	d7452 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d748a:	d01e      	beq.n	d74ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d748c:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7490:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7492:	f1a5 0308 	sub.w	r3, r5, #8
   d7496:	429e      	cmp	r6, r3
   d7498:	d017      	beq.n	d74ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d749a:	b184      	cbz	r4, d74be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d749c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d74a0:	6023      	str	r3, [r4, #0]
   d74a2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d74a6:	80a3      	strh	r3, [r4, #4]
   d74a8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d74ac:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d74ae:	60a7      	str	r7, [r4, #8]
   d74b0:	60e7      	str	r7, [r4, #12]
   d74b2:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d74b4:	4629      	mov	r1, r5
   d74b6:	f104 0008 	add.w	r0, r4, #8
   d74ba:	f7ff ffa4 	bl	d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d74be:	4628      	mov	r0, r5
   d74c0:	f7ff fe16 	bl	d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d74c4:	3414      	adds	r4, #20
   d74c6:	3514      	adds	r5, #20
   d74c8:	e7e3      	b.n	d7492 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d74ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d74cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d74ce:	6845      	ldr	r5, [r0, #4]
   d74d0:	6883      	ldr	r3, [r0, #8]
   d74d2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d74d4:	4604      	mov	r4, r0
   d74d6:	460e      	mov	r6, r1
   d74d8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d74da:	db0e      	blt.n	d74fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d74dc:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d74de:	2d00      	cmp	r5, #0
   d74e0:	dd05      	ble.n	d74ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d74e2:	00a9      	lsls	r1, r5, #2
   d74e4:	6800      	ldr	r0, [r0, #0]
   d74e6:	f7fd fd7d 	bl	d4fe4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d74ea:	b920      	cbnz	r0, d74f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d74ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d74ee:	6800      	ldr	r0, [r0, #0]
   d74f0:	f7fd fd70 	bl	d4fd4 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d74f4:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d74f6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d74f8:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d74fa:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d74fc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d74fe:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7502:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d7506:	1a52      	subs	r2, r2, r1
   d7508:	1d08      	adds	r0, r1, #4
   d750a:	f001 facb 	bl	d8aa4 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d750e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7512:	6863      	ldr	r3, [r4, #4]
   d7514:	3301      	adds	r3, #1
   d7516:	6063      	str	r3, [r4, #4]
   d7518:	2001      	movs	r0, #1
    return true;
}
   d751a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d751c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d751c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d751e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7520:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7522:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7524:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7526:	f7ff fc3d 	bl	d6da4 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d752a:	6823      	ldr	r3, [r4, #0]
   d752c:	6861      	ldr	r1, [r4, #4]
   d752e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7532:	4283      	cmp	r3, r0
   d7534:	461a      	mov	r2, r3
   d7536:	d009      	beq.n	d754c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d7538:	6812      	ldr	r2, [r2, #0]
   d753a:	42aa      	cmp	r2, r5
   d753c:	f103 0304 	add.w	r3, r3, #4
   d7540:	d1f7      	bne.n	d7532 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d7542:	a801      	add	r0, sp, #4
   d7544:	f7ff fe2e 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7548:	2500      	movs	r5, #0
   d754a:	e00e      	b.n	d756a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d754c:	462a      	mov	r2, r5
   d754e:	4620      	mov	r0, r4
   d7550:	f7ff ffbc 	bl	d74cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7554:	4605      	mov	r5, r0
   d7556:	2800      	cmp	r0, #0
   d7558:	d0f3      	beq.n	d7542 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d755a:	6863      	ldr	r3, [r4, #4]
   d755c:	2b01      	cmp	r3, #1
   d755e:	d101      	bne.n	d7564 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7560:	f7ff fd14 	bl	d6f8c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7564:	a801      	add	r0, sp, #4
   d7566:	f7ff fe1d 	bl	d71a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d756a:	4628      	mov	r0, r5
   d756c:	b003      	add	sp, #12
   d756e:	bd30      	pop	{r4, r5, pc}

000d7570 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7570:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7574:	4606      	mov	r6, r0
   d7576:	460c      	mov	r4, r1
   d7578:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d757a:	d914      	bls.n	d75a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d757c:	4290      	cmp	r0, r2
   d757e:	d213      	bcs.n	d75a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7580:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d7584:	1a6c      	subs	r4, r5, r1
   d7586:	f1a1 0710 	sub.w	r7, r1, #16
   d758a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d758c:	42af      	cmp	r7, r5
   d758e:	d018      	beq.n	d75c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7590:	b11c      	cbz	r4, d759a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7592:	4629      	mov	r1, r5
   d7594:	4620      	mov	r0, r4
   d7596:	f000 fd7e 	bl	d8096 <_ZN6StringC1EOS_>
                end->~T();
   d759a:	4628      	mov	r0, r5
   d759c:	f000 fd8b 	bl	d80b6 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d75a0:	3d10      	subs	r5, #16
   d75a2:	3c10      	subs	r4, #16
   d75a4:	e7f2      	b.n	d758c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d75a6:	d00c      	beq.n	d75c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d75a8:	42ac      	cmp	r4, r5
   d75aa:	d00a      	beq.n	d75c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d75ac:	b11e      	cbz	r6, d75b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d75ae:	4621      	mov	r1, r4
   d75b0:	4630      	mov	r0, r6
   d75b2:	f000 fd70 	bl	d8096 <_ZN6StringC1EOS_>
                p->~T();
   d75b6:	4620      	mov	r0, r4
   d75b8:	f000 fd7d 	bl	d80b6 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d75bc:	3410      	adds	r4, #16
   d75be:	3610      	adds	r6, #16
   d75c0:	e7f2      	b.n	d75a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d75c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d75c4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d75c6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d75c8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d75ca:	dd0b      	ble.n	d75e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d75cc:	0130      	lsls	r0, r6, #4
   d75ce:	f7fd fcf9 	bl	d4fc4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d75d2:	4604      	mov	r4, r0
   d75d4:	b170      	cbz	r0, d75f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d75d6:	e895 0006 	ldmia.w	r5, {r1, r2}
   d75da:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d75de:	f7ff ffc7 	bl	d7570 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d75e2:	e000      	b.n	d75e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d75e4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d75e6:	6828      	ldr	r0, [r5, #0]
   d75e8:	f7fd fcf4 	bl	d4fd4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d75ec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d75ee:	60ae      	str	r6, [r5, #8]
        return true;
   d75f0:	2001      	movs	r0, #1
   d75f2:	bd70      	pop	{r4, r5, r6, pc}
    }
   d75f4:	bd70      	pop	{r4, r5, r6, pc}

000d75f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d75f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d75fa:	2300      	movs	r3, #0
   d75fc:	b095      	sub	sp, #84	; 0x54
   d75fe:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7600:	2246      	movs	r2, #70	; 0x46
   d7602:	6003      	str	r3, [r0, #0]
   d7604:	6043      	str	r3, [r0, #4]
   d7606:	6083      	str	r3, [r0, #8]
   d7608:	60c3      	str	r3, [r0, #12]
   d760a:	6103      	str	r3, [r0, #16]
   d760c:	6143      	str	r3, [r0, #20]
   d760e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7610:	9102      	str	r1, [sp, #8]
   d7612:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7616:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7618:	4299      	cmp	r1, r3
   d761a:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d761c:	9309      	str	r3, [sp, #36]	; 0x24
   d761e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7620:	f340 809d 	ble.w	d775e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7624:	a808      	add	r0, sp, #32
   d7626:	f7ff ffcd 	bl	d75c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d762a:	2800      	cmp	r0, #0
   d762c:	f040 8097 	bne.w	d775e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7630:	e08e      	b.n	d7750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d7632:	4621      	mov	r1, r4
   d7634:	a80b      	add	r0, sp, #44	; 0x2c
   d7636:	f000 fd2e 	bl	d8096 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d763a:	a90b      	add	r1, sp, #44	; 0x2c
   d763c:	a80f      	add	r0, sp, #60	; 0x3c
   d763e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7640:	f000 fd29 	bl	d8096 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7644:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7648:	4299      	cmp	r1, r3
   d764a:	f2c0 80ce 	blt.w	d77ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d764e:	3101      	adds	r1, #1
   d7650:	a808      	add	r0, sp, #32
   d7652:	f7ff ffb7 	bl	d75c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7656:	2800      	cmp	r0, #0
   d7658:	f040 80c7 	bne.w	d77ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d765c:	a80f      	add	r0, sp, #60	; 0x3c
   d765e:	f000 fd2a 	bl	d80b6 <_ZN6StringD1Ev>
   d7662:	a80b      	add	r0, sp, #44	; 0x2c
   d7664:	f000 fd27 	bl	d80b6 <_ZN6StringD1Ev>
   d7668:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d766a:	42a7      	cmp	r7, r4
   d766c:	d1e1      	bne.n	d7632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d766e:	2600      	movs	r6, #0
   d7670:	960b      	str	r6, [sp, #44]	; 0x2c
   d7672:	960c      	str	r6, [sp, #48]	; 0x30
   d7674:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7676:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d767a:	429e      	cmp	r6, r3
   d767c:	f280 80a8 	bge.w	d77d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7680:	0133      	lsls	r3, r6, #4
   d7682:	9a08      	ldr	r2, [sp, #32]
   d7684:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7686:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7688:	2b00      	cmp	r3, #0
   d768a:	f000 809f 	beq.w	d77cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d768e:	2314      	movs	r3, #20
   d7690:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7692:	f8cd 901c 	str.w	r9, [sp, #28]
   d7696:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7698:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d769a:	a907      	add	r1, sp, #28
   d769c:	a806      	add	r0, sp, #24
   d769e:	f7ff fb30 	bl	d6d02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d76a2:	4607      	mov	r7, r0
   d76a4:	2800      	cmp	r0, #0
   d76a6:	f000 8091 	beq.w	d77cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d76aa:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d76ac:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d76ae:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d76b2:	9a07      	ldr	r2, [sp, #28]
   d76b4:	4620      	mov	r0, r4
   d76b6:	f7ff fb91 	bl	d6ddc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d76ba:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d76be:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d76c0:	f1b8 0f00 	cmp.w	r8, #0
   d76c4:	d153      	bne.n	d776e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d76c6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d76ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d76ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d76d2:	970f      	str	r7, [sp, #60]	; 0x3c
   d76d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d76d8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d76dc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d76e0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d76e4:	6867      	ldr	r7, [r4, #4]
   d76e6:	68a3      	ldr	r3, [r4, #8]
   d76e8:	429f      	cmp	r7, r3
   d76ea:	da4f      	bge.n	d778c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d76ec:	9b00      	ldr	r3, [sp, #0]
   d76ee:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d76f2:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d76f4:	2214      	movs	r2, #20
   d76f6:	4353      	muls	r3, r2
   d76f8:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d76fc:	fb02 b201 	mla	r2, r2, r1, fp
   d7700:	f107 0014 	add.w	r0, r7, #20
   d7704:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7706:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7708:	f7ff fe94 	bl	d7434 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d770c:	b1a7      	cbz	r7, d7738 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d770e:	9b03      	ldr	r3, [sp, #12]
   d7710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7712:	f84b 2003 	str.w	r2, [fp, r3]
   d7716:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d771a:	80bb      	strh	r3, [r7, #4]
   d771c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7720:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7722:	f8c7 9008 	str.w	r9, [r7, #8]
   d7726:	f8c7 900c 	str.w	r9, [r7, #12]
   d772a:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d772e:	a911      	add	r1, sp, #68	; 0x44
   d7730:	f107 0008 	add.w	r0, r7, #8
   d7734:	f7ff fe67 	bl	d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7738:	6863      	ldr	r3, [r4, #4]
   d773a:	3301      	adds	r3, #1
   d773c:	6063      	str	r3, [r4, #4]
   d773e:	a811      	add	r0, sp, #68	; 0x44
   d7740:	f7ff fcd6 	bl	d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7744:	f1b8 0f00 	cmp.w	r8, #0
   d7748:	d011      	beq.n	d776e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d774a:	a80b      	add	r0, sp, #44	; 0x2c
   d774c:	f7ff fcd0 	bl	d70f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7750:	a808      	add	r0, sp, #32
   d7752:	f7ff fce1 	bl	d7118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7756:	4628      	mov	r0, r5
   d7758:	b015      	add	sp, #84	; 0x54
   d775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d775e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7762:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7766:	2714      	movs	r7, #20
   d7768:	fb07 4703 	mla	r7, r7, r3, r4
   d776c:	e77d      	b.n	d766a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d776e:	6823      	ldr	r3, [r4, #0]
   d7770:	9a00      	ldr	r2, [sp, #0]
   d7772:	2414      	movs	r4, #20
   d7774:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7778:	9b06      	ldr	r3, [sp, #24]
   d777a:	781b      	ldrb	r3, [r3, #0]
   d777c:	bb23      	cbnz	r3, d77c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d777e:	f8da 3000 	ldr.w	r3, [sl]
   d7782:	9a01      	ldr	r2, [sp, #4]
   d7784:	4413      	add	r3, r2
   d7786:	7c1b      	ldrb	r3, [r3, #16]
   d7788:	80e3      	strh	r3, [r4, #6]
   d778a:	e01d      	b.n	d77c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d778c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d778e:	2f00      	cmp	r7, #0
   d7790:	dd0f      	ble.n	d77b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7792:	2314      	movs	r3, #20
   d7794:	fb03 f007 	mul.w	r0, r3, r7
   d7798:	9303      	str	r3, [sp, #12]
   d779a:	f7fd fc13 	bl	d4fc4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d779e:	4683      	mov	fp, r0
   d77a0:	b178      	cbz	r0, d77c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d77a2:	e894 0006 	ldmia.w	r4, {r1, r2}
   d77a6:	9b03      	ldr	r3, [sp, #12]
   d77a8:	fb03 1202 	mla	r2, r3, r2, r1
   d77ac:	f7ff fe42 	bl	d7434 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d77b0:	e000      	b.n	d77b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d77b2:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d77b4:	6820      	ldr	r0, [r4, #0]
   d77b6:	f7fd fc0d 	bl	d4fd4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d77ba:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d77be:	60a7      	str	r7, [r4, #8]
   d77c0:	e794      	b.n	d76ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d77c2:	f04f 0801 	mov.w	r8, #1
   d77c6:	e7ba      	b.n	d773e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d77c8:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d77ca:	e766      	b.n	d769a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d77cc:	3601      	adds	r6, #1
   d77ce:	e753      	b.n	d7678 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d77d0:	a908      	add	r1, sp, #32
   d77d2:	4628      	mov	r0, r5
   d77d4:	f7ff fe17 	bl	d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d77d8:	a90b      	add	r1, sp, #44	; 0x2c
   d77da:	f105 000c 	add.w	r0, r5, #12
   d77de:	f7ff fe12 	bl	d7406 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d77e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d77e6:	762b      	strb	r3, [r5, #24]
   d77e8:	e7af      	b.n	d774a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d77ea:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d77ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d77ee:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d77f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d77f6:	4631      	mov	r1, r6
   d77f8:	f106 0010 	add.w	r0, r6, #16
   d77fc:	f7ff feb8 	bl	d7570 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7800:	b11e      	cbz	r6, d780a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7802:	a90f      	add	r1, sp, #60	; 0x3c
   d7804:	4630      	mov	r0, r6
   d7806:	f000 fc46 	bl	d8096 <_ZN6StringC1EOS_>
    ++size_;
   d780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d780c:	3301      	adds	r3, #1
   d780e:	9309      	str	r3, [sp, #36]	; 0x24
   d7810:	e724      	b.n	d765c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7814 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7814:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7816:	4604      	mov	r4, r0
   d7818:	4b09      	ldr	r3, [pc, #36]	; (d7840 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d781a:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d781e:	4605      	mov	r5, r0
   d7820:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7822:	a801      	add	r0, sp, #4
   d7824:	4611      	mov	r1, r2
   d7826:	f7fd f844 	bl	d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d782a:	aa01      	add	r2, sp, #4
   d782c:	4631      	mov	r1, r6
   d782e:	4620      	mov	r0, r4
   d7830:	f7ff fee1 	bl	d75f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7834:	a801      	add	r0, sp, #4
   d7836:	f7fc fffb 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d783a:	4628      	mov	r0, r5
   d783c:	b004      	add	sp, #16
   d783e:	bd70      	pop	{r4, r5, r6, pc}
   d7840:	000d8d44 	.word	0x000d8d44

000d7844 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7844:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7846:	460f      	mov	r7, r1
   d7848:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d784a:	492b      	ldr	r1, [pc, #172]	; (d78f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d784c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d784e:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7850:	4616      	mov	r6, r2
   d7852:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7854:	f001 f98a 	bl	d8b6c <strcmp>
   d7858:	bb28      	cbnz	r0, d78a6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d785a:	2c00      	cmp	r4, #0
   d785c:	d049      	beq.n	d78f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d785e:	4629      	mov	r1, r5
   d7860:	a801      	add	r0, sp, #4
   d7862:	f7ff fddd 	bl	d7420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7866:	4925      	ldr	r1, [pc, #148]	; (d78fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7868:	2024      	movs	r0, #36	; 0x24
   d786a:	f000 ff9b 	bl	d87a4 <_ZnwjRKSt9nothrow_t>
   d786e:	4605      	mov	r5, r0
   d7870:	b1b8      	cbz	r0, d78a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7872:	a901      	add	r1, sp, #4
   d7874:	a804      	add	r0, sp, #16
   d7876:	f7ff fdd3 	bl	d7420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d787a:	a904      	add	r1, sp, #16
   d787c:	a807      	add	r0, sp, #28
   d787e:	f7fd f818 	bl	d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7882:	aa07      	add	r2, sp, #28
   d7884:	4631      	mov	r1, r6
   d7886:	4628      	mov	r0, r5
   d7888:	f7ff ffc4 	bl	d7814 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d788c:	a807      	add	r0, sp, #28
   d788e:	f7fc ffcf 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7892:	4b1b      	ldr	r3, [pc, #108]	; (d7900 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7894:	602b      	str	r3, [r5, #0]
   d7896:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7898:	a804      	add	r0, sp, #16
   d789a:	f7fc ffc9 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d789e:	4b19      	ldr	r3, [pc, #100]	; (d7904 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d78a0:	602b      	str	r3, [r5, #0]
   d78a2:	a801      	add	r0, sp, #4
   d78a4:	e01f      	b.n	d78e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d78a6:	4918      	ldr	r1, [pc, #96]	; (d7908 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d78a8:	4638      	mov	r0, r7
   d78aa:	f001 f95f 	bl	d8b6c <strcmp>
   d78ae:	b9f0      	cbnz	r0, d78ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d78b0:	b1fc      	cbz	r4, d78f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d78b2:	4629      	mov	r1, r5
   d78b4:	a804      	add	r0, sp, #16
   d78b6:	f7ff fdb3 	bl	d7420 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d78ba:	4910      	ldr	r1, [pc, #64]	; (d78fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d78bc:	2024      	movs	r0, #36	; 0x24
   d78be:	f000 ff71 	bl	d87a4 <_ZnwjRKSt9nothrow_t>
   d78c2:	4605      	mov	r5, r0
   d78c4:	b170      	cbz	r0, d78e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d78c6:	a904      	add	r1, sp, #16
   d78c8:	a807      	add	r0, sp, #28
   d78ca:	f7fc fff2 	bl	d48b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d78ce:	aa07      	add	r2, sp, #28
   d78d0:	4631      	mov	r1, r6
   d78d2:	4628      	mov	r0, r5
   d78d4:	f7ff ff9e 	bl	d7814 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d78d8:	a807      	add	r0, sp, #28
   d78da:	f7fc ffa9 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d78de:	4b08      	ldr	r3, [pc, #32]	; (d7900 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d78e0:	602b      	str	r3, [r5, #0]
   d78e2:	622c      	str	r4, [r5, #32]
   d78e4:	a804      	add	r0, sp, #16
   d78e6:	f7fc ffa3 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d78ea:	4628      	mov	r0, r5
   d78ec:	e002      	b.n	d78f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d78ee:	2000      	movs	r0, #0
   d78f0:	e000      	b.n	d78f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d78f2:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d78f4:	b00b      	add	sp, #44	; 0x2c
   d78f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d78f8:	000d9256 	.word	0x000d9256
   d78fc:	000d943c 	.word	0x000d943c
   d7900:	000d92dc 	.word	0x000d92dc
   d7904:	000d91d0 	.word	0x000d91d0
   d7908:	000d925a 	.word	0x000d925a

000d790c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d790c:	4b01      	ldr	r3, [pc, #4]	; (d7914 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d790e:	4a02      	ldr	r2, [pc, #8]	; (d7918 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7910:	601a      	str	r2, [r3, #0]
   d7912:	4770      	bx	lr
   d7914:	2003e3d0 	.word	0x2003e3d0
   d7918:	000d926b 	.word	0x000d926b

000d791c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7920:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7922:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7926:	4604      	mov	r4, r0
   d7928:	460e      	mov	r6, r1
   d792a:	4617      	mov	r7, r2
   d792c:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d792e:	f000 fdb7 	bl	d84a0 <_Z16_fetch_usbserialv>
   d7932:	4581      	cmp	r9, r0
   d7934:	d105      	bne.n	d7942 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d7936:	485a      	ldr	r0, [pc, #360]	; (d7aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7938:	f000 fa67 	bl	d7e0a <_ZN5spark12NetworkClass9listeningEv>
   d793c:	2800      	cmp	r0, #0
   d793e:	f040 80ac 	bne.w	d7a9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d7942:	792b      	ldrb	r3, [r5, #4]
   d7944:	071b      	lsls	r3, r3, #28
   d7946:	d505      	bpl.n	d7954 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7948:	696b      	ldr	r3, [r5, #20]
   d794a:	4a56      	ldr	r2, [pc, #344]	; (d7aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d794c:	6a20      	ldr	r0, [r4, #32]
   d794e:	2100      	movs	r1, #0
   d7950:	f000 fb34 	bl	d7fbc <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d7954:	f1b8 0f00 	cmp.w	r8, #0
   d7958:	d00d      	beq.n	d7976 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d795a:	215b      	movs	r1, #91	; 0x5b
   d795c:	4620      	mov	r0, r4
   d795e:	f7ff fa32 	bl	d6dc6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7962:	4641      	mov	r1, r8
   d7964:	4620      	mov	r0, r4
   d7966:	f7ff fa20 	bl	d6daa <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d796a:	6823      	ldr	r3, [r4, #0]
   d796c:	494e      	ldr	r1, [pc, #312]	; (d7aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d796e:	68db      	ldr	r3, [r3, #12]
   d7970:	2202      	movs	r2, #2
   d7972:	4620      	mov	r0, r4
   d7974:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d7976:	792b      	ldrb	r3, [r5, #4]
   d7978:	07d9      	lsls	r1, r3, #31
   d797a:	d525      	bpl.n	d79c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d797c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7980:	212f      	movs	r1, #47	; 0x2f
   d7982:	4640      	mov	r0, r8
   d7984:	f001 f92d 	bl	d8be2 <strrchr>
    if (s1) {
   d7988:	b108      	cbz	r0, d798e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d798a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d798e:	4641      	mov	r1, r8
   d7990:	4620      	mov	r0, r4
   d7992:	f7ff fa0a 	bl	d6daa <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7996:	792b      	ldrb	r3, [r5, #4]
   d7998:	079a      	lsls	r2, r3, #30
   d799a:	d509      	bpl.n	d79b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d799c:	213a      	movs	r1, #58	; 0x3a
   d799e:	4620      	mov	r0, r4
   d79a0:	f7ff fa11 	bl	d6dc6 <_ZN5spark16StreamLogHandler5writeEc>
   d79a4:	68eb      	ldr	r3, [r5, #12]
   d79a6:	4a41      	ldr	r2, [pc, #260]	; (d7aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d79a8:	6a20      	ldr	r0, [r4, #32]
   d79aa:	2100      	movs	r1, #0
   d79ac:	f000 fb06 	bl	d7fbc <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d79b0:	792b      	ldrb	r3, [r5, #4]
   d79b2:	f013 0f04 	tst.w	r3, #4
   d79b6:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d79b8:	bf18      	it	ne
   d79ba:	493d      	ldrne	r1, [pc, #244]	; (d7ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d79bc:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d79be:	bf08      	it	eq
   d79c0:	493c      	ldreq	r1, [pc, #240]	; (d7ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d79c2:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d79c4:	4620      	mov	r0, r4
   d79c6:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d79c8:	792b      	ldrb	r3, [r5, #4]
   d79ca:	075b      	lsls	r3, r3, #29
   d79cc:	d518      	bpl.n	d7a00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d79ce:	6929      	ldr	r1, [r5, #16]
   d79d0:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d79d2:	4613      	mov	r3, r2
   d79d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   d79d8:	b138      	cbz	r0, d79ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d79da:	2820      	cmp	r0, #32
   d79dc:	d101      	bne.n	d79e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d79de:	4619      	mov	r1, r3
   d79e0:	e001      	b.n	d79e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d79e2:	2828      	cmp	r0, #40	; 0x28
   d79e4:	d001      	beq.n	d79ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d79e6:	461a      	mov	r2, r3
   d79e8:	e7f3      	b.n	d79d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d79ea:	6823      	ldr	r3, [r4, #0]
   d79ec:	1a52      	subs	r2, r2, r1
   d79ee:	68db      	ldr	r3, [r3, #12]
   d79f0:	4620      	mov	r0, r4
   d79f2:	4798      	blx	r3
        write("(): ", 4);
   d79f4:	6823      	ldr	r3, [r4, #0]
   d79f6:	4930      	ldr	r1, [pc, #192]	; (d7ab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d79f8:	68db      	ldr	r3, [r3, #12]
   d79fa:	2204      	movs	r2, #4
   d79fc:	4620      	mov	r0, r4
   d79fe:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7a00:	2100      	movs	r1, #0
   d7a02:	4638      	mov	r0, r7
   d7a04:	f7fd fa5a 	bl	d4ebc <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7a08:	4601      	mov	r1, r0
   d7a0a:	4620      	mov	r0, r4
   d7a0c:	f7ff f9cd 	bl	d6daa <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7a10:	6823      	ldr	r3, [r4, #0]
   d7a12:	4928      	ldr	r1, [pc, #160]	; (d7ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7a14:	68db      	ldr	r3, [r3, #12]
   d7a16:	2202      	movs	r2, #2
   d7a18:	4620      	mov	r0, r4
   d7a1a:	4798      	blx	r3
    // Message
    if (msg) {
   d7a1c:	b11e      	cbz	r6, d7a26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7a1e:	4631      	mov	r1, r6
   d7a20:	4620      	mov	r0, r4
   d7a22:	f7ff f9c2 	bl	d6daa <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d7a26:	792b      	ldrb	r3, [r5, #4]
   d7a28:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7a2c:	d02d      	beq.n	d7a8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d7a2e:	6823      	ldr	r3, [r4, #0]
   d7a30:	4922      	ldr	r1, [pc, #136]	; (d7abc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7a32:	68db      	ldr	r3, [r3, #12]
   d7a34:	4620      	mov	r0, r4
   d7a36:	2202      	movs	r2, #2
   d7a38:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d7a3a:	792b      	ldrb	r3, [r5, #4]
   d7a3c:	06d8      	lsls	r0, r3, #27
   d7a3e:	d50b      	bpl.n	d7a58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d7a40:	6823      	ldr	r3, [r4, #0]
   d7a42:	491f      	ldr	r1, [pc, #124]	; (d7ac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d7a44:	68db      	ldr	r3, [r3, #12]
   d7a46:	2207      	movs	r2, #7
   d7a48:	4620      	mov	r0, r4
   d7a4a:	4798      	blx	r3
   d7a4c:	69ab      	ldr	r3, [r5, #24]
   d7a4e:	4a1d      	ldr	r2, [pc, #116]	; (d7ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d7a50:	6a20      	ldr	r0, [r4, #32]
   d7a52:	2100      	movs	r1, #0
   d7a54:	f000 fab2 	bl	d7fbc <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7a58:	792b      	ldrb	r3, [r5, #4]
   d7a5a:	0699      	lsls	r1, r3, #26
   d7a5c:	d511      	bpl.n	d7a82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d7a5e:	06da      	lsls	r2, r3, #27
   d7a60:	d505      	bpl.n	d7a6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d7a62:	6823      	ldr	r3, [r4, #0]
   d7a64:	4912      	ldr	r1, [pc, #72]	; (d7ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7a66:	68db      	ldr	r3, [r3, #12]
   d7a68:	2202      	movs	r2, #2
   d7a6a:	4620      	mov	r0, r4
   d7a6c:	4798      	blx	r3
            }
            write("details = ", 10);
   d7a6e:	6823      	ldr	r3, [r4, #0]
   d7a70:	4915      	ldr	r1, [pc, #84]	; (d7ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d7a72:	68db      	ldr	r3, [r3, #12]
   d7a74:	4620      	mov	r0, r4
   d7a76:	220a      	movs	r2, #10
   d7a78:	4798      	blx	r3
            write(attr.details);
   d7a7a:	69e9      	ldr	r1, [r5, #28]
   d7a7c:	4620      	mov	r0, r4
   d7a7e:	f7ff f994 	bl	d6daa <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d7a82:	215d      	movs	r1, #93	; 0x5d
   d7a84:	4620      	mov	r0, r4
   d7a86:	f7ff f99e 	bl	d6dc6 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7a8a:	6823      	ldr	r3, [r4, #0]
   d7a8c:	490f      	ldr	r1, [pc, #60]	; (d7acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7a8e:	68db      	ldr	r3, [r3, #12]
   d7a90:	4620      	mov	r0, r4
   d7a92:	2202      	movs	r2, #2
}
   d7a94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7a98:	4718      	bx	r3
   d7a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a9e:	bf00      	nop
   d7aa0:	2003e5a8 	.word	0x2003e5a8
   d7aa4:	000d926f 	.word	0x000d926f
   d7aa8:	000d9276 	.word	0x000d9276
   d7aac:	000d8e36 	.word	0x000d8e36
   d7ab0:	000d9279 	.word	0x000d9279
   d7ab4:	000d927e 	.word	0x000d927e
   d7ab8:	000d927c 	.word	0x000d927c
   d7abc:	000d9281 	.word	0x000d9281
   d7ac0:	000d9284 	.word	0x000d9284
   d7ac4:	000d8ddf 	.word	0x000d8ddf
   d7ac8:	000d928c 	.word	0x000d928c
   d7acc:	000d9297 	.word	0x000d9297

000d7ad0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7ad4:	b085      	sub	sp, #20
   d7ad6:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7ada:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7adc:	4606      	mov	r6, r0
   d7ade:	460f      	mov	r7, r1
   d7ae0:	4691      	mov	r9, r2
   d7ae2:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7ae4:	f000 fcdc 	bl	d84a0 <_Z16_fetch_usbserialv>
   d7ae8:	4580      	cmp	r8, r0
   d7aea:	d105      	bne.n	d7af8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7aec:	484a      	ldr	r0, [pc, #296]	; (d7c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7aee:	f000 f98c 	bl	d7e0a <_ZN5spark12NetworkClass9listeningEv>
   d7af2:	2800      	cmp	r0, #0
   d7af4:	f040 808c 	bne.w	d7c10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7af8:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7afa:	4a48      	ldr	r2, [pc, #288]	; (d7c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7afc:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7afe:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7b02:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7b04:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7b06:	f88d 8008 	strb.w	r8, [sp, #8]
   d7b0a:	f7fe fff0 	bl	d6aee <_ZN5spark10JSONWriter11beginObjectEv>
   d7b0e:	4641      	mov	r1, r8
   d7b10:	4648      	mov	r0, r9
   d7b12:	f7fd f9d3 	bl	d4ebc <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7b16:	4942      	ldr	r1, [pc, #264]	; (d7c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7b18:	4680      	mov	r8, r0
   d7b1a:	2201      	movs	r2, #1
   d7b1c:	a801      	add	r0, sp, #4
   d7b1e:	f7ff f86b 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7b22:	4641      	mov	r1, r8
   d7b24:	f7ff f931 	bl	d6d8a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7b28:	b13f      	cbz	r7, d7b3a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7b2a:	493e      	ldr	r1, [pc, #248]	; (d7c24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7b2c:	2201      	movs	r2, #1
   d7b2e:	a801      	add	r0, sp, #4
   d7b30:	f7ff f862 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7b34:	4639      	mov	r1, r7
   d7b36:	f7ff f928 	bl	d6d8a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d7b3a:	b13d      	cbz	r5, d7b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7b3c:	493a      	ldr	r1, [pc, #232]	; (d7c28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7b3e:	2201      	movs	r2, #1
   d7b40:	a801      	add	r0, sp, #4
   d7b42:	f7ff f859 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7b46:	4629      	mov	r1, r5
   d7b48:	f7ff f91f 	bl	d6d8a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d7b4c:	7923      	ldrb	r3, [r4, #4]
   d7b4e:	07df      	lsls	r7, r3, #31
   d7b50:	d50e      	bpl.n	d7b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7b52:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7b54:	212f      	movs	r1, #47	; 0x2f
   d7b56:	4628      	mov	r0, r5
   d7b58:	f001 f843 	bl	d8be2 <strrchr>
    if (s1) {
   d7b5c:	b100      	cbz	r0, d7b60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7b5e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d7b60:	4932      	ldr	r1, [pc, #200]	; (d7c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7b62:	2201      	movs	r2, #1
   d7b64:	a801      	add	r0, sp, #4
   d7b66:	f7ff f847 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7b6a:	4629      	mov	r1, r5
   d7b6c:	f7ff f90d 	bl	d6d8a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d7b70:	7923      	ldrb	r3, [r4, #4]
   d7b72:	079d      	lsls	r5, r3, #30
   d7b74:	d507      	bpl.n	d7b86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7b76:	492e      	ldr	r1, [pc, #184]	; (d7c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7b78:	2202      	movs	r2, #2
   d7b7a:	a801      	add	r0, sp, #4
   d7b7c:	f7ff f83c 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7b80:	68e1      	ldr	r1, [r4, #12]
   d7b82:	f7fe ffc1 	bl	d6b08 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7b86:	7923      	ldrb	r3, [r4, #4]
   d7b88:	0758      	lsls	r0, r3, #29
   d7b8a:	d516      	bpl.n	d7bba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7b8c:	6925      	ldr	r5, [r4, #16]
   d7b8e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7b90:	463b      	mov	r3, r7
   d7b92:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7b96:	b13a      	cbz	r2, d7ba8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7b98:	2a20      	cmp	r2, #32
   d7b9a:	d101      	bne.n	d7ba0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7b9c:	461d      	mov	r5, r3
   d7b9e:	e001      	b.n	d7ba4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7ba0:	2a28      	cmp	r2, #40	; 0x28
   d7ba2:	d001      	beq.n	d7ba8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7ba4:	461f      	mov	r7, r3
   d7ba6:	e7f3      	b.n	d7b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7ba8:	2202      	movs	r2, #2
   d7baa:	4922      	ldr	r1, [pc, #136]	; (d7c34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7bac:	a801      	add	r0, sp, #4
   d7bae:	f7ff f823 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7bb2:	1b7a      	subs	r2, r7, r5
   d7bb4:	4629      	mov	r1, r5
   d7bb6:	f7ff f82e 	bl	d6c16 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7bba:	7923      	ldrb	r3, [r4, #4]
   d7bbc:	0719      	lsls	r1, r3, #28
   d7bbe:	d507      	bpl.n	d7bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7bc0:	491d      	ldr	r1, [pc, #116]	; (d7c38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7bc2:	2201      	movs	r2, #1
   d7bc4:	a801      	add	r0, sp, #4
   d7bc6:	f7ff f817 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7bca:	6961      	ldr	r1, [r4, #20]
   d7bcc:	f7fe ffae 	bl	d6b2c <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7bd0:	7923      	ldrb	r3, [r4, #4]
   d7bd2:	06da      	lsls	r2, r3, #27
   d7bd4:	d508      	bpl.n	d7be8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7bd6:	2204      	movs	r2, #4
   d7bd8:	4918      	ldr	r1, [pc, #96]	; (d7c3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7bda:	eb0d 0002 	add.w	r0, sp, r2
   d7bde:	f7ff f80b 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7be2:	69a1      	ldr	r1, [r4, #24]
   d7be4:	f7fe ff90 	bl	d6b08 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7be8:	7923      	ldrb	r3, [r4, #4]
   d7bea:	069b      	lsls	r3, r3, #26
   d7bec:	d507      	bpl.n	d7bfe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7bee:	4914      	ldr	r1, [pc, #80]	; (d7c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7bf0:	2206      	movs	r2, #6
   d7bf2:	a801      	add	r0, sp, #4
   d7bf4:	f7ff f800 	bl	d6bf8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7bf8:	69e1      	ldr	r1, [r4, #28]
   d7bfa:	f7ff f8c6 	bl	d6d8a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7bfe:	a801      	add	r0, sp, #4
   d7c00:	f7fe ff5f 	bl	d6ac2 <_ZN5spark10JSONWriter9endObjectEv>
   d7c04:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7c06:	490f      	ldr	r1, [pc, #60]	; (d7c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7c08:	6803      	ldr	r3, [r0, #0]
   d7c0a:	2202      	movs	r2, #2
   d7c0c:	68db      	ldr	r3, [r3, #12]
   d7c0e:	4798      	blx	r3
}
   d7c10:	b005      	add	sp, #20
   d7c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7c16:	bf00      	nop
   d7c18:	2003e5a8 	.word	0x2003e5a8
   d7c1c:	000d91b8 	.word	0x000d91b8
   d7c20:	000d9202 	.word	0x000d9202
   d7c24:	000d9215 	.word	0x000d9215
   d7c28:	000d92cd 	.word	0x000d92cd
   d7c2c:	000d929a 	.word	0x000d929a
   d7c30:	000d929c 	.word	0x000d929c
   d7c34:	000d929f 	.word	0x000d929f
   d7c38:	000d8d75 	.word	0x000d8d75
   d7c3c:	000d92a2 	.word	0x000d92a2
   d7c40:	000d92a7 	.word	0x000d92a7
   d7c44:	000d9297 	.word	0x000d9297

000d7c48 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c48:	2200      	movs	r2, #0
   d7c4a:	4611      	mov	r1, r2
   d7c4c:	6840      	ldr	r0, [r0, #4]
   d7c4e:	f7fd b9a1 	b.w	d4f94 <network_listening>

000d7c52 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7c52:	2200      	movs	r2, #0
   d7c54:	4611      	mov	r1, r2
   d7c56:	6840      	ldr	r0, [r0, #4]
   d7c58:	f7fd b9ac 	b.w	d4fb4 <network_get_listen_timeout>

000d7c5c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7c5c:	2200      	movs	r2, #0
   d7c5e:	6840      	ldr	r0, [r0, #4]
   d7c60:	f7fd b9a0 	b.w	d4fa4 <network_set_listen_timeout>

000d7c64 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c64:	2200      	movs	r2, #0
   d7c66:	f081 0101 	eor.w	r1, r1, #1
   d7c6a:	6840      	ldr	r0, [r0, #4]
   d7c6c:	f7fd b98a 	b.w	d4f84 <network_listen>

000d7c70 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7c70:	2300      	movs	r3, #0
   d7c72:	461a      	mov	r2, r3
   d7c74:	2101      	movs	r1, #1
   d7c76:	6840      	ldr	r0, [r0, #4]
   d7c78:	f7fd b97c 	b.w	d4f74 <network_off>

000d7c7c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7c7c:	2300      	movs	r3, #0
   d7c7e:	461a      	mov	r2, r3
   d7c80:	4619      	mov	r1, r3
   d7c82:	6840      	ldr	r0, [r0, #4]
   d7c84:	f7fd b96e 	b.w	d4f64 <network_on>

000d7c88 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7c88:	2200      	movs	r2, #0
   d7c8a:	4611      	mov	r1, r2
   d7c8c:	6840      	ldr	r0, [r0, #4]
   d7c8e:	f7fd b961 	b.w	d4f54 <network_ready>

000d7c92 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7c92:	2200      	movs	r2, #0
   d7c94:	4611      	mov	r1, r2
   d7c96:	6840      	ldr	r0, [r0, #4]
   d7c98:	f7fd b94c 	b.w	d4f34 <network_connecting>

000d7c9c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c9c:	2200      	movs	r2, #0
   d7c9e:	2102      	movs	r1, #2
   d7ca0:	6840      	ldr	r0, [r0, #4]
   d7ca2:	f7fd b94f 	b.w	d4f44 <network_disconnect>

000d7ca6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7ca6:	2300      	movs	r3, #0
   d7ca8:	461a      	mov	r2, r3
   d7caa:	6840      	ldr	r0, [r0, #4]
   d7cac:	f7fd b93a 	b.w	d4f24 <network_connect>

000d7cb0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7cb0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cb2:	4605      	mov	r5, r0
   d7cb4:	b188      	cbz	r0, d7cda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cb6:	6804      	ldr	r4, [r0, #0]
   d7cb8:	b14c      	cbz	r4, d7cce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7cba:	68a3      	ldr	r3, [r4, #8]
   d7cbc:	b11b      	cbz	r3, d7cc6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7cbe:	2203      	movs	r2, #3
   d7cc0:	4621      	mov	r1, r4
   d7cc2:	4620      	mov	r0, r4
   d7cc4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cc6:	2110      	movs	r1, #16
   d7cc8:	4620      	mov	r0, r4
   d7cca:	f000 fd60 	bl	d878e <_ZdlPvj>
   d7cce:	4628      	mov	r0, r5
   d7cd0:	2114      	movs	r1, #20
      }
   d7cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7cd6:	f000 bd5a 	b.w	d878e <_ZdlPvj>
   d7cda:	bd38      	pop	{r3, r4, r5, pc}

000d7cdc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7cdc:	b110      	cbz	r0, d7ce4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7cde:	6803      	ldr	r3, [r0, #0]
   d7ce0:	685b      	ldr	r3, [r3, #4]
   d7ce2:	4718      	bx	r3
   d7ce4:	4770      	bx	lr

000d7ce6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7ce6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7ce8:	6803      	ldr	r3, [r0, #0]
   d7cea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7cec:	b1bb      	cbz	r3, d7d1e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7cee:	6858      	ldr	r0, [r3, #4]
   d7cf0:	f7fc ff64 	bl	d4bbc <os_thread_is_current>
   d7cf4:	b978      	cbnz	r0, d7d16 <_ZN6ThreadD1Ev+0x30>
   d7cf6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7cf8:	7c5a      	ldrb	r2, [r3, #17]
   d7cfa:	b912      	cbnz	r2, d7d02 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7cfc:	6858      	ldr	r0, [r3, #4]
   d7cfe:	f7fc ff65 	bl	d4bcc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7d02:	6823      	ldr	r3, [r4, #0]
   d7d04:	6858      	ldr	r0, [r3, #4]
   d7d06:	f7fc ff69 	bl	d4bdc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d0a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7d0c:	2300      	movs	r3, #0
   d7d0e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7d10:	b128      	cbz	r0, d7d1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7d12:	f7ff ffcd 	bl	d7cb0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d16:	6820      	ldr	r0, [r4, #0]
   d7d18:	b108      	cbz	r0, d7d1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7d1a:	f7ff ffc9 	bl	d7cb0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7d1e:	4620      	mov	r0, r4
   d7d20:	bd10      	pop	{r4, pc}
	...

000d7d24 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7d24:	b538      	push	{r3, r4, r5, lr}
   d7d26:	4b0c      	ldr	r3, [pc, #48]	; (d7d58 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7d28:	6003      	str	r3, [r0, #0]
   d7d2a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d2c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7d30:	b108      	cbz	r0, d7d36 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7d32:	f7fc f9b4 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d36:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7d3a:	b135      	cbz	r5, d7d4a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d3c:	4628      	mov	r0, r5
   d7d3e:	f7ff ffd2 	bl	d7ce6 <_ZN6ThreadD1Ev>
   d7d42:	2104      	movs	r1, #4
   d7d44:	4628      	mov	r0, r5
   d7d46:	f000 fd22 	bl	d878e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d4a:	68a0      	ldr	r0, [r4, #8]
   d7d4c:	b108      	cbz	r0, d7d52 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d7d4e:	f7ff ffc5 	bl	d7cdc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7d52:	4620      	mov	r0, r4
   d7d54:	bd38      	pop	{r3, r4, r5, pc}
   d7d56:	bf00      	nop
   d7d58:	000d930c 	.word	0x000d930c

000d7d5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7d5c:	b538      	push	{r3, r4, r5, lr}
   d7d5e:	4c0e      	ldr	r4, [pc, #56]	; (d7d98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7d60:	4b0e      	ldr	r3, [pc, #56]	; (d7d9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7d62:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7d64:	2500      	movs	r5, #0
   d7d66:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7d68:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7d6c:	6063      	str	r3, [r4, #4]
   d7d6e:	60a5      	str	r5, [r4, #8]
   d7d70:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7d74:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7d78:	f7fc ff40 	bl	d4bfc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7d7c:	4b08      	ldr	r3, [pc, #32]	; (d7da0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7d7e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7d82:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7d86:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7d88:	4620      	mov	r0, r4
   d7d8a:	4a06      	ldr	r2, [pc, #24]	; (d7da4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7d8c:	4906      	ldr	r1, [pc, #24]	; (d7da8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7d92:	f000 bcf7 	b.w	d8784 <__aeabi_atexit>
   d7d96:	bf00      	nop
   d7d98:	2003e3d4 	.word	0x2003e3d4
   d7d9c:	000d9340 	.word	0x000d9340
   d7da0:	000d930c 	.word	0x000d930c
   d7da4:	2003d238 	.word	0x2003d238
   d7da8:	000d7d25 	.word	0x000d7d25

000d7dac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7dac:	2300      	movs	r3, #0
   d7dae:	461a      	mov	r2, r3
   d7db0:	6840      	ldr	r0, [r0, #4]
   d7db2:	f7fd b8b7 	b.w	d4f24 <network_connect>

000d7db6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7db6:	2200      	movs	r2, #0
   d7db8:	2102      	movs	r1, #2
   d7dba:	6840      	ldr	r0, [r0, #4]
   d7dbc:	f7fd b8c2 	b.w	d4f44 <network_disconnect>

000d7dc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7dc0:	2200      	movs	r2, #0
   d7dc2:	4611      	mov	r1, r2
   d7dc4:	6840      	ldr	r0, [r0, #4]
   d7dc6:	f7fd b8b5 	b.w	d4f34 <network_connecting>

000d7dca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7dca:	2200      	movs	r2, #0
   d7dcc:	4611      	mov	r1, r2
   d7dce:	6840      	ldr	r0, [r0, #4]
   d7dd0:	f7fd b8c0 	b.w	d4f54 <network_ready>

000d7dd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7dd4:	2300      	movs	r3, #0
   d7dd6:	461a      	mov	r2, r3
   d7dd8:	4619      	mov	r1, r3
   d7dda:	6840      	ldr	r0, [r0, #4]
   d7ddc:	f7fd b8c2 	b.w	d4f64 <network_on>

000d7de0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7de0:	2300      	movs	r3, #0
   d7de2:	461a      	mov	r2, r3
   d7de4:	4619      	mov	r1, r3
   d7de6:	6840      	ldr	r0, [r0, #4]
   d7de8:	f7fd b8c4 	b.w	d4f74 <network_off>

000d7dec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7dec:	2200      	movs	r2, #0
   d7dee:	f081 0101 	eor.w	r1, r1, #1
   d7df2:	6840      	ldr	r0, [r0, #4]
   d7df4:	f7fd b8c6 	b.w	d4f84 <network_listen>

000d7df8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7df8:	2200      	movs	r2, #0
   d7dfa:	6840      	ldr	r0, [r0, #4]
   d7dfc:	f7fd b8d2 	b.w	d4fa4 <network_set_listen_timeout>

000d7e00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7e00:	2200      	movs	r2, #0
   d7e02:	4611      	mov	r1, r2
   d7e04:	6840      	ldr	r0, [r0, #4]
   d7e06:	f7fd b8d5 	b.w	d4fb4 <network_get_listen_timeout>

000d7e0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7e0a:	2200      	movs	r2, #0
   d7e0c:	4611      	mov	r1, r2
   d7e0e:	6840      	ldr	r0, [r0, #4]
   d7e10:	f7fd b8c0 	b.w	d4f94 <network_listening>

000d7e14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e18:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e1a:	b095      	sub	sp, #84	; 0x54
   d7e1c:	4616      	mov	r6, r2
   d7e1e:	460d      	mov	r5, r1
   d7e20:	4607      	mov	r7, r0
    IPAddress addr;
   d7e22:	f7fe fd5d 	bl	d68e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7e26:	4621      	mov	r1, r4
   d7e28:	2220      	movs	r2, #32
   d7e2a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7e2e:	f000 fe54 	bl	d8ada <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7e32:	2340      	movs	r3, #64	; 0x40
   d7e34:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7e36:	4621      	mov	r1, r4
   d7e38:	466b      	mov	r3, sp
   d7e3a:	aa0c      	add	r2, sp, #48	; 0x30
   d7e3c:	4630      	mov	r0, r6
   d7e3e:	f7fc ff7d 	bl	d4d3c <netdb_getaddrinfo>
    if (!r) {
   d7e42:	4604      	mov	r4, r0
   d7e44:	2800      	cmp	r0, #0
   d7e46:	d144      	bne.n	d7ed2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e48:	4602      	mov	r2, r0
   d7e4a:	2101      	movs	r1, #1
   d7e4c:	6868      	ldr	r0, [r5, #4]
   d7e4e:	f7fd f881 	bl	d4f54 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e52:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e54:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e56:	4622      	mov	r2, r4
   d7e58:	6868      	ldr	r0, [r5, #4]
   d7e5a:	f7fd f87b 	bl	d4f54 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e5e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e60:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7e62:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e64:	2e00      	cmp	r6, #0
   d7e66:	d034      	beq.n	d7ed2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7e68:	2900      	cmp	r1, #0
   d7e6a:	d132      	bne.n	d7ed2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7e6c:	6873      	ldr	r3, [r6, #4]
   d7e6e:	2b02      	cmp	r3, #2
   d7e70:	d002      	beq.n	d7e78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7e72:	2b0a      	cmp	r3, #10
   d7e74:	d009      	beq.n	d7e8a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7e76:	e02a      	b.n	d7ece <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7e78:	f1b8 0f00 	cmp.w	r8, #0
   d7e7c:	d027      	beq.n	d7ece <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7e7e:	6971      	ldr	r1, [r6, #20]
   d7e80:	4638      	mov	r0, r7
   d7e82:	3104      	adds	r1, #4
   d7e84:	f7fe fd59 	bl	d693a <_ZN9IPAddressaSEPKh>
   d7e88:	e020      	b.n	d7ecc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7e8a:	f1b9 0f00 	cmp.w	r9, #0
   d7e8e:	d01e      	beq.n	d7ece <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7e90:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7e92:	2211      	movs	r2, #17
   d7e94:	a801      	add	r0, sp, #4
   d7e96:	f000 fe20 	bl	d8ada <memset>
                    a.v = 6;
   d7e9a:	2306      	movs	r3, #6
   d7e9c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7ea0:	ad01      	add	r5, sp, #4
   d7ea2:	f104 0308 	add.w	r3, r4, #8
   d7ea6:	3418      	adds	r4, #24
   d7ea8:	6818      	ldr	r0, [r3, #0]
   d7eaa:	6859      	ldr	r1, [r3, #4]
   d7eac:	462a      	mov	r2, r5
   d7eae:	c203      	stmia	r2!, {r0, r1}
   d7eb0:	3308      	adds	r3, #8
   d7eb2:	42a3      	cmp	r3, r4
   d7eb4:	4615      	mov	r5, r2
   d7eb6:	d1f7      	bne.n	d7ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7eb8:	a901      	add	r1, sp, #4
   d7eba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7ebc:	ad07      	add	r5, sp, #28
   d7ebe:	f7fe fd1d 	bl	d68fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ec4:	1d3c      	adds	r4, r7, #4
   d7ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ec8:	682b      	ldr	r3, [r5, #0]
   d7eca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7ecc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ece:	69f6      	ldr	r6, [r6, #28]
   d7ed0:	e7c8      	b.n	d7e64 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7ed2:	9800      	ldr	r0, [sp, #0]
   d7ed4:	f7fc ff2a 	bl	d4d2c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7ed8:	4638      	mov	r0, r7
   d7eda:	b015      	add	sp, #84	; 0x54
   d7edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7ee0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7ee0:	4b02      	ldr	r3, [pc, #8]	; (d7eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7ee2:	4a03      	ldr	r2, [pc, #12]	; (d7ef0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ee4:	601a      	str	r2, [r3, #0]
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	605a      	str	r2, [r3, #4]
   d7eea:	4770      	bx	lr
   d7eec:	2003e5a8 	.word	0x2003e5a8
   d7ef0:	000d9340 	.word	0x000d9340

000d7ef4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ef6:	4606      	mov	r6, r0
   d7ef8:	460d      	mov	r5, r1
   d7efa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7efc:	2400      	movs	r4, #0
  while (size--) {
   d7efe:	42bd      	cmp	r5, r7
   d7f00:	d00c      	beq.n	d7f1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7f02:	6833      	ldr	r3, [r6, #0]
   d7f04:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7f08:	689b      	ldr	r3, [r3, #8]
   d7f0a:	4630      	mov	r0, r6
   d7f0c:	4798      	blx	r3
     if (chunk>=0)
   d7f0e:	2800      	cmp	r0, #0
   d7f10:	db01      	blt.n	d7f16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7f12:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7f14:	e7f3      	b.n	d7efe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7f16:	2c00      	cmp	r4, #0
   d7f18:	bf08      	it	eq
   d7f1a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7f1c:	4620      	mov	r0, r4
   d7f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7f20:	b570      	push	{r4, r5, r6, lr}
   d7f22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7f24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7f26:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7f28:	b149      	cbz	r1, d7f3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7f2a:	f000 fe31 	bl	d8b90 <strlen>
   d7f2e:	682b      	ldr	r3, [r5, #0]
   d7f30:	4602      	mov	r2, r0
   d7f32:	4621      	mov	r1, r4
   d7f34:	4628      	mov	r0, r5
   d7f36:	68db      	ldr	r3, [r3, #12]
    }
   d7f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7f3c:	4718      	bx	r3
    }
   d7f3e:	bd70      	pop	{r4, r5, r6, pc}

000d7f40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7f40:	6803      	ldr	r3, [r0, #0]
   d7f42:	689b      	ldr	r3, [r3, #8]
   d7f44:	4718      	bx	r3

000d7f46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7f48:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f4a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7f4c:	f7ff fff8 	bl	d7f40 <_ZN5Print5printEc>
  n += print('\n');
   d7f50:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7f52:	4604      	mov	r4, r0
  n += print('\n');
   d7f54:	4628      	mov	r0, r5
   d7f56:	f7ff fff3 	bl	d7f40 <_ZN5Print5printEc>
  return n;
}
   d7f5a:	4420      	add	r0, r4
   d7f5c:	bd38      	pop	{r3, r4, r5, pc}

000d7f5e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f5e:	b530      	push	{r4, r5, lr}
   d7f60:	b08b      	sub	sp, #44	; 0x2c
   d7f62:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f64:	2100      	movs	r1, #0
   d7f66:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f6a:	2a01      	cmp	r2, #1
   d7f6c:	bf98      	it	ls
   d7f6e:	220a      	movls	r2, #10
   d7f70:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d7f74:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d7f78:	fb05 3312 	mls	r3, r5, r2, r3
   d7f7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f80:	2b09      	cmp	r3, #9
   d7f82:	bf94      	ite	ls
   d7f84:	3330      	addls	r3, #48	; 0x30
   d7f86:	3337      	addhi	r3, #55	; 0x37
   d7f88:	b2db      	uxtb	r3, r3
   d7f8a:	4621      	mov	r1, r4
   d7f8c:	f804 3901 	strb.w	r3, [r4], #-1
   d7f90:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7f92:	2d00      	cmp	r5, #0
   d7f94:	d1ee      	bne.n	d7f74 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7f96:	f7ff ffc3 	bl	d7f20 <_ZN5Print5writeEPKc>
}
   d7f9a:	b00b      	add	sp, #44	; 0x2c
   d7f9c:	bd30      	pop	{r4, r5, pc}

000d7f9e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7f9e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d7fa0:	b92a      	cbnz	r2, d7fae <_ZN5Print5printEmi+0x10>
   d7fa2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7fa8:	689b      	ldr	r3, [r3, #8]
   d7faa:	b2c9      	uxtb	r1, r1
   d7fac:	4718      	bx	r3
  else return printNumber(n, base);
   d7fae:	b2d2      	uxtb	r2, r2
}
   d7fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7fb4:	f7ff bfd3 	b.w	d7f5e <_ZN5Print11printNumberEmh>

000d7fb8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7fb8:	f7ff bff1 	b.w	d7f9e <_ZN5Print5printEmi>

000d7fbc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7fbc:	b40c      	push	{r2, r3}
   d7fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7fc2:	b087      	sub	sp, #28
   d7fc4:	af00      	add	r7, sp, #0
   d7fc6:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7fca:	4605      	mov	r5, r0
   d7fcc:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7fd0:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7fd2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7fd4:	4623      	mov	r3, r4
   d7fd6:	464a      	mov	r2, r9
   d7fd8:	2114      	movs	r1, #20
   d7fda:	1d38      	adds	r0, r7, #4
   d7fdc:	f7fd f80a 	bl	d4ff4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7fe0:	2813      	cmp	r0, #19
   d7fe2:	d805      	bhi.n	d7ff0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7fe4:	1d39      	adds	r1, r7, #4
   d7fe6:	4628      	mov	r0, r5
   d7fe8:	f7ff ff9a 	bl	d7f20 <_ZN5Print5writeEPKc>
   d7fec:	4604      	mov	r4, r0
   d7fee:	e013      	b.n	d8018 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7ff0:	f100 0308 	add.w	r3, r0, #8
   d7ff4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7ff8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7ffa:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7ffe:	1c41      	adds	r1, r0, #1
   d8000:	4623      	mov	r3, r4
   d8002:	464a      	mov	r2, r9
   d8004:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8006:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8008:	f7fc fff4 	bl	d4ff4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d800c:	4669      	mov	r1, sp
   d800e:	4628      	mov	r0, r5
   d8010:	f7ff ff86 	bl	d7f20 <_ZN5Print5writeEPKc>
   d8014:	4604      	mov	r4, r0
   d8016:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8018:	b11e      	cbz	r6, d8022 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d801a:	4628      	mov	r0, r5
   d801c:	f7ff ff93 	bl	d7f46 <_ZN5Print7printlnEv>
   d8020:	4404      	add	r4, r0
    return n;
}
   d8022:	4620      	mov	r0, r4
   d8024:	371c      	adds	r7, #28
   d8026:	46bd      	mov	sp, r7
   d8028:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d802c:	b002      	add	sp, #8
   d802e:	4770      	bx	lr

000d8030 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8030:	b510      	push	{r4, lr}
   d8032:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8034:	f7fe fb90 	bl	d6758 <_ZNSt14_Function_baseD1Ev>
   d8038:	4620      	mov	r0, r4
   d803a:	bd10      	pop	{r4, pc}

000d803c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d803c:	4803      	ldr	r0, [pc, #12]	; (d804c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d803e:	4a04      	ldr	r2, [pc, #16]	; (d8050 <_GLOBAL__sub_I_RGB+0x14>)
   d8040:	4904      	ldr	r1, [pc, #16]	; (d8054 <_GLOBAL__sub_I_RGB+0x18>)
   d8042:	2300      	movs	r3, #0
   d8044:	6083      	str	r3, [r0, #8]
   d8046:	f000 bb9d 	b.w	d8784 <__aeabi_atexit>
   d804a:	bf00      	nop
   d804c:	2003e5b0 	.word	0x2003e5b0
   d8050:	2003d238 	.word	0x2003d238
   d8054:	000d8031 	.word	0x000d8031

000d8058 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d8058:	4770      	bx	lr

000d805a <_ZN8SPIClassD0Ev>:
   d805a:	b510      	push	{r4, lr}
   d805c:	2110      	movs	r1, #16
   d805e:	4604      	mov	r4, r0
   d8060:	f000 fb95 	bl	d878e <_ZdlPvj>
   d8064:	4620      	mov	r0, r4
   d8066:	bd10      	pop	{r4, pc}

000d8068 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8068:	b570      	push	{r4, r5, r6, lr}
   d806a:	4b08      	ldr	r3, [pc, #32]	; (d808c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d806c:	6003      	str	r3, [r0, #0]
   d806e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d8070:	2500      	movs	r5, #0
   d8072:	460e      	mov	r6, r1
   d8074:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d8078:	f7fc fdb8 	bl	d4bec <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d807c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d807e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d8080:	f7fc fe64 	bl	d4d4c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d8084:	60a5      	str	r5, [r4, #8]
}
   d8086:	4620      	mov	r0, r4
   d8088:	bd70      	pop	{r4, r5, r6, pc}
   d808a:	bf00      	nop
   d808c:	000d9374 	.word	0x000d9374

000d8090 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d8090:	7900      	ldrb	r0, [r0, #4]
   d8092:	f7fc be63 	b.w	d4d5c <HAL_SPI_Is_Enabled>

000d8096 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8096:	2300      	movs	r3, #0
   d8098:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d809a:	6043      	str	r3, [r0, #4]
	len = 0;
   d809c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d809e:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d80a0:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d80a2:	680c      	ldr	r4, [r1, #0]
   d80a4:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d80a6:	684c      	ldr	r4, [r1, #4]
   d80a8:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d80aa:	688c      	ldr	r4, [r1, #8]
   d80ac:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d80ae:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d80b0:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d80b2:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d80b4:	bd10      	pop	{r4, pc}

000d80b6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d80b6:	b510      	push	{r4, lr}
   d80b8:	4604      	mov	r4, r0
{
	free(buffer);
   d80ba:	6800      	ldr	r0, [r0, #0]
   d80bc:	f7fc ff8a 	bl	d4fd4 <free>
}
   d80c0:	4620      	mov	r0, r4
   d80c2:	bd10      	pop	{r4, pc}

000d80c4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d80c4:	b510      	push	{r4, lr}
   d80c6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d80c8:	6800      	ldr	r0, [r0, #0]
   d80ca:	b108      	cbz	r0, d80d0 <_ZN6String10invalidateEv+0xc>
   d80cc:	f7fc ff82 	bl	d4fd4 <free>
	buffer = NULL;
   d80d0:	2300      	movs	r3, #0
   d80d2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d80d4:	60a3      	str	r3, [r4, #8]
   d80d6:	6063      	str	r3, [r4, #4]
   d80d8:	bd10      	pop	{r4, pc}

000d80da <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d80da:	b538      	push	{r3, r4, r5, lr}
   d80dc:	4604      	mov	r4, r0
   d80de:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d80e0:	6800      	ldr	r0, [r0, #0]
   d80e2:	3101      	adds	r1, #1
   d80e4:	f7fc ff7e 	bl	d4fe4 <realloc>
	if (newbuffer) {
   d80e8:	b110      	cbz	r0, d80f0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d80ea:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d80ee:	2001      	movs	r0, #1
	}
	return 0;
}
   d80f0:	bd38      	pop	{r3, r4, r5, pc}

000d80f2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d80f2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d80f4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d80f6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d80f8:	b113      	cbz	r3, d8100 <_ZN6String7reserveEj+0xe>
   d80fa:	6843      	ldr	r3, [r0, #4]
   d80fc:	428b      	cmp	r3, r1
   d80fe:	d207      	bcs.n	d8110 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8100:	4620      	mov	r0, r4
   d8102:	f7ff ffea 	bl	d80da <_ZN6String12changeBufferEj>
   d8106:	b120      	cbz	r0, d8112 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8108:	68a3      	ldr	r3, [r4, #8]
   d810a:	b90b      	cbnz	r3, d8110 <_ZN6String7reserveEj+0x1e>
   d810c:	6822      	ldr	r2, [r4, #0]
   d810e:	7013      	strb	r3, [r2, #0]
   d8110:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8112:	bd10      	pop	{r4, pc}

000d8114 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8114:	b570      	push	{r4, r5, r6, lr}
   d8116:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8118:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d811a:	4604      	mov	r4, r0
   d811c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d811e:	f7ff ffe8 	bl	d80f2 <_ZN6String7reserveEj>
   d8122:	b918      	cbnz	r0, d812c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8124:	4620      	mov	r0, r4
   d8126:	f7ff ffcd 	bl	d80c4 <_ZN6String10invalidateEv>
		return *this;
   d812a:	e009      	b.n	d8140 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d812c:	462a      	mov	r2, r5
   d812e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8130:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8132:	6820      	ldr	r0, [r4, #0]
   d8134:	f000 fcab 	bl	d8a8e <memcpy>
	buffer[len] = 0;
   d8138:	6822      	ldr	r2, [r4, #0]
   d813a:	68a3      	ldr	r3, [r4, #8]
   d813c:	2100      	movs	r1, #0
   d813e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8140:	4620      	mov	r0, r4
   d8142:	bd70      	pop	{r4, r5, r6, pc}

000d8144 <_ZN6StringC1EPKcj>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8144:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const char *cstr, unsigned int length)
   d8146:	b510      	push	{r4, lr}
   d8148:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d814a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d814c:	6043      	str	r3, [r0, #4]
	len = 0;
   d814e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8150:	7303      	strb	r3, [r0, #12]
}

String::String(const char *cstr, unsigned int length)
{
	init();
	if (cstr) copy(cstr, length);
   d8152:	b109      	cbz	r1, d8158 <_ZN6StringC1EPKcj+0x14>
   d8154:	f7ff ffde 	bl	d8114 <_ZN6String4copyEPKcj>
}
   d8158:	4620      	mov	r0, r4
   d815a:	bd10      	pop	{r4, pc}

000d815c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d815c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d815e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8160:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8162:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8164:	6043      	str	r3, [r0, #4]
	len = 0;
   d8166:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8168:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d816a:	460d      	mov	r5, r1
   d816c:	b139      	cbz	r1, d817e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d816e:	4608      	mov	r0, r1
   d8170:	f000 fd0e 	bl	d8b90 <strlen>
   d8174:	4629      	mov	r1, r5
   d8176:	4602      	mov	r2, r0
   d8178:	4620      	mov	r0, r4
   d817a:	f7ff ffcb 	bl	d8114 <_ZN6String4copyEPKcj>
}
   d817e:	4620      	mov	r0, r4
   d8180:	bd38      	pop	{r3, r4, r5, pc}

000d8182 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8182:	b538      	push	{r3, r4, r5, lr}
   d8184:	4605      	mov	r5, r0
	if (buffer) {
   d8186:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8188:	460c      	mov	r4, r1
	if (buffer) {
   d818a:	b160      	cbz	r0, d81a6 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d818c:	686a      	ldr	r2, [r5, #4]
   d818e:	688b      	ldr	r3, [r1, #8]
   d8190:	429a      	cmp	r2, r3
   d8192:	d306      	bcc.n	d81a2 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d8194:	6809      	ldr	r1, [r1, #0]
   d8196:	f000 fcf3 	bl	d8b80 <strcpy>
			len = rhs.len;
   d819a:	68a3      	ldr	r3, [r4, #8]
   d819c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d819e:	2300      	movs	r3, #0
   d81a0:	e00a      	b.n	d81b8 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d81a2:	f7fc ff17 	bl	d4fd4 <free>
		}
	}
	buffer = rhs.buffer;
   d81a6:	6823      	ldr	r3, [r4, #0]
   d81a8:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d81aa:	6863      	ldr	r3, [r4, #4]
   d81ac:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d81ae:	68a3      	ldr	r3, [r4, #8]
   d81b0:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d81b2:	2300      	movs	r3, #0
   d81b4:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d81b6:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d81b8:	60a3      	str	r3, [r4, #8]
   d81ba:	bd38      	pop	{r3, r4, r5, pc}

000d81bc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d81bc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d81be:	b510      	push	{r4, lr}
   d81c0:	460b      	mov	r3, r1
   d81c2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d81c4:	d007      	beq.n	d81d6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d81c6:	6809      	ldr	r1, [r1, #0]
   d81c8:	b119      	cbz	r1, d81d2 <_ZN6StringaSERKS_+0x16>
   d81ca:	689a      	ldr	r2, [r3, #8]
   d81cc:	f7ff ffa2 	bl	d8114 <_ZN6String4copyEPKcj>
   d81d0:	e001      	b.n	d81d6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d81d2:	f7ff ff77 	bl	d80c4 <_ZN6String10invalidateEv>

	return *this;
}
   d81d6:	4620      	mov	r0, r4
   d81d8:	bd10      	pop	{r4, pc}

000d81da <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d81da:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d81dc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d81de:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d81e0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d81e2:	6043      	str	r3, [r0, #4]
	len = 0;
   d81e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d81e6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d81e8:	f7ff ffe8 	bl	d81bc <_ZN6StringaSERKS_>
}
   d81ec:	4620      	mov	r0, r4
   d81ee:	bd10      	pop	{r4, pc}

000d81f0 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d81f0:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d81f2:	b510      	push	{r4, lr}
   d81f4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d81f6:	d001      	beq.n	d81fc <_ZN6StringaSEOS_+0xc>
   d81f8:	f7ff ffc3 	bl	d8182 <_ZN6String4moveERS_>
	return *this;
}
   d81fc:	4620      	mov	r0, r4
   d81fe:	bd10      	pop	{r4, pc}

000d8200 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8200:	b538      	push	{r3, r4, r5, lr}
   d8202:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8204:	460c      	mov	r4, r1
   d8206:	b141      	cbz	r1, d821a <_ZN6StringaSEPKc+0x1a>
   d8208:	4608      	mov	r0, r1
   d820a:	f000 fcc1 	bl	d8b90 <strlen>
   d820e:	4621      	mov	r1, r4
   d8210:	4602      	mov	r2, r0
   d8212:	4628      	mov	r0, r5
   d8214:	f7ff ff7e 	bl	d8114 <_ZN6String4copyEPKcj>
   d8218:	e001      	b.n	d821e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d821a:	f7ff ff53 	bl	d80c4 <_ZN6String10invalidateEv>

	return *this;
}
   d821e:	4628      	mov	r0, r5
   d8220:	bd38      	pop	{r3, r4, r5, pc}

000d8222 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8222:	b570      	push	{r4, r5, r6, lr}
   d8224:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8226:	460e      	mov	r6, r1
   d8228:	b909      	cbnz	r1, d822e <_ZN6String6concatEPKcj+0xc>
   d822a:	2000      	movs	r0, #0
   d822c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d822e:	b16a      	cbz	r2, d824c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d8230:	6883      	ldr	r3, [r0, #8]
   d8232:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d8234:	4629      	mov	r1, r5
   d8236:	f7ff ff5c 	bl	d80f2 <_ZN6String7reserveEj>
   d823a:	2800      	cmp	r0, #0
   d823c:	d0f5      	beq.n	d822a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d823e:	6820      	ldr	r0, [r4, #0]
   d8240:	68a3      	ldr	r3, [r4, #8]
   d8242:	4631      	mov	r1, r6
   d8244:	4418      	add	r0, r3
   d8246:	f000 fc9b 	bl	d8b80 <strcpy>
	len = newlen;
   d824a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d824c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d824e:	bd70      	pop	{r4, r5, r6, pc}

000d8250 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d8250:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8252:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d8254:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d8258:	2201      	movs	r2, #1
   d825a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d825c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8260:	f7ff ffdf 	bl	d8222 <_ZN6String6concatEPKcj>
}
   d8264:	b003      	add	sp, #12
   d8266:	f85d fb04 	ldr.w	pc, [sp], #4

000d826a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d826a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d826c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d826e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8270:	b912      	cbnz	r2, d8278 <_ZNK6String6equalsEPKc+0xe>
   d8272:	b919      	cbnz	r1, d827c <_ZNK6String6equalsEPKc+0x12>
   d8274:	2001      	movs	r0, #1
   d8276:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8278:	b911      	cbnz	r1, d8280 <_ZNK6String6equalsEPKc+0x16>
   d827a:	6803      	ldr	r3, [r0, #0]
   d827c:	7818      	ldrb	r0, [r3, #0]
   d827e:	e002      	b.n	d8286 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d8280:	6800      	ldr	r0, [r0, #0]
   d8282:	f000 fc73 	bl	d8b6c <strcmp>
   d8286:	fab0 f080 	clz	r0, r0
   d828a:	0940      	lsrs	r0, r0, #5
}
   d828c:	bd08      	pop	{r3, pc}
	...

000d8290 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d8290:	4b04      	ldr	r3, [pc, #16]	; (d82a4 <_GLOBAL__sub_I_System+0x14>)
   d8292:	2000      	movs	r0, #0
   d8294:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8298:	7018      	strb	r0, [r3, #0]
   d829a:	8058      	strh	r0, [r3, #2]
   d829c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d829e:	f7fc be1d 	b.w	d4edc <set_system_mode>
   d82a2:	bf00      	nop
   d82a4:	2003e5c0 	.word	0x2003e5c0

000d82a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d82a8:	4b02      	ldr	r3, [pc, #8]	; (d82b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d82aa:	681a      	ldr	r2, [r3, #0]
   d82ac:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d82ae:	601a      	str	r2, [r3, #0]
   d82b0:	4770      	bx	lr
   d82b2:	bf00      	nop
   d82b4:	2003d1cc 	.word	0x2003d1cc
   d82b8:	2003e5c8 	.word	0x2003e5c8

000d82bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d82bc:	4770      	bx	lr

000d82be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d82be:	7441      	strb	r1, [r0, #17]
   d82c0:	4770      	bx	lr

000d82c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d82c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d82c4:	7c00      	ldrb	r0, [r0, #16]
   d82c6:	f7fc fd91 	bl	d4dec <HAL_USART_Available_Data_For_Write>
}
   d82ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82ce:	bd08      	pop	{r3, pc}

000d82d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d82d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d82d2:	7c00      	ldrb	r0, [r0, #16]
   d82d4:	f7fc fd62 	bl	d4d9c <HAL_USART_Available_Data>
}
   d82d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82dc:	bd08      	pop	{r3, pc}

000d82de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d82de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d82e0:	7c00      	ldrb	r0, [r0, #16]
   d82e2:	f7fc fd6b 	bl	d4dbc <HAL_USART_Peek_Data>
}
   d82e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82ea:	bf28      	it	cs
   d82ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d82f0:	bd08      	pop	{r3, pc}

000d82f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d82f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d82f4:	7c00      	ldrb	r0, [r0, #16]
   d82f6:	f7fc fd59 	bl	d4dac <HAL_USART_Read_Data>
}
   d82fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d82fe:	bf28      	it	cs
   d8300:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8304:	bd08      	pop	{r3, pc}

000d8306 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8306:	7c00      	ldrb	r0, [r0, #16]
   d8308:	f7fc bd60 	b.w	d4dcc <HAL_USART_Flush_Data>

000d830c <_ZN11USARTSerialD0Ev>:
   d830c:	b510      	push	{r4, lr}
   d830e:	2114      	movs	r1, #20
   d8310:	4604      	mov	r4, r0
   d8312:	f000 fa3c 	bl	d878e <_ZdlPvj>
   d8316:	4620      	mov	r0, r4
   d8318:	bd10      	pop	{r4, pc}

000d831a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d831a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d831c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d831e:	4604      	mov	r4, r0
   d8320:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8322:	b925      	cbnz	r5, d832e <_ZN11USARTSerial5writeEh+0x14>
   d8324:	7c00      	ldrb	r0, [r0, #16]
   d8326:	f7fc fd61 	bl	d4dec <HAL_USART_Available_Data_For_Write>
   d832a:	2800      	cmp	r0, #0
   d832c:	dd05      	ble.n	d833a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d832e:	4631      	mov	r1, r6
   d8330:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8336:	f7fc bd29 	b.w	d4d8c <HAL_USART_Write_Data>
  }
  return 0;
}
   d833a:	4628      	mov	r0, r5
   d833c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8340 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8340:	b510      	push	{r4, lr}
   d8342:	4604      	mov	r4, r0
   d8344:	4608      	mov	r0, r1
   d8346:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8348:	2200      	movs	r2, #0
   d834a:	6062      	str	r2, [r4, #4]
   d834c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8350:	60a2      	str	r2, [r4, #8]
   d8352:	4a05      	ldr	r2, [pc, #20]	; (d8368 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8354:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8356:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8358:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d835a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d835c:	461a      	mov	r2, r3
   d835e:	f7fc fd05 	bl	d4d6c <HAL_USART_Init>
}
   d8362:	4620      	mov	r0, r4
   d8364:	bd10      	pop	{r4, pc}
   d8366:	bf00      	nop
   d8368:	000d93b0 	.word	0x000d93b0

000d836c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d836c:	2300      	movs	r3, #0
   d836e:	7c00      	ldrb	r0, [r0, #16]
   d8370:	f7fc bd44 	b.w	d4dfc <HAL_USART_BeginConfig>

000d8374 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8374:	2200      	movs	r2, #0
   d8376:	f7ff bff9 	b.w	d836c <_ZN11USARTSerial5beginEmm>

000d837a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d837a:	7c00      	ldrb	r0, [r0, #16]
   d837c:	f7fc bcfe 	b.w	d4d7c <HAL_USART_End>

000d8380 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8380:	7c00      	ldrb	r0, [r0, #16]
   d8382:	f7fc bd2b 	b.w	d4ddc <HAL_USART_Is_Enabled>
	...

000d8388 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8388:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d838a:	4d0c      	ldr	r5, [pc, #48]	; (d83bc <_Z22__fetch_global_Serial1v+0x34>)
   d838c:	6829      	ldr	r1, [r5, #0]
   d838e:	f011 0401 	ands.w	r4, r1, #1
   d8392:	d111      	bne.n	d83b8 <_Z22__fetch_global_Serial1v+0x30>
   d8394:	4628      	mov	r0, r5
   d8396:	f7fb fe8f 	bl	d40b8 <__cxa_guard_acquire>
   d839a:	b168      	cbz	r0, d83b8 <_Z22__fetch_global_Serial1v+0x30>
   d839c:	4a08      	ldr	r2, [pc, #32]	; (d83c0 <_Z22__fetch_global_Serial1v+0x38>)
   d839e:	4b09      	ldr	r3, [pc, #36]	; (d83c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d83a0:	4809      	ldr	r0, [pc, #36]	; (d83c8 <_Z22__fetch_global_Serial1v+0x40>)
   d83a2:	4621      	mov	r1, r4
   d83a4:	f7ff ffcc 	bl	d8340 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d83a8:	4628      	mov	r0, r5
   d83aa:	f7fb fe8a 	bl	d40c2 <__cxa_guard_release>
   d83ae:	4a07      	ldr	r2, [pc, #28]	; (d83cc <_Z22__fetch_global_Serial1v+0x44>)
   d83b0:	4907      	ldr	r1, [pc, #28]	; (d83d0 <_Z22__fetch_global_Serial1v+0x48>)
   d83b2:	4805      	ldr	r0, [pc, #20]	; (d83c8 <_Z22__fetch_global_Serial1v+0x40>)
   d83b4:	f000 f9e6 	bl	d8784 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d83b8:	4803      	ldr	r0, [pc, #12]	; (d83c8 <_Z22__fetch_global_Serial1v+0x40>)
   d83ba:	bd38      	pop	{r3, r4, r5, pc}
   d83bc:	2003e664 	.word	0x2003e664
   d83c0:	2003e668 	.word	0x2003e668
   d83c4:	2003e5e0 	.word	0x2003e5e0
   d83c8:	2003e5cc 	.word	0x2003e5cc
   d83cc:	2003d238 	.word	0x2003d238
   d83d0:	000d82bd 	.word	0x000d82bd

000d83d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83d4:	7441      	strb	r1, [r0, #17]
   d83d6:	4770      	bx	lr

000d83d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d83d8:	4770      	bx	lr

000d83da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d83da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d83dc:	2100      	movs	r1, #0
   d83de:	7c00      	ldrb	r0, [r0, #16]
   d83e0:	f7fc fd3c 	bl	d4e5c <HAL_USB_USART_Receive_Data>
}
   d83e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d83e8:	bf28      	it	cs
   d83ea:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d83ee:	bd08      	pop	{r3, pc}

000d83f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d83f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d83f2:	2101      	movs	r1, #1
   d83f4:	7c00      	ldrb	r0, [r0, #16]
   d83f6:	f7fc fd31 	bl	d4e5c <HAL_USB_USART_Receive_Data>
}
   d83fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d83fe:	bf28      	it	cs
   d8400:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8404:	bd08      	pop	{r3, pc}

000d8406 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8406:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8408:	7c00      	ldrb	r0, [r0, #16]
   d840a:	f7fc fd1f 	bl	d4e4c <HAL_USB_USART_Available_Data_For_Write>
}
   d840e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8412:	bd08      	pop	{r3, pc}

000d8414 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8414:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8416:	7c00      	ldrb	r0, [r0, #16]
   d8418:	f7fc fd10 	bl	d4e3c <HAL_USB_USART_Available_Data>
}
   d841c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8420:	bd08      	pop	{r3, pc}

000d8422 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8422:	7c00      	ldrb	r0, [r0, #16]
   d8424:	f7fc bd2a 	b.w	d4e7c <HAL_USB_USART_Flush_Data>

000d8428 <_ZN9USBSerialD0Ev>:
   d8428:	b510      	push	{r4, lr}
   d842a:	2114      	movs	r1, #20
   d842c:	4604      	mov	r4, r0
   d842e:	f000 f9ae 	bl	d878e <_ZdlPvj>
   d8432:	4620      	mov	r0, r4
   d8434:	bd10      	pop	{r4, pc}

000d8436 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8436:	b538      	push	{r3, r4, r5, lr}
   d8438:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d843a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d843c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d843e:	f7fc fd05 	bl	d4e4c <HAL_USB_USART_Available_Data_For_Write>
   d8442:	2800      	cmp	r0, #0
   d8444:	dc01      	bgt.n	d844a <_ZN9USBSerial5writeEh+0x14>
   d8446:	7c60      	ldrb	r0, [r4, #17]
   d8448:	b128      	cbz	r0, d8456 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d844a:	4629      	mov	r1, r5
   d844c:	7c20      	ldrb	r0, [r4, #16]
   d844e:	f7fc fd0d 	bl	d4e6c <HAL_USB_USART_Send_Data>
   d8452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8456:	bd38      	pop	{r3, r4, r5, pc}

000d8458 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8458:	b510      	push	{r4, lr}
   d845a:	4604      	mov	r4, r0
   d845c:	2300      	movs	r3, #0
   d845e:	6063      	str	r3, [r4, #4]
   d8460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8464:	60a3      	str	r3, [r4, #8]
   d8466:	4b05      	ldr	r3, [pc, #20]	; (d847c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8468:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d846a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d846c:	4608      	mov	r0, r1
{
  _serial = serial;
   d846e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8470:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8472:	4611      	mov	r1, r2
   d8474:	f7fc fcca 	bl	d4e0c <HAL_USB_USART_Init>
}
   d8478:	4620      	mov	r0, r4
   d847a:	bd10      	pop	{r4, pc}
   d847c:	000d93e0 	.word	0x000d93e0

000d8480 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8480:	2200      	movs	r2, #0
   d8482:	7c00      	ldrb	r0, [r0, #16]
   d8484:	f7fc bcca 	b.w	d4e1c <HAL_USB_USART_Begin>

000d8488 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8488:	7c00      	ldrb	r0, [r0, #16]
   d848a:	f7fc bccf 	b.w	d4e2c <HAL_USB_USART_End>

000d848e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d848e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8490:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8492:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8494:	2100      	movs	r1, #0
   d8496:	f000 fb20 	bl	d8ada <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d849a:	4620      	mov	r0, r4
   d849c:	bd10      	pop	{r4, pc}
	...

000d84a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d84a0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84a2:	4d0e      	ldr	r5, [pc, #56]	; (d84dc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d84a4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d84a6:	a801      	add	r0, sp, #4
   d84a8:	f7ff fff1 	bl	d848e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d84ac:	6829      	ldr	r1, [r5, #0]
   d84ae:	f011 0401 	ands.w	r4, r1, #1
   d84b2:	d110      	bne.n	d84d6 <_Z16_fetch_usbserialv+0x36>
   d84b4:	4628      	mov	r0, r5
   d84b6:	f7fb fdff 	bl	d40b8 <__cxa_guard_acquire>
   d84ba:	b160      	cbz	r0, d84d6 <_Z16_fetch_usbserialv+0x36>
   d84bc:	aa01      	add	r2, sp, #4
   d84be:	4621      	mov	r1, r4
   d84c0:	4807      	ldr	r0, [pc, #28]	; (d84e0 <_Z16_fetch_usbserialv+0x40>)
   d84c2:	f7ff ffc9 	bl	d8458 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d84c6:	4628      	mov	r0, r5
   d84c8:	f7fb fdfb 	bl	d40c2 <__cxa_guard_release>
   d84cc:	4a05      	ldr	r2, [pc, #20]	; (d84e4 <_Z16_fetch_usbserialv+0x44>)
   d84ce:	4906      	ldr	r1, [pc, #24]	; (d84e8 <_Z16_fetch_usbserialv+0x48>)
   d84d0:	4803      	ldr	r0, [pc, #12]	; (d84e0 <_Z16_fetch_usbserialv+0x40>)
   d84d2:	f000 f957 	bl	d8784 <__aeabi_atexit>
	return _usbserial;
}
   d84d6:	4802      	ldr	r0, [pc, #8]	; (d84e0 <_Z16_fetch_usbserialv+0x40>)
   d84d8:	b007      	add	sp, #28
   d84da:	bd30      	pop	{r4, r5, pc}
   d84dc:	2003e6ec 	.word	0x2003e6ec
   d84e0:	2003e6f0 	.word	0x2003e6f0
   d84e4:	2003d238 	.word	0x2003d238
   d84e8:	000d83d9 	.word	0x000d83d9

000d84ec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d84ec:	2200      	movs	r2, #0
   d84ee:	4611      	mov	r1, r2
   d84f0:	6840      	ldr	r0, [r0, #4]
   d84f2:	f7fc bd2f 	b.w	d4f54 <network_ready>

000d84f6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d84f6:	2200      	movs	r2, #0
   d84f8:	4611      	mov	r1, r2
   d84fa:	6840      	ldr	r0, [r0, #4]
   d84fc:	f7fc bd4a 	b.w	d4f94 <network_listening>

000d8500 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8500:	2200      	movs	r2, #0
   d8502:	4611      	mov	r1, r2
   d8504:	6840      	ldr	r0, [r0, #4]
   d8506:	f7fc bd55 	b.w	d4fb4 <network_get_listen_timeout>

000d850a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d850a:	2200      	movs	r2, #0
   d850c:	6840      	ldr	r0, [r0, #4]
   d850e:	f7fc bd49 	b.w	d4fa4 <network_set_listen_timeout>

000d8512 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8512:	2200      	movs	r2, #0
   d8514:	f081 0101 	eor.w	r1, r1, #1
   d8518:	6840      	ldr	r0, [r0, #4]
   d851a:	f7fc bd33 	b.w	d4f84 <network_listen>

000d851e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d851e:	2300      	movs	r3, #0
   d8520:	461a      	mov	r2, r3
   d8522:	4619      	mov	r1, r3
   d8524:	6840      	ldr	r0, [r0, #4]
   d8526:	f7fc bd25 	b.w	d4f74 <network_off>

000d852a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d852a:	2300      	movs	r3, #0
   d852c:	461a      	mov	r2, r3
   d852e:	4619      	mov	r1, r3
   d8530:	6840      	ldr	r0, [r0, #4]
   d8532:	f7fc bd17 	b.w	d4f64 <network_on>

000d8536 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8536:	2200      	movs	r2, #0
   d8538:	4611      	mov	r1, r2
   d853a:	6840      	ldr	r0, [r0, #4]
   d853c:	f7fc bcfa 	b.w	d4f34 <network_connecting>

000d8540 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8540:	2200      	movs	r2, #0
   d8542:	2102      	movs	r1, #2
   d8544:	6840      	ldr	r0, [r0, #4]
   d8546:	f7fc bcfd 	b.w	d4f44 <network_disconnect>

000d854a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d854a:	2300      	movs	r3, #0
   d854c:	461a      	mov	r2, r3
   d854e:	6840      	ldr	r0, [r0, #4]
   d8550:	f7fc bce8 	b.w	d4f24 <network_connect>

000d8554 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8554:	4b02      	ldr	r3, [pc, #8]	; (d8560 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8556:	2204      	movs	r2, #4
   d8558:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d855a:	4a02      	ldr	r2, [pc, #8]	; (d8564 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d855c:	601a      	str	r2, [r3, #0]
   d855e:	4770      	bx	lr
   d8560:	2003e704 	.word	0x2003e704
   d8564:	000d9410 	.word	0x000d9410

000d8568 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8568:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d856a:	4b0c      	ldr	r3, [pc, #48]	; (d859c <serialEventRun+0x34>)
   d856c:	b133      	cbz	r3, d857c <serialEventRun+0x14>
   d856e:	f7ff ff97 	bl	d84a0 <_Z16_fetch_usbserialv>
   d8572:	6803      	ldr	r3, [r0, #0]
   d8574:	691b      	ldr	r3, [r3, #16]
   d8576:	4798      	blx	r3
   d8578:	2800      	cmp	r0, #0
   d857a:	dc09      	bgt.n	d8590 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d857c:	4b08      	ldr	r3, [pc, #32]	; (d85a0 <serialEventRun+0x38>)
   d857e:	b163      	cbz	r3, d859a <serialEventRun+0x32>
   d8580:	f7ff ff02 	bl	d8388 <_Z22__fetch_global_Serial1v>
   d8584:	6803      	ldr	r3, [r0, #0]
   d8586:	691b      	ldr	r3, [r3, #16]
   d8588:	4798      	blx	r3
   d858a:	2800      	cmp	r0, #0
   d858c:	dc03      	bgt.n	d8596 <serialEventRun+0x2e>
   d858e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8590:	f3af 8000 	nop.w
   d8594:	e7f2      	b.n	d857c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8596:	f3af 8000 	nop.w
   d859a:	bd08      	pop	{r3, pc}
	...

000d85a4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d85a4:	b508      	push	{r3, lr}
	serialEventRun();
   d85a6:	f7ff ffdf 	bl	d8568 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d85aa:	f7fc fb4f 	bl	d4c4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d85ae:	4b01      	ldr	r3, [pc, #4]	; (d85b4 <_post_loop+0x10>)
   d85b0:	6018      	str	r0, [r3, #0]
   d85b2:	bd08      	pop	{r3, pc}
   d85b4:	2003e710 	.word	0x2003e710

000d85b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d85b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85ba:	2300      	movs	r3, #0
   d85bc:	9300      	str	r3, [sp, #0]
   d85be:	461a      	mov	r2, r3
   d85c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85c4:	f7fc fc9c 	bl	d4f00 <system_ctrl_set_result>
}
   d85c8:	b003      	add	sp, #12
   d85ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d85d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d85d2:	8843      	ldrh	r3, [r0, #2]
   d85d4:	2b0a      	cmp	r3, #10
   d85d6:	d008      	beq.n	d85ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d85d8:	2b50      	cmp	r3, #80	; 0x50
   d85da:	d109      	bne.n	d85f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d85dc:	4b09      	ldr	r3, [pc, #36]	; (d8604 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d85de:	681b      	ldr	r3, [r3, #0]
   d85e0:	b13b      	cbz	r3, d85f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d85e2:	b003      	add	sp, #12
   d85e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d85e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d85ea:	f7ff ffe5 	bl	d85b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d85ee:	e006      	b.n	d85fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85f0:	2300      	movs	r3, #0
   d85f2:	9300      	str	r3, [sp, #0]
   d85f4:	461a      	mov	r2, r3
   d85f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85fa:	f7fc fc81 	bl	d4f00 <system_ctrl_set_result>
        break;
    }
}
   d85fe:	b003      	add	sp, #12
   d8600:	f85d fb04 	ldr.w	pc, [sp], #4
   d8604:	2003e70c 	.word	0x2003e70c

000d8608 <module_user_init_hook>:

void module_user_init_hook()
{
   d8608:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d860a:	f7fc fb0f 	bl	d4c2c <HAL_RNG_GetRandomNumber>
   d860e:	4604      	mov	r4, r0
    srand(seed);
   d8610:	f000 fa6c 	bl	d8aec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8614:	4b07      	ldr	r3, [pc, #28]	; (d8634 <module_user_init_hook+0x2c>)
   d8616:	b113      	cbz	r3, d861e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d8618:	4620      	mov	r0, r4
   d861a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d861e:	2100      	movs	r1, #0
   d8620:	4804      	ldr	r0, [pc, #16]	; (d8634 <module_user_init_hook+0x2c>)
   d8622:	f7fc fc77 	bl	d4f14 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8626:	2100      	movs	r1, #0
   d8628:	4803      	ldr	r0, [pc, #12]	; (d8638 <module_user_init_hook+0x30>)
}
   d862a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d862e:	f7fc bc5d 	b.w	d4eec <system_ctrl_set_app_request_handler>
   d8632:	bf00      	nop
   d8634:	00000000 	.word	0x00000000
   d8638:	000d85d1 	.word	0x000d85d1

000d863c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d863c:	b510      	push	{r4, lr}
   d863e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8640:	480f      	ldr	r0, [pc, #60]	; (d8680 <pinAvailable+0x44>)
   d8642:	f7ff fd25 	bl	d8090 <_ZN8SPIClass9isEnabledEv>
   d8646:	b128      	cbz	r0, d8654 <pinAvailable+0x18>
   d8648:	f1a4 030b 	sub.w	r3, r4, #11
   d864c:	2b02      	cmp	r3, #2
   d864e:	d801      	bhi.n	d8654 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8650:	2000      	movs	r0, #0
   d8652:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8654:	f000 f854 	bl	d8700 <_Z19__fetch_global_Wirev>
   d8658:	f7fe f904 	bl	d6864 <_ZN7TwoWire9isEnabledEv>
   d865c:	b108      	cbz	r0, d8662 <pinAvailable+0x26>
   d865e:	2c01      	cmp	r4, #1
   d8660:	d9f6      	bls.n	d8650 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8662:	f7ff fe91 	bl	d8388 <_Z22__fetch_global_Serial1v>
   d8666:	f7ff fe8b 	bl	d8380 <_ZN11USARTSerial9isEnabledEv>
   d866a:	b118      	cbz	r0, d8674 <pinAvailable+0x38>
   d866c:	f1a4 0309 	sub.w	r3, r4, #9
   d8670:	2b01      	cmp	r3, #1
   d8672:	d9ed      	bls.n	d8650 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8674:	2c23      	cmp	r4, #35	; 0x23
   d8676:	bf8c      	ite	hi
   d8678:	2000      	movhi	r0, #0
   d867a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d867c:	bd10      	pop	{r4, pc}
   d867e:	bf00      	nop
   d8680:	2003e72c 	.word	0x2003e72c

000d8684 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8684:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8686:	b538      	push	{r3, r4, r5, lr}
   d8688:	4604      	mov	r4, r0
   d868a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d868c:	d80a      	bhi.n	d86a4 <pinMode+0x20>
   d868e:	29ff      	cmp	r1, #255	; 0xff
   d8690:	d008      	beq.n	d86a4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8692:	f7ff ffd3 	bl	d863c <pinAvailable>
   d8696:	b128      	cbz	r0, d86a4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8698:	4629      	mov	r1, r5
   d869a:	4620      	mov	r0, r4
}
   d869c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d86a0:	f7fc bae4 	b.w	d4c6c <HAL_Pin_Mode>
   d86a4:	bd38      	pop	{r3, r4, r5, pc}

000d86a6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d86a6:	b538      	push	{r3, r4, r5, lr}
   d86a8:	4604      	mov	r4, r0
   d86aa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86ac:	f7fc fae6 	bl	d4c7c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d86b0:	28ff      	cmp	r0, #255	; 0xff
   d86b2:	d010      	beq.n	d86d6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d86b4:	2806      	cmp	r0, #6
   d86b6:	d804      	bhi.n	d86c2 <digitalWrite+0x1c>
   d86b8:	234d      	movs	r3, #77	; 0x4d
   d86ba:	fa23 f000 	lsr.w	r0, r3, r0
   d86be:	07c3      	lsls	r3, r0, #31
   d86c0:	d409      	bmi.n	d86d6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d86c2:	4620      	mov	r0, r4
   d86c4:	f7ff ffba 	bl	d863c <pinAvailable>
   d86c8:	b128      	cbz	r0, d86d6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d86ca:	4629      	mov	r1, r5
   d86cc:	4620      	mov	r0, r4
}
   d86ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d86d2:	f7fc badb 	b.w	d4c8c <HAL_GPIO_Write>
   d86d6:	bd38      	pop	{r3, r4, r5, pc}

000d86d8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d86d8:	b510      	push	{r4, lr}
   d86da:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86dc:	f7fc face 	bl	d4c7c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d86e0:	3804      	subs	r0, #4
   d86e2:	b2c0      	uxtb	r0, r0
   d86e4:	2801      	cmp	r0, #1
   d86e6:	d908      	bls.n	d86fa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d86e8:	4620      	mov	r0, r4
   d86ea:	f7ff ffa7 	bl	d863c <pinAvailable>
   d86ee:	b120      	cbz	r0, d86fa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d86f0:	4620      	mov	r0, r4
}
   d86f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d86f6:	f7fc bad1 	b.w	d4c9c <HAL_GPIO_Read>
}
   d86fa:	2000      	movs	r0, #0
   d86fc:	bd10      	pop	{r4, pc}
	...

000d8700 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8700:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d8702:	4d0b      	ldr	r5, [pc, #44]	; (d8730 <_Z19__fetch_global_Wirev+0x30>)
   d8704:	6829      	ldr	r1, [r5, #0]
   d8706:	f011 0401 	ands.w	r4, r1, #1
   d870a:	d10f      	bne.n	d872c <_Z19__fetch_global_Wirev+0x2c>
   d870c:	4628      	mov	r0, r5
   d870e:	f7fb fcd3 	bl	d40b8 <__cxa_guard_acquire>
   d8712:	b158      	cbz	r0, d872c <_Z19__fetch_global_Wirev+0x2c>
   d8714:	4621      	mov	r1, r4
   d8716:	4807      	ldr	r0, [pc, #28]	; (d8734 <_Z19__fetch_global_Wirev+0x34>)
   d8718:	f7fe f892 	bl	d6840 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d871c:	4628      	mov	r0, r5
   d871e:	f7fb fcd0 	bl	d40c2 <__cxa_guard_release>
   d8722:	4a05      	ldr	r2, [pc, #20]	; (d8738 <_Z19__fetch_global_Wirev+0x38>)
   d8724:	4905      	ldr	r1, [pc, #20]	; (d873c <_Z19__fetch_global_Wirev+0x3c>)
   d8726:	4803      	ldr	r0, [pc, #12]	; (d8734 <_Z19__fetch_global_Wirev+0x34>)
   d8728:	f000 f82c 	bl	d8784 <__aeabi_atexit>
	return wire;
}
   d872c:	4801      	ldr	r0, [pc, #4]	; (d8734 <_Z19__fetch_global_Wirev+0x34>)
   d872e:	bd38      	pop	{r3, r4, r5, pc}
   d8730:	2003e714 	.word	0x2003e714
   d8734:	2003e718 	.word	0x2003e718
   d8738:	2003d238 	.word	0x2003d238
   d873c:	000d67e9 	.word	0x000d67e9

000d8740 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8740:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8742:	4c0c      	ldr	r4, [pc, #48]	; (d8774 <_GLOBAL__sub_I_SPI+0x34>)
   d8744:	4e0c      	ldr	r6, [pc, #48]	; (d8778 <_GLOBAL__sub_I_SPI+0x38>)
   d8746:	4d0d      	ldr	r5, [pc, #52]	; (d877c <_GLOBAL__sub_I_SPI+0x3c>)
   d8748:	2100      	movs	r1, #0
   d874a:	4620      	mov	r0, r4
   d874c:	f7ff fc8c 	bl	d8068 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8750:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8752:	4c0b      	ldr	r4, [pc, #44]	; (d8780 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8754:	4632      	mov	r2, r6
   d8756:	4629      	mov	r1, r5
   d8758:	f000 f814 	bl	d8784 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d875c:	2101      	movs	r1, #1
   d875e:	4620      	mov	r0, r4
   d8760:	f7ff fc82 	bl	d8068 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8764:	4632      	mov	r2, r6
   d8766:	4629      	mov	r1, r5
   d8768:	4620      	mov	r0, r4
   d876a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d876e:	f000 b809 	b.w	d8784 <__aeabi_atexit>
   d8772:	bf00      	nop
   d8774:	2003e72c 	.word	0x2003e72c
   d8778:	2003d238 	.word	0x2003d238
   d877c:	000d8059 	.word	0x000d8059
   d8780:	2003e73c 	.word	0x2003e73c

000d8784 <__aeabi_atexit>:
   d8784:	460b      	mov	r3, r1
   d8786:	4601      	mov	r1, r0
   d8788:	4618      	mov	r0, r3
   d878a:	f000 b963 	b.w	d8a54 <__cxa_atexit>

000d878e <_ZdlPvj>:
   d878e:	f7fb bc84 	b.w	d409a <_ZdlPv>
	...

000d8794 <_ZSt15get_new_handlerv>:
   d8794:	4b02      	ldr	r3, [pc, #8]	; (d87a0 <_ZSt15get_new_handlerv+0xc>)
   d8796:	6818      	ldr	r0, [r3, #0]
   d8798:	f3bf 8f5f 	dmb	sy
   d879c:	4770      	bx	lr
   d879e:	bf00      	nop
   d87a0:	2003e74c 	.word	0x2003e74c

000d87a4 <_ZnwjRKSt9nothrow_t>:
   d87a4:	b510      	push	{r4, lr}
   d87a6:	2800      	cmp	r0, #0
   d87a8:	bf14      	ite	ne
   d87aa:	4604      	movne	r4, r0
   d87ac:	2401      	moveq	r4, #1
   d87ae:	4620      	mov	r0, r4
   d87b0:	f7fc fc08 	bl	d4fc4 <malloc>
   d87b4:	b920      	cbnz	r0, d87c0 <_ZnwjRKSt9nothrow_t+0x1c>
   d87b6:	f7ff ffed 	bl	d8794 <_ZSt15get_new_handlerv>
   d87ba:	b108      	cbz	r0, d87c0 <_ZnwjRKSt9nothrow_t+0x1c>
   d87bc:	4780      	blx	r0
   d87be:	e7f6      	b.n	d87ae <_ZnwjRKSt9nothrow_t+0xa>
   d87c0:	bd10      	pop	{r4, pc}
	...

000d87c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d87c4:	4b24      	ldr	r3, [pc, #144]	; (d8858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d87c6:	681a      	ldr	r2, [r3, #0]
   d87c8:	07d0      	lsls	r0, r2, #31
   d87ca:	bf5c      	itt	pl
   d87cc:	2201      	movpl	r2, #1
   d87ce:	601a      	strpl	r2, [r3, #0]
   d87d0:	4b22      	ldr	r3, [pc, #136]	; (d885c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d87d2:	681a      	ldr	r2, [r3, #0]
   d87d4:	07d1      	lsls	r1, r2, #31
   d87d6:	bf5c      	itt	pl
   d87d8:	2201      	movpl	r2, #1
   d87da:	601a      	strpl	r2, [r3, #0]
   d87dc:	4b20      	ldr	r3, [pc, #128]	; (d8860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d87de:	681a      	ldr	r2, [r3, #0]
   d87e0:	07d2      	lsls	r2, r2, #31
   d87e2:	bf5c      	itt	pl
   d87e4:	2201      	movpl	r2, #1
   d87e6:	601a      	strpl	r2, [r3, #0]
   d87e8:	4b1e      	ldr	r3, [pc, #120]	; (d8864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d87ea:	681a      	ldr	r2, [r3, #0]
   d87ec:	07d0      	lsls	r0, r2, #31
   d87ee:	bf5c      	itt	pl
   d87f0:	2201      	movpl	r2, #1
   d87f2:	601a      	strpl	r2, [r3, #0]
   d87f4:	4b1c      	ldr	r3, [pc, #112]	; (d8868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d87f6:	681a      	ldr	r2, [r3, #0]
   d87f8:	07d1      	lsls	r1, r2, #31
   d87fa:	bf5c      	itt	pl
   d87fc:	2201      	movpl	r2, #1
   d87fe:	601a      	strpl	r2, [r3, #0]
   d8800:	4b1a      	ldr	r3, [pc, #104]	; (d886c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8802:	681a      	ldr	r2, [r3, #0]
   d8804:	07d2      	lsls	r2, r2, #31
   d8806:	bf5c      	itt	pl
   d8808:	2201      	movpl	r2, #1
   d880a:	601a      	strpl	r2, [r3, #0]
   d880c:	4b18      	ldr	r3, [pc, #96]	; (d8870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d880e:	681a      	ldr	r2, [r3, #0]
   d8810:	07d0      	lsls	r0, r2, #31
   d8812:	bf5c      	itt	pl
   d8814:	2201      	movpl	r2, #1
   d8816:	601a      	strpl	r2, [r3, #0]
   d8818:	4b16      	ldr	r3, [pc, #88]	; (d8874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d881a:	681a      	ldr	r2, [r3, #0]
   d881c:	07d1      	lsls	r1, r2, #31
   d881e:	bf5c      	itt	pl
   d8820:	2201      	movpl	r2, #1
   d8822:	601a      	strpl	r2, [r3, #0]
   d8824:	4b14      	ldr	r3, [pc, #80]	; (d8878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8826:	681a      	ldr	r2, [r3, #0]
   d8828:	07d2      	lsls	r2, r2, #31
   d882a:	bf5c      	itt	pl
   d882c:	2201      	movpl	r2, #1
   d882e:	601a      	strpl	r2, [r3, #0]
   d8830:	4b12      	ldr	r3, [pc, #72]	; (d887c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8832:	681a      	ldr	r2, [r3, #0]
   d8834:	07d0      	lsls	r0, r2, #31
   d8836:	bf5c      	itt	pl
   d8838:	2201      	movpl	r2, #1
   d883a:	601a      	strpl	r2, [r3, #0]
   d883c:	4b10      	ldr	r3, [pc, #64]	; (d8880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d883e:	681a      	ldr	r2, [r3, #0]
   d8840:	07d1      	lsls	r1, r2, #31
   d8842:	bf5c      	itt	pl
   d8844:	2201      	movpl	r2, #1
   d8846:	601a      	strpl	r2, [r3, #0]
   d8848:	4b0e      	ldr	r3, [pc, #56]	; (d8884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d884a:	681a      	ldr	r2, [r3, #0]
   d884c:	07d2      	lsls	r2, r2, #31
   d884e:	bf5c      	itt	pl
   d8850:	2201      	movpl	r2, #1
   d8852:	601a      	strpl	r2, [r3, #0]
   d8854:	4770      	bx	lr
   d8856:	bf00      	nop
   d8858:	2003e77c 	.word	0x2003e77c
   d885c:	2003e778 	.word	0x2003e778
   d8860:	2003e774 	.word	0x2003e774
   d8864:	2003e770 	.word	0x2003e770
   d8868:	2003e76c 	.word	0x2003e76c
   d886c:	2003e768 	.word	0x2003e768
   d8870:	2003e764 	.word	0x2003e764
   d8874:	2003e760 	.word	0x2003e760
   d8878:	2003e75c 	.word	0x2003e75c
   d887c:	2003e758 	.word	0x2003e758
   d8880:	2003e754 	.word	0x2003e754
   d8884:	2003e750 	.word	0x2003e750

000d8888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8888:	4b18      	ldr	r3, [pc, #96]	; (d88ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d888a:	681a      	ldr	r2, [r3, #0]
   d888c:	07d1      	lsls	r1, r2, #31
   d888e:	bf5c      	itt	pl
   d8890:	2201      	movpl	r2, #1
   d8892:	601a      	strpl	r2, [r3, #0]
   d8894:	4b16      	ldr	r3, [pc, #88]	; (d88f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8896:	681a      	ldr	r2, [r3, #0]
   d8898:	07d2      	lsls	r2, r2, #31
   d889a:	bf5c      	itt	pl
   d889c:	2201      	movpl	r2, #1
   d889e:	601a      	strpl	r2, [r3, #0]
   d88a0:	4b14      	ldr	r3, [pc, #80]	; (d88f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d88a2:	681a      	ldr	r2, [r3, #0]
   d88a4:	07d0      	lsls	r0, r2, #31
   d88a6:	bf5c      	itt	pl
   d88a8:	2201      	movpl	r2, #1
   d88aa:	601a      	strpl	r2, [r3, #0]
   d88ac:	4b12      	ldr	r3, [pc, #72]	; (d88f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d88ae:	681a      	ldr	r2, [r3, #0]
   d88b0:	07d1      	lsls	r1, r2, #31
   d88b2:	bf5c      	itt	pl
   d88b4:	2201      	movpl	r2, #1
   d88b6:	601a      	strpl	r2, [r3, #0]
   d88b8:	4b10      	ldr	r3, [pc, #64]	; (d88fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d88ba:	681a      	ldr	r2, [r3, #0]
   d88bc:	07d2      	lsls	r2, r2, #31
   d88be:	bf5c      	itt	pl
   d88c0:	2201      	movpl	r2, #1
   d88c2:	601a      	strpl	r2, [r3, #0]
   d88c4:	4b0e      	ldr	r3, [pc, #56]	; (d8900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d88c6:	681a      	ldr	r2, [r3, #0]
   d88c8:	07d0      	lsls	r0, r2, #31
   d88ca:	bf5c      	itt	pl
   d88cc:	2201      	movpl	r2, #1
   d88ce:	601a      	strpl	r2, [r3, #0]
   d88d0:	4b0c      	ldr	r3, [pc, #48]	; (d8904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d88d2:	681a      	ldr	r2, [r3, #0]
   d88d4:	07d1      	lsls	r1, r2, #31
   d88d6:	bf5c      	itt	pl
   d88d8:	2201      	movpl	r2, #1
   d88da:	601a      	strpl	r2, [r3, #0]
   d88dc:	4b0a      	ldr	r3, [pc, #40]	; (d8908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d88de:	681a      	ldr	r2, [r3, #0]
   d88e0:	07d2      	lsls	r2, r2, #31
   d88e2:	bf5c      	itt	pl
   d88e4:	2201      	movpl	r2, #1
   d88e6:	601a      	strpl	r2, [r3, #0]
   d88e8:	4770      	bx	lr
   d88ea:	bf00      	nop
   d88ec:	2003e79c 	.word	0x2003e79c
   d88f0:	2003e798 	.word	0x2003e798
   d88f4:	2003e794 	.word	0x2003e794
   d88f8:	2003e790 	.word	0x2003e790
   d88fc:	2003e78c 	.word	0x2003e78c
   d8900:	2003e788 	.word	0x2003e788
   d8904:	2003e784 	.word	0x2003e784
   d8908:	2003e780 	.word	0x2003e780

000d890c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d890c:	4b18      	ldr	r3, [pc, #96]	; (d8970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d890e:	681a      	ldr	r2, [r3, #0]
   d8910:	07d1      	lsls	r1, r2, #31
   d8912:	bf5c      	itt	pl
   d8914:	2201      	movpl	r2, #1
   d8916:	601a      	strpl	r2, [r3, #0]
   d8918:	4b16      	ldr	r3, [pc, #88]	; (d8974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d891a:	681a      	ldr	r2, [r3, #0]
   d891c:	07d2      	lsls	r2, r2, #31
   d891e:	bf5c      	itt	pl
   d8920:	2201      	movpl	r2, #1
   d8922:	601a      	strpl	r2, [r3, #0]
   d8924:	4b14      	ldr	r3, [pc, #80]	; (d8978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8926:	681a      	ldr	r2, [r3, #0]
   d8928:	07d0      	lsls	r0, r2, #31
   d892a:	bf5c      	itt	pl
   d892c:	2201      	movpl	r2, #1
   d892e:	601a      	strpl	r2, [r3, #0]
   d8930:	4b12      	ldr	r3, [pc, #72]	; (d897c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8932:	681a      	ldr	r2, [r3, #0]
   d8934:	07d1      	lsls	r1, r2, #31
   d8936:	bf5c      	itt	pl
   d8938:	2201      	movpl	r2, #1
   d893a:	601a      	strpl	r2, [r3, #0]
   d893c:	4b10      	ldr	r3, [pc, #64]	; (d8980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d893e:	681a      	ldr	r2, [r3, #0]
   d8940:	07d2      	lsls	r2, r2, #31
   d8942:	bf5c      	itt	pl
   d8944:	2201      	movpl	r2, #1
   d8946:	601a      	strpl	r2, [r3, #0]
   d8948:	4b0e      	ldr	r3, [pc, #56]	; (d8984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d894a:	681a      	ldr	r2, [r3, #0]
   d894c:	07d0      	lsls	r0, r2, #31
   d894e:	bf5c      	itt	pl
   d8950:	2201      	movpl	r2, #1
   d8952:	601a      	strpl	r2, [r3, #0]
   d8954:	4b0c      	ldr	r3, [pc, #48]	; (d8988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8956:	681a      	ldr	r2, [r3, #0]
   d8958:	07d1      	lsls	r1, r2, #31
   d895a:	bf5c      	itt	pl
   d895c:	2201      	movpl	r2, #1
   d895e:	601a      	strpl	r2, [r3, #0]
   d8960:	4b0a      	ldr	r3, [pc, #40]	; (d898c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8962:	681a      	ldr	r2, [r3, #0]
   d8964:	07d2      	lsls	r2, r2, #31
   d8966:	bf5c      	itt	pl
   d8968:	2201      	movpl	r2, #1
   d896a:	601a      	strpl	r2, [r3, #0]
   d896c:	4770      	bx	lr
   d896e:	bf00      	nop
   d8970:	2003e7bc 	.word	0x2003e7bc
   d8974:	2003e7b8 	.word	0x2003e7b8
   d8978:	2003e7b4 	.word	0x2003e7b4
   d897c:	2003e7b0 	.word	0x2003e7b0
   d8980:	2003e7ac 	.word	0x2003e7ac
   d8984:	2003e7a8 	.word	0x2003e7a8
   d8988:	2003e7a4 	.word	0x2003e7a4
   d898c:	2003e7a0 	.word	0x2003e7a0

000d8990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8990:	4b24      	ldr	r3, [pc, #144]	; (d8a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8992:	681a      	ldr	r2, [r3, #0]
   d8994:	07d0      	lsls	r0, r2, #31
   d8996:	bf5c      	itt	pl
   d8998:	2201      	movpl	r2, #1
   d899a:	601a      	strpl	r2, [r3, #0]
   d899c:	4b22      	ldr	r3, [pc, #136]	; (d8a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d899e:	681a      	ldr	r2, [r3, #0]
   d89a0:	07d1      	lsls	r1, r2, #31
   d89a2:	bf5c      	itt	pl
   d89a4:	2201      	movpl	r2, #1
   d89a6:	601a      	strpl	r2, [r3, #0]
   d89a8:	4b20      	ldr	r3, [pc, #128]	; (d8a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d89aa:	681a      	ldr	r2, [r3, #0]
   d89ac:	07d2      	lsls	r2, r2, #31
   d89ae:	bf5c      	itt	pl
   d89b0:	2201      	movpl	r2, #1
   d89b2:	601a      	strpl	r2, [r3, #0]
   d89b4:	4b1e      	ldr	r3, [pc, #120]	; (d8a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d89b6:	681a      	ldr	r2, [r3, #0]
   d89b8:	07d0      	lsls	r0, r2, #31
   d89ba:	bf5c      	itt	pl
   d89bc:	2201      	movpl	r2, #1
   d89be:	601a      	strpl	r2, [r3, #0]
   d89c0:	4b1c      	ldr	r3, [pc, #112]	; (d8a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d89c2:	681a      	ldr	r2, [r3, #0]
   d89c4:	07d1      	lsls	r1, r2, #31
   d89c6:	bf5c      	itt	pl
   d89c8:	2201      	movpl	r2, #1
   d89ca:	601a      	strpl	r2, [r3, #0]
   d89cc:	4b1a      	ldr	r3, [pc, #104]	; (d8a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d89ce:	681a      	ldr	r2, [r3, #0]
   d89d0:	07d2      	lsls	r2, r2, #31
   d89d2:	bf5c      	itt	pl
   d89d4:	2201      	movpl	r2, #1
   d89d6:	601a      	strpl	r2, [r3, #0]
   d89d8:	4b18      	ldr	r3, [pc, #96]	; (d8a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d89da:	681a      	ldr	r2, [r3, #0]
   d89dc:	07d0      	lsls	r0, r2, #31
   d89de:	bf5c      	itt	pl
   d89e0:	2201      	movpl	r2, #1
   d89e2:	601a      	strpl	r2, [r3, #0]
   d89e4:	4b16      	ldr	r3, [pc, #88]	; (d8a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d89e6:	681a      	ldr	r2, [r3, #0]
   d89e8:	07d1      	lsls	r1, r2, #31
   d89ea:	bf5c      	itt	pl
   d89ec:	2201      	movpl	r2, #1
   d89ee:	601a      	strpl	r2, [r3, #0]
   d89f0:	4b14      	ldr	r3, [pc, #80]	; (d8a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d89f2:	681a      	ldr	r2, [r3, #0]
   d89f4:	07d2      	lsls	r2, r2, #31
   d89f6:	bf5c      	itt	pl
   d89f8:	2201      	movpl	r2, #1
   d89fa:	601a      	strpl	r2, [r3, #0]
   d89fc:	4b12      	ldr	r3, [pc, #72]	; (d8a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d89fe:	681a      	ldr	r2, [r3, #0]
   d8a00:	07d0      	lsls	r0, r2, #31
   d8a02:	bf5c      	itt	pl
   d8a04:	2201      	movpl	r2, #1
   d8a06:	601a      	strpl	r2, [r3, #0]
   d8a08:	4b10      	ldr	r3, [pc, #64]	; (d8a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8a0a:	681a      	ldr	r2, [r3, #0]
   d8a0c:	07d1      	lsls	r1, r2, #31
   d8a0e:	bf5c      	itt	pl
   d8a10:	2201      	movpl	r2, #1
   d8a12:	601a      	strpl	r2, [r3, #0]
   d8a14:	4b0e      	ldr	r3, [pc, #56]	; (d8a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8a16:	681a      	ldr	r2, [r3, #0]
   d8a18:	07d2      	lsls	r2, r2, #31
   d8a1a:	bf5c      	itt	pl
   d8a1c:	2201      	movpl	r2, #1
   d8a1e:	601a      	strpl	r2, [r3, #0]
   d8a20:	4770      	bx	lr
   d8a22:	bf00      	nop
   d8a24:	2003e7ec 	.word	0x2003e7ec
   d8a28:	2003e7e8 	.word	0x2003e7e8
   d8a2c:	2003e7e4 	.word	0x2003e7e4
   d8a30:	2003e7e0 	.word	0x2003e7e0
   d8a34:	2003e7dc 	.word	0x2003e7dc
   d8a38:	2003e7d8 	.word	0x2003e7d8
   d8a3c:	2003e7d4 	.word	0x2003e7d4
   d8a40:	2003e7d0 	.word	0x2003e7d0
   d8a44:	2003e7cc 	.word	0x2003e7cc
   d8a48:	2003e7c8 	.word	0x2003e7c8
   d8a4c:	2003e7c4 	.word	0x2003e7c4
   d8a50:	2003e7c0 	.word	0x2003e7c0

000d8a54 <__cxa_atexit>:
   d8a54:	b510      	push	{r4, lr}
   d8a56:	4c05      	ldr	r4, [pc, #20]	; (d8a6c <__cxa_atexit+0x18>)
   d8a58:	4613      	mov	r3, r2
   d8a5a:	b12c      	cbz	r4, d8a68 <__cxa_atexit+0x14>
   d8a5c:	460a      	mov	r2, r1
   d8a5e:	4601      	mov	r1, r0
   d8a60:	2002      	movs	r0, #2
   d8a62:	f3af 8000 	nop.w
   d8a66:	bd10      	pop	{r4, pc}
   d8a68:	4620      	mov	r0, r4
   d8a6a:	bd10      	pop	{r4, pc}
   d8a6c:	00000000 	.word	0x00000000

000d8a70 <memcmp>:
   d8a70:	b510      	push	{r4, lr}
   d8a72:	3901      	subs	r1, #1
   d8a74:	4402      	add	r2, r0
   d8a76:	4290      	cmp	r0, r2
   d8a78:	d007      	beq.n	d8a8a <memcmp+0x1a>
   d8a7a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8a7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8a82:	42a3      	cmp	r3, r4
   d8a84:	d0f7      	beq.n	d8a76 <memcmp+0x6>
   d8a86:	1b18      	subs	r0, r3, r4
   d8a88:	bd10      	pop	{r4, pc}
   d8a8a:	2000      	movs	r0, #0
   d8a8c:	bd10      	pop	{r4, pc}

000d8a8e <memcpy>:
   d8a8e:	b510      	push	{r4, lr}
   d8a90:	1e43      	subs	r3, r0, #1
   d8a92:	440a      	add	r2, r1
   d8a94:	4291      	cmp	r1, r2
   d8a96:	d004      	beq.n	d8aa2 <memcpy+0x14>
   d8a98:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8aa0:	e7f8      	b.n	d8a94 <memcpy+0x6>
   d8aa2:	bd10      	pop	{r4, pc}

000d8aa4 <memmove>:
   d8aa4:	4288      	cmp	r0, r1
   d8aa6:	b510      	push	{r4, lr}
   d8aa8:	eb01 0302 	add.w	r3, r1, r2
   d8aac:	d801      	bhi.n	d8ab2 <memmove+0xe>
   d8aae:	1e42      	subs	r2, r0, #1
   d8ab0:	e00b      	b.n	d8aca <memmove+0x26>
   d8ab2:	4298      	cmp	r0, r3
   d8ab4:	d2fb      	bcs.n	d8aae <memmove+0xa>
   d8ab6:	1881      	adds	r1, r0, r2
   d8ab8:	1ad2      	subs	r2, r2, r3
   d8aba:	42d3      	cmn	r3, r2
   d8abc:	d004      	beq.n	d8ac8 <memmove+0x24>
   d8abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8ac2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8ac6:	e7f8      	b.n	d8aba <memmove+0x16>
   d8ac8:	bd10      	pop	{r4, pc}
   d8aca:	4299      	cmp	r1, r3
   d8acc:	d004      	beq.n	d8ad8 <memmove+0x34>
   d8ace:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8ad2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8ad6:	e7f8      	b.n	d8aca <memmove+0x26>
   d8ad8:	bd10      	pop	{r4, pc}

000d8ada <memset>:
   d8ada:	4402      	add	r2, r0
   d8adc:	4603      	mov	r3, r0
   d8ade:	4293      	cmp	r3, r2
   d8ae0:	d002      	beq.n	d8ae8 <memset+0xe>
   d8ae2:	f803 1b01 	strb.w	r1, [r3], #1
   d8ae6:	e7fa      	b.n	d8ade <memset+0x4>
   d8ae8:	4770      	bx	lr
	...

000d8aec <srand>:
   d8aec:	b538      	push	{r3, r4, r5, lr}
   d8aee:	4b12      	ldr	r3, [pc, #72]	; (d8b38 <srand+0x4c>)
   d8af0:	681c      	ldr	r4, [r3, #0]
   d8af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8af4:	4605      	mov	r5, r0
   d8af6:	b9d3      	cbnz	r3, d8b2e <srand+0x42>
   d8af8:	2018      	movs	r0, #24
   d8afa:	f7fc fa63 	bl	d4fc4 <malloc>
   d8afe:	f243 330e 	movw	r3, #13070	; 0x330e
   d8b02:	63a0      	str	r0, [r4, #56]	; 0x38
   d8b04:	8003      	strh	r3, [r0, #0]
   d8b06:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8b0a:	8043      	strh	r3, [r0, #2]
   d8b0c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8b10:	8083      	strh	r3, [r0, #4]
   d8b12:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8b16:	80c3      	strh	r3, [r0, #6]
   d8b18:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8b1c:	8103      	strh	r3, [r0, #8]
   d8b1e:	2305      	movs	r3, #5
   d8b20:	8143      	strh	r3, [r0, #10]
   d8b22:	230b      	movs	r3, #11
   d8b24:	8183      	strh	r3, [r0, #12]
   d8b26:	2201      	movs	r2, #1
   d8b28:	2300      	movs	r3, #0
   d8b2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b30:	2200      	movs	r2, #0
   d8b32:	611d      	str	r5, [r3, #16]
   d8b34:	615a      	str	r2, [r3, #20]
   d8b36:	bd38      	pop	{r3, r4, r5, pc}
   d8b38:	2003d234 	.word	0x2003d234

000d8b3c <strchr>:
   d8b3c:	b2c9      	uxtb	r1, r1
   d8b3e:	4603      	mov	r3, r0
   d8b40:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8b44:	b11a      	cbz	r2, d8b4e <strchr+0x12>
   d8b46:	4291      	cmp	r1, r2
   d8b48:	d1f9      	bne.n	d8b3e <strchr+0x2>
   d8b4a:	4618      	mov	r0, r3
   d8b4c:	4770      	bx	lr
   d8b4e:	2900      	cmp	r1, #0
   d8b50:	bf0c      	ite	eq
   d8b52:	4618      	moveq	r0, r3
   d8b54:	2000      	movne	r0, #0
   d8b56:	4770      	bx	lr

000d8b58 <strchrnul>:
   d8b58:	b510      	push	{r4, lr}
   d8b5a:	4604      	mov	r4, r0
   d8b5c:	f7ff ffee 	bl	d8b3c <strchr>
   d8b60:	b918      	cbnz	r0, d8b6a <strchrnul+0x12>
   d8b62:	4620      	mov	r0, r4
   d8b64:	f000 f814 	bl	d8b90 <strlen>
   d8b68:	4420      	add	r0, r4
   d8b6a:	bd10      	pop	{r4, pc}

000d8b6c <strcmp>:
   d8b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8b70:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8b74:	2a01      	cmp	r2, #1
   d8b76:	bf28      	it	cs
   d8b78:	429a      	cmpcs	r2, r3
   d8b7a:	d0f7      	beq.n	d8b6c <strcmp>
   d8b7c:	1ad0      	subs	r0, r2, r3
   d8b7e:	4770      	bx	lr

000d8b80 <strcpy>:
   d8b80:	4603      	mov	r3, r0
   d8b82:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8b86:	f803 2b01 	strb.w	r2, [r3], #1
   d8b8a:	2a00      	cmp	r2, #0
   d8b8c:	d1f9      	bne.n	d8b82 <strcpy+0x2>
   d8b8e:	4770      	bx	lr

000d8b90 <strlen>:
   d8b90:	4603      	mov	r3, r0
   d8b92:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8b96:	2a00      	cmp	r2, #0
   d8b98:	d1fb      	bne.n	d8b92 <strlen+0x2>
   d8b9a:	1a18      	subs	r0, r3, r0
   d8b9c:	3801      	subs	r0, #1
   d8b9e:	4770      	bx	lr

000d8ba0 <strncmp>:
   d8ba0:	b530      	push	{r4, r5, lr}
   d8ba2:	b182      	cbz	r2, d8bc6 <strncmp+0x26>
   d8ba4:	1e45      	subs	r5, r0, #1
   d8ba6:	3901      	subs	r1, #1
   d8ba8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8bac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8bb0:	42a3      	cmp	r3, r4
   d8bb2:	d106      	bne.n	d8bc2 <strncmp+0x22>
   d8bb4:	43ec      	mvns	r4, r5
   d8bb6:	4414      	add	r4, r2
   d8bb8:	42e0      	cmn	r0, r4
   d8bba:	d001      	beq.n	d8bc0 <strncmp+0x20>
   d8bbc:	2b00      	cmp	r3, #0
   d8bbe:	d1f3      	bne.n	d8ba8 <strncmp+0x8>
   d8bc0:	461c      	mov	r4, r3
   d8bc2:	1b18      	subs	r0, r3, r4
   d8bc4:	bd30      	pop	{r4, r5, pc}
   d8bc6:	4610      	mov	r0, r2
   d8bc8:	bd30      	pop	{r4, r5, pc}

000d8bca <strnlen>:
   d8bca:	b510      	push	{r4, lr}
   d8bcc:	4603      	mov	r3, r0
   d8bce:	4401      	add	r1, r0
   d8bd0:	428b      	cmp	r3, r1
   d8bd2:	d004      	beq.n	d8bde <strnlen+0x14>
   d8bd4:	781a      	ldrb	r2, [r3, #0]
   d8bd6:	1c5c      	adds	r4, r3, #1
   d8bd8:	b10a      	cbz	r2, d8bde <strnlen+0x14>
   d8bda:	4623      	mov	r3, r4
   d8bdc:	e7f8      	b.n	d8bd0 <strnlen+0x6>
   d8bde:	1a18      	subs	r0, r3, r0
   d8be0:	bd10      	pop	{r4, pc}

000d8be2 <strrchr>:
   d8be2:	b538      	push	{r3, r4, r5, lr}
   d8be4:	4603      	mov	r3, r0
   d8be6:	460d      	mov	r5, r1
   d8be8:	b141      	cbz	r1, d8bfc <strrchr+0x1a>
   d8bea:	2400      	movs	r4, #0
   d8bec:	4629      	mov	r1, r5
   d8bee:	4618      	mov	r0, r3
   d8bf0:	f7ff ffa4 	bl	d8b3c <strchr>
   d8bf4:	b130      	cbz	r0, d8c04 <strrchr+0x22>
   d8bf6:	1c43      	adds	r3, r0, #1
   d8bf8:	4604      	mov	r4, r0
   d8bfa:	e7f7      	b.n	d8bec <strrchr+0xa>
   d8bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8c00:	f7ff bf9c 	b.w	d8b3c <strchr>
   d8c04:	4620      	mov	r0, r4
   d8c06:	bd38      	pop	{r3, r4, r5, pc}

000d8c08 <_strtol_r>:
   d8c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8c0c:	4680      	mov	r8, r0
   d8c0e:	4840      	ldr	r0, [pc, #256]	; (d8d10 <_strtol_r+0x108>)
   d8c10:	f8d0 9000 	ldr.w	r9, [r0]
   d8c14:	460f      	mov	r7, r1
   d8c16:	463d      	mov	r5, r7
   d8c18:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8c1c:	eb09 0004 	add.w	r0, r9, r4
   d8c20:	7840      	ldrb	r0, [r0, #1]
   d8c22:	f000 0008 	and.w	r0, r0, #8
   d8c26:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8c2a:	b108      	cbz	r0, d8c30 <_strtol_r+0x28>
   d8c2c:	462f      	mov	r7, r5
   d8c2e:	e7f2      	b.n	d8c16 <_strtol_r+0xe>
   d8c30:	2c2d      	cmp	r4, #45	; 0x2d
   d8c32:	d103      	bne.n	d8c3c <_strtol_r+0x34>
   d8c34:	1cbd      	adds	r5, r7, #2
   d8c36:	787c      	ldrb	r4, [r7, #1]
   d8c38:	2601      	movs	r6, #1
   d8c3a:	e003      	b.n	d8c44 <_strtol_r+0x3c>
   d8c3c:	2c2b      	cmp	r4, #43	; 0x2b
   d8c3e:	bf04      	itt	eq
   d8c40:	787c      	ldrbeq	r4, [r7, #1]
   d8c42:	1cbd      	addeq	r5, r7, #2
   d8c44:	b113      	cbz	r3, d8c4c <_strtol_r+0x44>
   d8c46:	2b10      	cmp	r3, #16
   d8c48:	d10a      	bne.n	d8c60 <_strtol_r+0x58>
   d8c4a:	e05b      	b.n	d8d04 <_strtol_r+0xfc>
   d8c4c:	2c30      	cmp	r4, #48	; 0x30
   d8c4e:	d157      	bne.n	d8d00 <_strtol_r+0xf8>
   d8c50:	7828      	ldrb	r0, [r5, #0]
   d8c52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8c56:	2858      	cmp	r0, #88	; 0x58
   d8c58:	d14d      	bne.n	d8cf6 <_strtol_r+0xee>
   d8c5a:	786c      	ldrb	r4, [r5, #1]
   d8c5c:	2310      	movs	r3, #16
   d8c5e:	3502      	adds	r5, #2
   d8c60:	2e00      	cmp	r6, #0
   d8c62:	bf14      	ite	ne
   d8c64:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8c68:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8c6c:	2700      	movs	r7, #0
   d8c6e:	fbbc faf3 	udiv	sl, ip, r3
   d8c72:	4638      	mov	r0, r7
   d8c74:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8c78:	eb09 0e04 	add.w	lr, r9, r4
   d8c7c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8c80:	f01e 0f04 	tst.w	lr, #4
   d8c84:	d001      	beq.n	d8c8a <_strtol_r+0x82>
   d8c86:	3c30      	subs	r4, #48	; 0x30
   d8c88:	e00b      	b.n	d8ca2 <_strtol_r+0x9a>
   d8c8a:	f01e 0e03 	ands.w	lr, lr, #3
   d8c8e:	d01b      	beq.n	d8cc8 <_strtol_r+0xc0>
   d8c90:	f1be 0f01 	cmp.w	lr, #1
   d8c94:	bf0c      	ite	eq
   d8c96:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8c9a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8c9e:	ebce 0404 	rsb	r4, lr, r4
   d8ca2:	42a3      	cmp	r3, r4
   d8ca4:	dd10      	ble.n	d8cc8 <_strtol_r+0xc0>
   d8ca6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8caa:	d00a      	beq.n	d8cc2 <_strtol_r+0xba>
   d8cac:	4550      	cmp	r0, sl
   d8cae:	d806      	bhi.n	d8cbe <_strtol_r+0xb6>
   d8cb0:	d101      	bne.n	d8cb6 <_strtol_r+0xae>
   d8cb2:	4564      	cmp	r4, ip
   d8cb4:	dc03      	bgt.n	d8cbe <_strtol_r+0xb6>
   d8cb6:	fb03 4000 	mla	r0, r3, r0, r4
   d8cba:	2701      	movs	r7, #1
   d8cbc:	e001      	b.n	d8cc2 <_strtol_r+0xba>
   d8cbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8cc6:	e7d7      	b.n	d8c78 <_strtol_r+0x70>
   d8cc8:	1c7b      	adds	r3, r7, #1
   d8cca:	d10c      	bne.n	d8ce6 <_strtol_r+0xde>
   d8ccc:	2e00      	cmp	r6, #0
   d8cce:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8cd2:	bf14      	ite	ne
   d8cd4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8cd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8cdc:	f8c8 3000 	str.w	r3, [r8]
   d8ce0:	b92a      	cbnz	r2, d8cee <_strtol_r+0xe6>
   d8ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ce6:	b106      	cbz	r6, d8cea <_strtol_r+0xe2>
   d8ce8:	4240      	negs	r0, r0
   d8cea:	b172      	cbz	r2, d8d0a <_strtol_r+0x102>
   d8cec:	b107      	cbz	r7, d8cf0 <_strtol_r+0xe8>
   d8cee:	1e69      	subs	r1, r5, #1
   d8cf0:	6011      	str	r1, [r2, #0]
   d8cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8cf6:	2430      	movs	r4, #48	; 0x30
   d8cf8:	2b00      	cmp	r3, #0
   d8cfa:	d1b1      	bne.n	d8c60 <_strtol_r+0x58>
   d8cfc:	2308      	movs	r3, #8
   d8cfe:	e7af      	b.n	d8c60 <_strtol_r+0x58>
   d8d00:	230a      	movs	r3, #10
   d8d02:	e7ad      	b.n	d8c60 <_strtol_r+0x58>
   d8d04:	2c30      	cmp	r4, #48	; 0x30
   d8d06:	d0a3      	beq.n	d8c50 <_strtol_r+0x48>
   d8d08:	e7aa      	b.n	d8c60 <_strtol_r+0x58>
   d8d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8d0e:	bf00      	nop
   d8d10:	2003d1d0 	.word	0x2003d1d0

000d8d14 <strtol>:
   d8d14:	4613      	mov	r3, r2
   d8d16:	460a      	mov	r2, r1
   d8d18:	4601      	mov	r1, r0
   d8d1a:	4802      	ldr	r0, [pc, #8]	; (d8d24 <strtol+0x10>)
   d8d1c:	6800      	ldr	r0, [r0, #0]
   d8d1e:	f7ff bf73 	b.w	d8c08 <_strtol_r>
   d8d22:	bf00      	nop
   d8d24:	2003d234 	.word	0x2003d234

000d8d28 <dynalib_user>:
   d8d28:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8d38:	00000000                                ....

000d8d3c <_ZTVN5spark10LogHandlerE>:
	...
   d8d4c:	000d40a5 000d40c9                       .@...@..

000d8d54 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8d5c:	000d415d 000d4191 000d791d 000d40cb     ]A...A...y...@..
   d8d6c:	63736944 656e6e6f 48007463 6f6c6c65     Disconnect.Hello
   d8d7c:	65687420 74616420 68632061 65676e61      the data change
   d8d8c:	6c500064 20746e61 61746164 7525203a     d.Plant data: %u
   d8d9c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   d8dac:	63530046 696e6e61 6620676e 7020726f     F.Scanning for p
   d8dbc:	70697265 61726568 2e2e736c 53002e2e     eripherals.....S
   d8dcc:	206e6163 61727564 6e6f6974 736d2820     can duration (ms
   d8ddc:	25203a29 4c420069 63732e45 66206e61     ): %i.BLE.scan f
   d8dec:	646e756f 20642520 69766564 00736563     ound %d devices.
   d8dfc:	3a43414d 32302520 30253a58 253a5832     MAC: %02X:%02X:%
   d8e0c:	3a583230 58323025 3230253a 30253a58     02X:%02X:%02X:%0
   d8e1c:	7c205832 53535220 25203a49 206d4264     2X | RSSI: %dBm 
   d8e2c:	76726553 73656369 6425203a 756f4600     Services: %d.Fou
   d8e3c:	2520646e 65732064 63697672 53007365     nd %d services.S
   d8e4c:	69767265 25206563 55202c64 3a444955     ervice %d, UUID:
   d8e5c:	00732520 42413031 6f745300 6e697070      %s.10AB.Stoppin
   d8e6c:	4c422067 63732045 2e2e6e61 43002e2e     g BLE scan.....C
   d8e7c:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
   d8e8c:	756f4600 2520646e 65532075 63697672     .Found %u Servic
   d8e9c:	53007365 69767265 3a206563 25783020     es.Service : 0x%
   d8eac:	20200073 4c202020 20474e4f 00732520     s.     LONG  %s.
   d8ebc:	6e756f46 75252064 61686320 74636172     Found %u charact
   d8ecc:	63697265 69746973 43007363 61726168     ericsitics.Chara
   d8edc:	72657463 74697369 3a206369 25783020     cterisitic : 0x%
   d8eec:	49430073 5220544f 534b434f 21212121     s.CIOT ROCKS!!!!
   d8efc:	2e2e2e00 20646e61 64206f73 7325206f     ....and so do %s
   d8f0c:	72655000 65687069 206c6172 4e207369     .Peripheral is N
   d8f1c:	6320544f 656e6e6f 64657463 00000000     OT connected....

000d8f2c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8f34:	000d5011 000d5017 000d6469 000d5041     .P...P..id..AP..
   d8f44:	000d5013                                .P..

000d8f48 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8f50:	000d500b 000d5025 000d6625 000d5045     .P..%P..%f..EP..
   d8f60:	000d500d                                .P..

000d8f64 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8f6c:	000d5005 000d5033 000d5b7b 000d5049     .P..3P..{[..IP..
   d8f7c:	000d5007 69726977 622e676e 5300656c     .P..wiring.ble.S
   d8f8c:	74726174 73696420 65766f63 676e6972     tart discovering
   d8f9c:	72657320 65636976 53002e73 74726174      services..Start
   d8fac:	73696420 65766f63 676e6972 61686320      discovering cha
   d8fbc:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d8fcc:	64207265 63697665 73692065 73696d20     er device is mis
   d8fdc:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d8fec:	65707061 7020646e 20726565 746e6543     append peer Cent
   d8ffc:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d900c:	65746365 79622064 6e654320 6c617274     ected by Central
   d901c:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d902c:	65746365 79622064 6d657220 2065746f     ected by remote 
   d903c:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d904c:	6e206464 70207765 20726565 69766564     dd new peer devi
   d905c:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d906c:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d907c:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d908c:	69642064 766f6373 64657265 61686320     d discovered cha
   d909c:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d90ac:	2064656c 61206f74 6e657070 69642064     led to append di
   d90bc:	766f6373 64657265 72657320 65636976     scovered service
   d90cc:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d90dc:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d90ec:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d90fc:	20646574 72616863 65746361 74736972     ted characterist
   d910c:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d911c:	002e6465                                ed..

000d9120 <_ZTVN5spark13EthernetClassE>:
	...
   d9128:	000d67c9 000d67bf 000d67b5 000d67ab     .g...g...g...g..
   d9138:	000d679f 000d6793 000d6787 000d677f     .g...g...g...g..
   d9148:	000d6775 000d676b 000d7e15              ug..kg...~..

000d9154 <_ZTV7TwoWire>:
	...
   d915c:	000d67e9 000d6833 000d680b 000d67eb     .g..3h...h...g..
   d916c:	000d6813 000d681b 000d6823 000d682b     .h...h..#h..+h..

000d917c <_ZTV9IPAddress>:
	...
   d9184:	000d687d 000d686d 000d686f 00302e30     }h..mh..oh..0.0.
   d9194:	736c6166 72740065 25006575 756e0067     false.true.%g.nu
   d91a4:	75006c6c 78343025 00000000              ll.u%04x....

000d91b0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d91b8:	000d6d01 000d6d27 000d6cdb 000d697f     .m..'m...l...i..

000d91c8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d91d0:	000d717d 000d7191 000d7ad1 000d6ce3     }q...q...z...l..

000d91e0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d91e8:	000d6cfd 000d6d43 000d7095 000d6d51     .l..Cm...p..Qm..
   d91f8:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d9208:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d9218:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d9228:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d9238:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d9248:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d9258:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d9268:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d9278:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d9288:	00203d20 61746564 20736c69 0d00203d      = .details = ..
   d9298:	0066000a 66006e6c 6f63006e 64006564     ..f.ln.fn.code.d
   d92a8:	69617465 6f6e006c 7400656e 65636172     etail.none.trace
   d92b8:	666e6900 6177006f 65006e72 726f7272     .info.warn.error
   d92c8:	6e617000 61006369 00006c6c              .panic.all..

000d92d4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d92dc:	000d7151 000d7169 000d791d 000d40cb     Qq..iq...y...@..

000d92ec <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d92f4:	000d6cff 000d6d35 000d7845 000d6ce5     .l..5m..Ex...l..

000d9304 <_ZTVN5spark9MeshClassE>:
	...
   d930c:	000d7ca7 000d7c9d 000d7c93 000d7c89     .|...|...|...|..
   d931c:	000d7c7d 000d7c71 000d7c65 000d7c5d     }|..q|..e|..]|..
   d932c:	000d7c53 000d7c49 000d7e15              S|..I|...~..

000d9338 <_ZTVN5spark12NetworkClassE>:
	...
   d9340:	000d7dad 000d7db7 000d7dc1 000d7dcb     .}...}...}...}..
   d9350:	000d7dd5 000d7de1 000d7ded 000d7df9     .}...}...}...}..
   d9360:	000d7e01 000d7e0b 000d7e15              .~...~...~..

000d936c <_ZTV8SPIClass>:
	...
   d9374:	000d8059 000d805b 2b25005a 3a643330     Y...[...Z.%+03d:
   d9384:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d9394:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d93a4:	00000000                                ....

000d93a8 <_ZTV11USARTSerial>:
	...
   d93b0:	000d82bd 000d830d 000d831b 000d7ef5     .............~..
   d93c0:	000d82d1 000d82f3 000d82df 000d8307     ................
   d93d0:	000d82bf 000d82c3                       ........

000d93d8 <_ZTV9USBSerial>:
	...
   d93e0:	000d83d9 000d8429 000d8437 000d7ef5     ....)...7....~..
   d93f0:	000d8415 000d83db 000d83f1 000d8423     ............#...
   d9400:	000d8407 000d83d5                       ........

000d9408 <_ZTVN5spark9WiFiClassE>:
	...
   d9410:	000d854b 000d8541 000d8537 000d84ed     K...A...7.......
   d9420:	000d852b 000d851f 000d8513 000d850b     +...............
   d9430:	000d8501 000d84f7 000d7e15              .........~..

000d943c <_ZSt7nothrow>:
	...

000d943d <_ctype_>:
   d943d:	20202000 20202020 28282020 20282828     .         ((((( 
   d944d:	20202020 20202020 20202020 20202020                     
   d945d:	10108820 10101010 10101010 10101010      ...............
   d946d:	04040410 04040404 10040404 10101010     ................
   d947d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d948d:	01010101 01010101 01010101 10101010     ................
   d949d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d94ad:	02020202 02020202 02020202 10101010     ................
   d94bd:	00000020 00000000 00000000 00000000      ...............
	...

000d9540 <__sf_fake_stdin>:
	...

000d9560 <__sf_fake_stdout>:
	...

000d9580 <__sf_fake_stderr>:
	...
   d95a0:	00000043                                         C.

000d95a2 <link_const_variable_data_end>:
	...

000d95a4 <link_constructors_location>:
   d95a4:	000d4919 	.word	0x000d4919
   d95a8:	000d6749 	.word	0x000d6749
   d95ac:	000d67d5 	.word	0x000d67d5
   d95b0:	000d790d 	.word	0x000d790d
   d95b4:	000d7d5d 	.word	0x000d7d5d
   d95b8:	000d7ee1 	.word	0x000d7ee1
   d95bc:	000d803d 	.word	0x000d803d
   d95c0:	000d8291 	.word	0x000d8291
   d95c4:	000d82a9 	.word	0x000d82a9
   d95c8:	000d8555 	.word	0x000d8555
   d95cc:	000d8741 	.word	0x000d8741
   d95d0:	000d87c5 	.word	0x000d87c5
   d95d4:	000d8889 	.word	0x000d8889
   d95d8:	000d890d 	.word	0x000d890d
   d95dc:	000d8991 	.word	0x000d8991
